/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 03 06:56:44 CEST 2012 ----! */

package com.jogamp.opencl.llb;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * Java bindings to OpenCL kernels.
  * @author Michael Bien, GlueGen, et al.
  */
public interface CLKernelBinding {

  public static final int CL_KERNEL_FUNCTION_NAME = 0x1190;
  public static final int CL_KERNEL_NUM_ARGS = 0x1191;
  public static final int CL_KERNEL_REFERENCE_COUNT = 0x1192;
  public static final int CL_KERNEL_CONTEXT = 0x1193;
  public static final int CL_KERNEL_PROGRAM = 0x1194;
  public static final int CL_KERNEL_WORK_GROUP_SIZE = 0x11B0;
  public static final int CL_KERNEL_COMPILE_WORK_GROUP_SIZE = 0x11B1;
  public static final int CL_KERNEL_LOCAL_MEM_SIZE = 0x11B2;
  public static final int CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 0x11B3;
  public static final int CL_KERNEL_PRIVATE_MEM_SIZE = 0x11B4;

  /** Interface to C language function: <br> <code> cl_kernel {@native clCreateKernel}(cl_program program, const char *  kernel_name, cl_int *  errcode_ret); </code> 
      @param errcode_ret a direct or array-backed {@link java.nio.IntBuffer}   */
  public long clCreateKernel(long program, String kernel_name, IntBuffer errcode_ret);

  /** Interface to C language function: <br> <code> cl_kernel {@native clCreateKernel}(cl_program program, const char *  kernel_name, cl_int *  errcode_ret); </code>    */
  public long clCreateKernel(long program, String kernel_name, int[] errcode_ret, int errcode_ret_offset);

  /** Interface to C language function: <br> <code> cl_int {@native clCreateKernelsInProgram}(cl_program program, cl_uint num_kernels, cl_kernel *  kernels, cl_uint *  num_kernels_ret); </code> 
      @param kernels a direct only {@link com.jogamp.common.nio.PointerBuffer}
      @param num_kernels_ret a direct only {@link java.nio.IntBuffer}   */
  public int clCreateKernelsInProgram(long program, int num_kernels, PointerBuffer kernels, IntBuffer num_kernels_ret);

  /** Interface to C language function: <br> <code> cl_int {@native clGetKernelInfo}(cl_kernel kernel, cl_kernel_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret); </code> 
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetKernelInfo(long kernel, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code> cl_int {@native clGetKernelWorkGroupInfo}(cl_kernel kernel, cl_device_id device, cl_kernel_work_group_info param_name, size_t param_value_size, void *  param_value, size_t *  param_value_size_ret); </code> 
      @param param_value a direct only {@link java.nio.Buffer}
      @param param_value_size_ret a direct only {@link com.jogamp.common.nio.PointerBuffer}   */
  public int clGetKernelWorkGroupInfo(long kernel, long device, int param_name, long param_value_size, Buffer param_value, PointerBuffer param_value_size_ret);

  /** Interface to C language function: <br> <code> cl_int {@native clReleaseKernel}(cl_kernel kernel); </code>    */
  public int clReleaseKernel(long kernel);

  /** Interface to C language function: <br> <code> cl_int {@native clRetainKernel}(cl_kernel kernel); </code>    */
  public int clRetainKernel(long kernel);

  /** Interface to C language function: <br> <code> cl_int {@native clSetKernelArg}(cl_kernel kernel, cl_uint arg_index, size_t arg_size, const void *  arg_value); </code> 
      @param arg_value a direct only {@link java.nio.Buffer}   */
  public int clSetKernelArg(long kernel, int arg_index, long arg_size, Buffer arg_value);


} // end of class CLKernelBinding
