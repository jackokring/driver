/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/procaddress/ProcAddressEmitter.java on Thu Jul 26 21:47:13 CEST 2012 ----! */

package com.jogamp.openal;

import com.jogamp.openal.*;
import jogamp.openal.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface AL extends ALConstants{

  public static final int ALC_EFX_MAJOR_VERSION = 0x20001;
  public static final int ALC_EFX_MINOR_VERSION = 0x20002;
  public static final int ALC_MAX_AUXILIARY_SENDS = 0x20003;
  public static final double LOWPASS_MIN_GAIN = 0.0f;
  public static final double LOWPASS_MAX_GAIN = 1.0f;
  public static final double LOWPASS_DEFAULT_GAIN = 1.0f;
  public static final double LOWPASS_MIN_GAINHF = 0.0f;
  public static final double LOWPASS_MAX_GAINHF = 1.0f;
  public static final double LOWPASS_DEFAULT_GAINHF = 1.0f;
  public static final double HIGHPASS_MIN_GAIN = 0.0f;
  public static final double HIGHPASS_MAX_GAIN = 1.0f;
  public static final double HIGHPASS_DEFAULT_GAIN = 1.0f;
  public static final double HIGHPASS_MIN_GAINLF = 0.0f;
  public static final double HIGHPASS_MAX_GAINLF = 1.0f;
  public static final double HIGHPASS_DEFAULT_GAINLF = 1.0f;
  public static final double BANDPASS_MIN_GAIN = 0.0f;
  public static final double BANDPASS_MAX_GAIN = 1.0f;
  public static final double BANDPASS_DEFAULT_GAIN = 1.0f;
  public static final double BANDPASS_MIN_GAINHF = 0.0f;
  public static final double BANDPASS_MAX_GAINHF = 1.0f;
  public static final double BANDPASS_DEFAULT_GAINHF = 1.0f;
  public static final double BANDPASS_MIN_GAINLF = 0.0f;
  public static final double BANDPASS_MAX_GAINLF = 1.0f;
  public static final double BANDPASS_DEFAULT_GAINLF = 1.0f;

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSlotf(ALuint asid, ALenum param, ALfloat value); </code>    */
  public void alAuxiliaryEffectSlotf(int asid, int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSlotfv(ALuint asid, ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alAuxiliaryEffectSlotfv(int asid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSlotfv(ALuint asid, ALenum param, ALfloat *  values); </code>    */
  public void alAuxiliaryEffectSlotfv(int asid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSloti(ALuint asid, ALenum param, ALint value); </code>    */
  public void alAuxiliaryEffectSloti(int asid, int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSlotiv(ALuint asid, ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alAuxiliaryEffectSlotiv(int asid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alAuxiliaryEffectSlotiv(ALuint asid, ALenum param, ALint *  values); </code>    */
  public void alAuxiliaryEffectSlotiv(int asid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBuffer3f(ALuint bid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3); </code>    */
  public void alBuffer3f(int bid, int param, float value1, float value2, float value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBuffer3i(ALuint bid, ALenum param, ALint value1, ALint value2, ALint value3); </code>    */
  public void alBuffer3i(int bid, int param, int value1, int value2, int value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferData(ALuint bid, ALenum format, const ALvoid *  data, ALsizei size, ALsizei freq); </code> 
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void alBufferData(int bid, int format, Buffer data, int size, int freq);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferf(ALuint bid, ALenum param, ALfloat value); </code>    */
  public void alBufferf(int bid, int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferfv(ALuint bid, ALenum param, const ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alBufferfv(int bid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferfv(ALuint bid, ALenum param, const ALfloat *  values); </code>    */
  public void alBufferfv(int bid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferi(ALuint bid, ALenum param, ALint value); </code>    */
  public void alBufferi(int bid, int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferiv(ALuint bid, ALenum param, const ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alBufferiv(int bid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alBufferiv(ALuint bid, ALenum param, const ALint *  values); </code>    */
  public void alBufferiv(int bid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteAuxiliaryEffectSlots(ALsizei n, ALuint *  slots); </code> 
      @param slots a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alDeleteAuxiliaryEffectSlots(int n, IntBuffer slots);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteAuxiliaryEffectSlots(ALsizei n, ALuint *  slots); </code>    */
  public void alDeleteAuxiliaryEffectSlots(int n, int[] slots, int slots_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteBuffers(ALsizei n, const ALuint *  buffers); </code> 
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alDeleteBuffers(int n, IntBuffer buffers);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteBuffers(ALsizei n, const ALuint *  buffers); </code>    */
  public void alDeleteBuffers(int n, int[] buffers, int buffers_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteEffects(ALsizei n, ALuint *  effects); </code> 
      @param effects a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alDeleteEffects(int n, IntBuffer effects);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteEffects(ALsizei n, ALuint *  effects); </code>    */
  public void alDeleteEffects(int n, int[] effects, int effects_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteFilters(ALsizei n, ALuint *  filters); </code> 
      @param filters a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alDeleteFilters(int n, IntBuffer filters);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteFilters(ALsizei n, ALuint *  filters); </code>    */
  public void alDeleteFilters(int n, int[] filters, int filters_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteSources(ALsizei n, const ALuint *  sources); </code> 
      @param sources a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alDeleteSources(int n, IntBuffer sources);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDeleteSources(ALsizei n, const ALuint *  sources); </code>    */
  public void alDeleteSources(int n, int[] sources, int sources_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDisable(ALenum capability); </code>    */
  public void alDisable(int capability);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDistanceModel(ALenum distanceModel); </code>    */
  public void alDistanceModel(int distanceModel);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDopplerFactor(ALfloat value); </code>    */
  public void alDopplerFactor(float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alDopplerVelocity(ALfloat value); </code>    */
  public void alDopplerVelocity(float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffectf(ALuint eid, ALenum param, ALfloat value); </code>    */
  public void alEffectf(int eid, int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffectfv(ALuint eid, ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alEffectfv(int eid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffectfv(ALuint eid, ALenum param, ALfloat *  values); </code>    */
  public void alEffectfv(int eid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffecti(ALuint eid, ALenum param, ALint value); </code>    */
  public void alEffecti(int eid, int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffectiv(ALuint eid, ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alEffectiv(int eid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEffectiv(ALuint eid, ALenum param, ALint *  values); </code>    */
  public void alEffectiv(int eid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alEnable(ALenum capability); </code>    */
  public void alEnable(int capability);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilterf(ALuint fid, ALenum param, ALfloat value); </code>    */
  public void alFilterf(int fid, int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilterfv(ALuint fid, ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alFilterfv(int fid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilterfv(ALuint fid, ALenum param, ALfloat *  values); </code>    */
  public void alFilterfv(int fid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilteri(ALuint fid, ALenum param, ALint value); </code>    */
  public void alFilteri(int fid, int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilteriv(ALuint fid, ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alFilteriv(int fid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alFilteriv(ALuint fid, ALenum param, ALint *  values); </code>    */
  public void alFilteriv(int fid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenAuxiliaryEffectSlots(ALsizei n, ALuint *  slots); </code> 
      @param slots a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGenAuxiliaryEffectSlots(int n, IntBuffer slots);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenAuxiliaryEffectSlots(ALsizei n, ALuint *  slots); </code>    */
  public void alGenAuxiliaryEffectSlots(int n, int[] slots, int slots_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenBuffers(ALsizei n, ALuint *  buffers); </code> 
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGenBuffers(int n, IntBuffer buffers);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenBuffers(ALsizei n, ALuint *  buffers); </code>    */
  public void alGenBuffers(int n, int[] buffers, int buffers_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenEffects(ALsizei n, ALuint *  effects); </code> 
      @param effects a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGenEffects(int n, IntBuffer effects);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenEffects(ALsizei n, ALuint *  effects); </code>    */
  public void alGenEffects(int n, int[] effects, int effects_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenFilters(ALsizei n, ALuint *  filters); </code> 
      @param filters a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGenFilters(int n, IntBuffer filters);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenFilters(ALsizei n, ALuint *  filters); </code>    */
  public void alGenFilters(int n, int[] filters, int filters_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenSources(ALsizei n, ALuint *  sources); </code> 
      @param sources a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGenSources(int n, IntBuffer sources);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGenSources(ALsizei n, ALuint *  sources); </code>    */
  public void alGenSources(int n, int[] sources, int sources_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotf(ALuint asid, ALenum pname, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetAuxiliaryEffectSlotf(int asid, int pname, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotf(ALuint asid, ALenum pname, ALfloat *  value); </code>    */
  public void alGetAuxiliaryEffectSlotf(int asid, int pname, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotfv(ALuint asid, ALenum pname, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetAuxiliaryEffectSlotfv(int asid, int pname, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotfv(ALuint asid, ALenum pname, ALfloat *  values); </code>    */
  public void alGetAuxiliaryEffectSlotfv(int asid, int pname, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSloti(ALuint asid, ALenum pname, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetAuxiliaryEffectSloti(int asid, int pname, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSloti(ALuint asid, ALenum pname, ALint *  value); </code>    */
  public void alGetAuxiliaryEffectSloti(int asid, int pname, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotiv(ALuint asid, ALenum pname, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetAuxiliaryEffectSlotiv(int asid, int pname, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetAuxiliaryEffectSlotiv(ALuint asid, ALenum pname, ALint *  values); </code>    */
  public void alGetAuxiliaryEffectSlotiv(int asid, int pname, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alGetBoolean(ALenum param); </code>    */
  public boolean alGetBoolean(int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBooleanv(ALenum param, ALboolean *  data); </code> 
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void alGetBooleanv(int param, ByteBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBooleanv(ALenum param, ALboolean *  data); </code>    */
  public void alGetBooleanv(int param, byte[] data, int data_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBuffer3f(ALuint bid, ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value2 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value3 a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetBuffer3f(int bid, int param, FloatBuffer value1, FloatBuffer value2, FloatBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBuffer3f(ALuint bid, ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code>    */
  public void alGetBuffer3f(int bid, int param, float[] value1, int value1_offset, float[] value2, int value2_offset, float[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBuffer3i(ALuint bid, ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.IntBuffer}
      @param value2 a direct or array-backed {@link java.nio.IntBuffer}
      @param value3 a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetBuffer3i(int bid, int param, IntBuffer value1, IntBuffer value2, IntBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBuffer3i(ALuint bid, ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code>    */
  public void alGetBuffer3i(int bid, int param, int[] value1, int value1_offset, int[] value2, int value2_offset, int[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferf(ALuint bid, ALenum param, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetBufferf(int bid, int param, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferf(ALuint bid, ALenum param, ALfloat *  value); </code>    */
  public void alGetBufferf(int bid, int param, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferfv(ALuint bid, ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetBufferfv(int bid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferfv(ALuint bid, ALenum param, ALfloat *  values); </code>    */
  public void alGetBufferfv(int bid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferi(ALuint bid, ALenum param, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetBufferi(int bid, int param, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferi(ALuint bid, ALenum param, ALint *  value); </code>    */
  public void alGetBufferi(int bid, int param, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferiv(ALuint bid, ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetBufferiv(int bid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetBufferiv(ALuint bid, ALenum param, ALint *  values); </code>    */
  public void alGetBufferiv(int bid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> ALdouble alGetDouble(ALenum param); </code>    */
  public double alGetDouble(int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetDoublev(ALenum param, ALdouble *  data); </code> 
      @param data a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void alGetDoublev(int param, DoubleBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetDoublev(ALenum param, ALdouble *  data); </code>    */
  public void alGetDoublev(int param, double[] data, int data_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectf(ALuint eid, ALenum pname, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetEffectf(int eid, int pname, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectf(ALuint eid, ALenum pname, ALfloat *  value); </code>    */
  public void alGetEffectf(int eid, int pname, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectfv(ALuint eid, ALenum pname, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetEffectfv(int eid, int pname, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectfv(ALuint eid, ALenum pname, ALfloat *  values); </code>    */
  public void alGetEffectfv(int eid, int pname, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffecti(ALuint eid, ALenum pname, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetEffecti(int eid, int pname, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffecti(ALuint eid, ALenum pname, ALint *  value); </code>    */
  public void alGetEffecti(int eid, int pname, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectiv(ALuint eid, ALenum pname, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetEffectiv(int eid, int pname, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetEffectiv(ALuint eid, ALenum pname, ALint *  values); </code>    */
  public void alGetEffectiv(int eid, int pname, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> ALenum alGetEnumValue(const ALchar *  ename); </code>    */
  public int alGetEnumValue(String ename);

  /** Entry point (through function pointer) to C language function: <br> <code> ALenum alGetError(void); </code>    */
  public int alGetError();

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilterf(ALuint fid, ALenum pname, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetFilterf(int fid, int pname, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilterf(ALuint fid, ALenum pname, ALfloat *  value); </code>    */
  public void alGetFilterf(int fid, int pname, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilterfv(ALuint fid, ALenum pname, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetFilterfv(int fid, int pname, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilterfv(ALuint fid, ALenum pname, ALfloat *  values); </code>    */
  public void alGetFilterfv(int fid, int pname, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilteri(ALuint fid, ALenum pname, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetFilteri(int fid, int pname, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilteri(ALuint fid, ALenum pname, ALint *  value); </code>    */
  public void alGetFilteri(int fid, int pname, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilteriv(ALuint fid, ALenum pname, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetFilteriv(int fid, int pname, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFilteriv(ALuint fid, ALenum pname, ALint *  values); </code>    */
  public void alGetFilteriv(int fid, int pname, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> ALfloat alGetFloat(ALenum param); </code>    */
  public float alGetFloat(int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFloatv(ALenum param, ALfloat *  data); </code> 
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetFloatv(int param, FloatBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetFloatv(ALenum param, ALfloat *  data); </code>    */
  public void alGetFloatv(int param, float[] data, int data_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> ALint alGetInteger(ALenum param); </code>    */
  public int alGetInteger(int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetIntegerv(ALenum param, ALint *  data); </code> 
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetIntegerv(int param, IntBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetIntegerv(ALenum param, ALint *  data); </code>    */
  public void alGetIntegerv(int param, int[] data, int data_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListener3f(ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value2 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value3 a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetListener3f(int param, FloatBuffer value1, FloatBuffer value2, FloatBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListener3f(ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code>    */
  public void alGetListener3f(int param, float[] value1, int value1_offset, float[] value2, int value2_offset, float[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListener3i(ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.IntBuffer}
      @param value2 a direct or array-backed {@link java.nio.IntBuffer}
      @param value3 a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetListener3i(int param, IntBuffer value1, IntBuffer value2, IntBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListener3i(ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code>    */
  public void alGetListener3i(int param, int[] value1, int value1_offset, int[] value2, int value2_offset, int[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListenerf(ALenum param, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetListenerf(int param, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListenerf(ALenum param, ALfloat *  value); </code>    */
  public void alGetListenerf(int param, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListenerfv(ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetListenerfv(int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListenerfv(ALenum param, ALfloat *  values); </code>    */
  public void alGetListenerfv(int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListeneri(ALenum param, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetListeneri(int param, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListeneri(ALenum param, ALint *  value); </code>    */
  public void alGetListeneri(int param, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListeneriv(ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetListeneriv(int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetListeneriv(ALenum param, ALint *  values); </code>    */
  public void alGetListeneriv(int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSource3f(ALuint sid, ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value2 a direct or array-backed {@link java.nio.FloatBuffer}
      @param value3 a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetSource3f(int sid, int param, FloatBuffer value1, FloatBuffer value2, FloatBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSource3f(ALuint sid, ALenum param, ALfloat *  value1, ALfloat *  value2, ALfloat *  value3); </code>    */
  public void alGetSource3f(int sid, int param, float[] value1, int value1_offset, float[] value2, int value2_offset, float[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSource3i(ALuint sid, ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code> 
      @param value1 a direct or array-backed {@link java.nio.IntBuffer}
      @param value2 a direct or array-backed {@link java.nio.IntBuffer}
      @param value3 a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetSource3i(int sid, int param, IntBuffer value1, IntBuffer value2, IntBuffer value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSource3i(ALuint sid, ALenum param, ALint *  value1, ALint *  value2, ALint *  value3); </code>    */
  public void alGetSource3i(int sid, int param, int[] value1, int value1_offset, int[] value2, int value2_offset, int[] value3, int value3_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcef(ALuint sid, ALenum param, ALfloat *  value); </code> 
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetSourcef(int sid, int param, FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcef(ALuint sid, ALenum param, ALfloat *  value); </code>    */
  public void alGetSourcef(int sid, int param, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcefv(ALuint sid, ALenum param, ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alGetSourcefv(int sid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcefv(ALuint sid, ALenum param, ALfloat *  values); </code>    */
  public void alGetSourcefv(int sid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcei(ALuint sid, ALenum param, ALint *  value); </code> 
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetSourcei(int sid, int param, IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourcei(ALuint sid, ALenum param, ALint *  value); </code>    */
  public void alGetSourcei(int sid, int param, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourceiv(ALuint sid, ALenum param, ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alGetSourceiv(int sid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alGetSourceiv(ALuint sid, ALenum param, ALint *  values); </code>    */
  public void alGetSourceiv(int sid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> const ALchar *  alGetString(ALenum param); </code>    */
  public String alGetString(int param);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsAuxiliaryEffectSlot(ALuint slot); </code>    */
  public boolean alIsAuxiliaryEffectSlot(int slot);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsBuffer(ALuint bid); </code>    */
  public boolean alIsBuffer(int bid);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsEffect(ALuint eid); </code>    */
  public boolean alIsEffect(int eid);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsEnabled(ALenum capability); </code>    */
  public boolean alIsEnabled(int capability);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsExtensionPresent(const ALchar *  extname); </code>    */
  public boolean alIsExtensionPresent(String extname);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsFilter(ALuint fid); </code>    */
  public boolean alIsFilter(int fid);

  /** Entry point (through function pointer) to C language function: <br> <code> ALboolean alIsSource(ALuint sid); </code>    */
  public boolean alIsSource(int sid);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListener3f(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3); </code>    */
  public void alListener3f(int param, float value1, float value2, float value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListener3i(ALenum param, ALint value1, ALint value2, ALint value3); </code>    */
  public void alListener3i(int param, int value1, int value2, int value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListenerf(ALenum param, ALfloat value); </code>    */
  public void alListenerf(int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListenerfv(ALenum param, const ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alListenerfv(int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListenerfv(ALenum param, const ALfloat *  values); </code>    */
  public void alListenerfv(int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListeneri(ALenum param, ALint value); </code>    */
  public void alListeneri(int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListeneriv(ALenum param, const ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alListeneriv(int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alListeneriv(ALenum param, const ALint *  values); </code>    */
  public void alListeneriv(int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSource3f(ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3); </code>    */
  public void alSource3f(int sid, int param, float value1, float value2, float value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSource3i(ALuint sid, ALenum param, ALint value1, ALint value2, ALint value3); </code>    */
  public void alSource3i(int sid, int param, int value1, int value2, int value3);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePause(ALuint sid); </code>    */
  public void alSourcePause(int sid);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePausev(ALsizei ns, const ALuint *  sids); </code> 
      @param sids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourcePausev(int ns, IntBuffer sids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePausev(ALsizei ns, const ALuint *  sids); </code>    */
  public void alSourcePausev(int ns, int[] sids, int sids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePlay(ALuint sid); </code>    */
  public void alSourcePlay(int sid);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePlayv(ALsizei ns, const ALuint *  sids); </code> 
      @param sids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourcePlayv(int ns, IntBuffer sids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcePlayv(ALsizei ns, const ALuint *  sids); </code>    */
  public void alSourcePlayv(int ns, int[] sids, int sids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceQueueBuffers(ALuint sid, ALsizei numEntries, const ALuint *  bids); </code> 
      @param bids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourceQueueBuffers(int sid, int numEntries, IntBuffer bids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceQueueBuffers(ALuint sid, ALsizei numEntries, const ALuint *  bids); </code>    */
  public void alSourceQueueBuffers(int sid, int numEntries, int[] bids, int bids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceRewind(ALuint sid); </code>    */
  public void alSourceRewind(int sid);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceRewindv(ALsizei ns, const ALuint *  sids); </code> 
      @param sids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourceRewindv(int ns, IntBuffer sids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceRewindv(ALsizei ns, const ALuint *  sids); </code>    */
  public void alSourceRewindv(int ns, int[] sids, int sids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceStop(ALuint sid); </code>    */
  public void alSourceStop(int sid);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceStopv(ALsizei ns, const ALuint *  sids); </code> 
      @param sids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourceStopv(int ns, IntBuffer sids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceStopv(ALsizei ns, const ALuint *  sids); </code>    */
  public void alSourceStopv(int ns, int[] sids, int sids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceUnqueueBuffers(ALuint sid, ALsizei numEntries, ALuint *  bids); </code> 
      @param bids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourceUnqueueBuffers(int sid, int numEntries, IntBuffer bids);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceUnqueueBuffers(ALuint sid, ALsizei numEntries, ALuint *  bids); </code>    */
  public void alSourceUnqueueBuffers(int sid, int numEntries, int[] bids, int bids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcef(ALuint sid, ALenum param, ALfloat value); </code>    */
  public void alSourcef(int sid, int param, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcefv(ALuint sid, ALenum param, const ALfloat *  values); </code> 
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void alSourcefv(int sid, int param, FloatBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcefv(ALuint sid, ALenum param, const ALfloat *  values); </code>    */
  public void alSourcefv(int sid, int param, float[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourcei(ALuint sid, ALenum param, ALint value); </code>    */
  public void alSourcei(int sid, int param, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceiv(ALuint sid, ALenum param, const ALint *  values); </code> 
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void alSourceiv(int sid, int param, IntBuffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSourceiv(ALuint sid, ALenum param, const ALint *  values); </code>    */
  public void alSourceiv(int sid, int param, int[] values, int values_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void alSpeedOfSound(ALfloat value); </code>    */
  public void alSpeedOfSound(float value);


} // end of class AL
