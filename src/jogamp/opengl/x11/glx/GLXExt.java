/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:28:50 CEST 2012 ----! */

package jogamp.opengl.x11.glx;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import jogamp.nativewindow.x11.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface GLXExt {

  /** Part of <code>GLX_SGIS_multisample</code> */
  public static final int GLX_SAMPLE_BUFFERS_SGIS = 100000;
  /** Part of <code>GLX_SGIS_multisample</code> */
  public static final int GLX_SAMPLES_SGIS = 100001;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_WINDOW_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_PIXMAP_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RGBA_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_DRAWABLE_TYPE_SGIX = 0x8010;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RENDER_TYPE_SGIX = 0x8011;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_X_RENDERABLE_SGIX = 0x8012;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_FBCONFIG_ID_SGIX = 0x8013;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_RGBA_TYPE_SGIX = 0x8014;
  /** Part of <code>GLX_SGIX_fbconfig</code> */
  public static final int GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PBUFFER_BIT_SGIX = 0x00000004;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_LARGEST_PBUFFER_SGIX = 0x801C;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_WIDTH_SGIX = 0x801D;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_HEIGHT_SGIX = 0x801E;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_EVENT_MASK_SGIX = 0x801F;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_DAMAGED_SGIX = 0x8020;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_SAVED_SGIX = 0x8021;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_WINDOW_SGIX = 0x8022;
  /** Part of <code>GLX_SGIX_pbuffer</code> */
  public static final int GLX_PBUFFER_SGIX = 0x8023;
  /** Part of <code>GLX_SGIX_video_resize</code> */
  public static final int GLX_SYNC_FRAME_SGIX = 0x00000000;
  /** Part of <code>GLX_SGIX_video_resize</code> */
  public static final int GLX_SYNC_SWAP_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_dmbuffer</code> */
  public static final int GLX_DIGITAL_MEDIA_PBUFFER_SGIX = 0x8024;
  /** Part of <code>GLX_SGIS_blended_overlay</code> */
  public static final int GLX_BLENDED_RGBA_SGIS = 0x8025;
  /** Part of <code>GLX_SGIS_shared_multisample</code> */
  public static final int GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
  /** Part of <code>GLX_SGIS_shared_multisample</code> */
  public static final int GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
  /** Part of <code>GLX_3DFX_multisample</code> */
  public static final int GLX_SAMPLE_BUFFERS_3DFX = 0x8050;
  /** Part of <code>GLX_3DFX_multisample</code> */
  public static final int GLX_SAMPLES_3DFX = 0x8051;
  /** Part of <code>GLX_MESA_set_3dfx_mode</code> */
  public static final int GLX_3DFX_WINDOW_MODE_MESA = 0x1;
  /** Part of <code>GLX_MESA_set_3dfx_mode</code> */
  public static final int GLX_3DFX_FULLSCREEN_MODE_MESA = 0x2;
  /** Part of <code>GLX_SGIX_visual_select_group</code> */
  public static final int GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
  /** Part of <code>GLX_NV_float_buffer</code> */
  public static final int GLX_FLOAT_COMPONENTS_NV = 0x20B0;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 80;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_BAD_HYPERPIPE_CONFIG_SGIX = 91;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_BAD_HYPERPIPE_SGIX = 92;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_RENDER_PIPE_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_PIPE_RECT_SGIX = 0x00000001;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_PIPE_RECT_LIMITS_SGIX = 0x00000002;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_STEREO_SGIX = 0x00000003;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 0x00000004;
  /** Part of <code>GLX_SGIX_hyperpipe</code> */
  public static final int GLX_HYPERPIPE_ID_SGIX = 0x8030;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
  /** Part of <code>GLX_NV_video_out</code> */
  public static final int GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;
  /** Part of <code>GLX_NV_multisample_coverage</code> */
  public static final int GLX_COVERAGE_SAMPLES_NV = 100001;
  /** Part of <code>GLX_NV_multisample_coverage</code> */
  public static final int GLX_COLOR_SAMPLES_NV = 0x20B3;

  /** Entry point to C language function: <code> GLvoid *  glXAllocateMemoryNV(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority); </code> <br>Part of <code>GLX_NV_vertex_array_range</code>   */
  public ByteBuffer glXAllocateMemoryNV(int size, float readfreq, float writefreq, float priority);

  /** Entry point to C language function: <code> int glXBindChannelToWindowSGIX(Display *  display, int screen, int channel, XID window); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXBindChannelToWindowSGIX(long display, int screen, int channel, long window);

  /** Entry point to C language function: <code> Bool glXBindSwapBarrierNV(Display *  dpy, GLuint group, GLuint barrier); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXBindSwapBarrierNV(long dpy, int group, int barrier);

  /** Entry point to C language function: <code> void glXBindSwapBarrierSGIX(Display *  dpy, XID drawable, int barrier); </code> <br>Part of <code>GLX_SGIX_swap_barrier</code>   */
  public void glXBindSwapBarrierSGIX(long dpy, long drawable, int barrier);

  /** Entry point to C language function: <code> int glXBindVideoDeviceNV(Display *  dpy, unsigned int video_slot, unsigned int video_device, const int *  attrib_list); </code> <br>Part of <code>GLX_NV_present_video</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXBindVideoDeviceNV(long dpy, int video_slot, int video_device, IntBuffer attrib_list);

  /** Entry point to C language function: <code> int glXBindVideoDeviceNV(Display *  dpy, unsigned int video_slot, unsigned int video_device, const int *  attrib_list); </code> <br>Part of <code>GLX_NV_present_video</code>   */
  public int glXBindVideoDeviceNV(long dpy, int video_slot, int video_device, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> int glXBindVideoImageNV(Display *  dpy, GLXVideoDeviceNV VideoDevice, XID pbuf, int iVideoBuffer); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXBindVideoImageNV(long dpy, int VideoDevice, long pbuf, int iVideoBuffer);

  /** Entry point to C language function: <code> int glXChannelRectSGIX(Display *  display, int screen, int channel, int x, int y, int w, int h); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXChannelRectSGIX(long display, int screen, int channel, int x, int y, int w, int h);

  /** Entry point to C language function: <code> int glXChannelRectSyncSGIX(Display *  display, int screen, int channel, GLenum synctype); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXChannelRectSyncSGIX(long display, int screen, int channel, int synctype);

  /** Entry point to C language function: <code> void glXCopySubBufferMESA(Display *  dpy, XID drawable, int x, int y, int width, int height); </code> <br>Part of <code>GLX_MESA_copy_sub_buffer</code>   */
  public void glXCopySubBufferMESA(long dpy, long drawable, int x, int y, int width, int height);

  /** Entry point to C language function: <code> GLXContext glXCreateContextAttribsARB(Display *  dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *  attrib_list); </code> <br>Part of <code>GLX_ARB_create_context</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public long glXCreateContextAttribsARB(long dpy, long config, long share_context, boolean direct, IntBuffer attrib_list);

  /** Entry point to C language function: <code> GLXContext glXCreateContextAttribsARB(Display *  dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *  attrib_list); </code> <br>Part of <code>GLX_ARB_create_context</code>   */
  public long glXCreateContextAttribsARB(long dpy, long config, long share_context, boolean direct, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> void glXCushionSGI(Display *  dpy, XID window, float cushion); </code> <br>Part of <code>GLX_SGI_cushion</code>   */
  public void glXCushionSGI(long dpy, long window, float cushion);

  /** Entry point to C language function: <code> unsigned int *  glXEnumerateVideoDevicesNV(Display *  dpy, int screen, int *  nelements); </code> <br>Part of <code>GLX_NV_present_video</code>
      @param nelements a direct or array-backed {@link java.nio.IntBuffer}   */
  public IntBuffer glXEnumerateVideoDevicesNV(long dpy, int screen, IntBuffer nelements);

  /** Entry point to C language function: <code> unsigned int *  glXEnumerateVideoDevicesNV(Display *  dpy, int screen, int *  nelements); </code> <br>Part of <code>GLX_NV_present_video</code>   */
  public IntBuffer glXEnumerateVideoDevicesNV(long dpy, int screen, int[] nelements, int nelements_offset);

  /** Entry point to C language function: <code> void glXFreeContextEXT(Display *  dpy, GLXContext context); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public void glXFreeContextEXT(long dpy, long context);

  /** Entry point to C language function: <code> void glXFreeMemoryNV(GLvoid *  pointer); </code> <br>Part of <code>GLX_NV_vertex_array_range</code>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public void glXFreeMemoryNV(Buffer pointer);

  /** Entry point to C language function: <code> unsigned int glXGetAGPOffsetMESA(const void *  pointer); </code> <br>Part of <code>GLX_MESA_agp_offset</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public int glXGetAGPOffsetMESA(Buffer pointer);

  /** Entry point to C language function: <code> XID glXGetContextIDEXT(GLXContext context); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXGetContextIDEXT(long context);

  /** Entry point to C language function: <code> Display *  glXGetCurrentDisplayEXT(void); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXGetCurrentDisplayEXT();

  /** Entry point to C language function: <code> XID glXGetCurrentReadDrawableSGI(void); </code> <br>Part of <code>GLX_SGI_make_current_read</code>   */
  public long glXGetCurrentReadDrawableSGI();

  /** Entry point to C language function: <code> int glXGetRefreshRateSGI(unsigned int *  markerp); </code> <br>Part of <code>GLX_SGI_video_sync</code>
      @param markerp a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXGetRefreshRateSGI(IntBuffer markerp);

  /** Entry point to C language function: <code> int glXGetRefreshRateSGI(unsigned int *  markerp); </code> <br>Part of <code>GLX_SGI_video_sync</code>   */
  public int glXGetRefreshRateSGI(int[] markerp, int markerp_offset);

  /** Entry point to C language function: <code> Status glXGetTransparentIndexSUN(Display *  dpy, XID overlay, XID underlay, long *  pTransparentIndex); </code> <br>Part of <code>GLX_SUN_get_transparent_index</code>
      @param pTransparentIndex a direct or array-backed {@link java.nio.LongBuffer}   */
  public int glXGetTransparentIndexSUN(long dpy, long overlay, long underlay, LongBuffer pTransparentIndex);

  /** Entry point to C language function: <code> Status glXGetTransparentIndexSUN(Display *  dpy, XID overlay, XID underlay, long *  pTransparentIndex); </code> <br>Part of <code>GLX_SUN_get_transparent_index</code>   */
  public int glXGetTransparentIndexSUN(long dpy, long overlay, long underlay, long[] pTransparentIndex, int pTransparentIndex_offset);

  /** Entry point to C language function: <code> int glXGetVideoDeviceNV(Display *  dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *  pVideoDevice); </code> <br>Part of <code>GLX_NV_video_out</code>
      @param pVideoDevice a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXGetVideoDeviceNV(long dpy, int screen, int numVideoDevices, IntBuffer pVideoDevice);

  /** Entry point to C language function: <code> int glXGetVideoDeviceNV(Display *  dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *  pVideoDevice); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXGetVideoDeviceNV(long dpy, int screen, int numVideoDevices, int[] pVideoDevice, int pVideoDevice_offset);

  /** Entry point to C language function: <code> int glXGetVideoInfoNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *  pulCounterOutputPbuffer, unsigned long *  pulCounterOutputVideo); </code> <br>Part of <code>GLX_NV_video_out</code>
      @param pulCounterOutputPbuffer a direct or array-backed {@link java.nio.LongBuffer}
      @param pulCounterOutputVideo a direct or array-backed {@link java.nio.LongBuffer}   */
  public int glXGetVideoInfoNV(long dpy, int screen, int VideoDevice, LongBuffer pulCounterOutputPbuffer, LongBuffer pulCounterOutputVideo);

  /** Entry point to C language function: <code> int glXGetVideoInfoNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *  pulCounterOutputPbuffer, unsigned long *  pulCounterOutputVideo); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXGetVideoInfoNV(long dpy, int screen, int VideoDevice, long[] pulCounterOutputPbuffer, int pulCounterOutputPbuffer_offset, long[] pulCounterOutputVideo, int pulCounterOutputVideo_offset);

  /** Entry point to C language function: <code> int glXGetVideoSyncSGI(unsigned int *  markerp); </code> <br>Part of <code>GLX_SGI_video_sync</code>
      @param markerp a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXGetVideoSyncSGI(IntBuffer markerp);

  /** Entry point to C language function: <code> int glXGetVideoSyncSGI(unsigned int *  markerp); </code> <br>Part of <code>GLX_SGI_video_sync</code>   */
  public int glXGetVideoSyncSGI(int[] markerp, int markerp_offset);

  /** Entry point to C language function: <code> GLXContext glXImportContextEXT(Display *  dpy, XID contextID); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public long glXImportContextEXT(long dpy, long contextID);

  /** Entry point to C language function: <code> Bool glXJoinSwapGroupNV(Display *  dpy, XID drawable, GLuint group); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXJoinSwapGroupNV(long dpy, long drawable, int group);

  /** Entry point to C language function: <code> void glXJoinSwapGroupSGIX(Display *  dpy, XID drawable, XID member); </code> <br>Part of <code>GLX_SGIX_swap_group</code>   */
  public void glXJoinSwapGroupSGIX(long dpy, long drawable, long member);

  /** Entry point to C language function: <code> Bool glXMakeCurrentReadSGI(Display *  dpy, XID draw, XID read, GLXContext ctx); </code> <br>Part of <code>GLX_SGI_make_current_read</code>   */
  public boolean glXMakeCurrentReadSGI(long dpy, long draw, long read, long ctx);

  /** Entry point to C language function: <code> int glXQueryChannelDeltasSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh); </code> <br>Part of <code>GLX_SGIX_video_resize</code>
      @param dx a direct or array-backed {@link java.nio.IntBuffer}
      @param dy a direct or array-backed {@link java.nio.IntBuffer}
      @param dw a direct or array-backed {@link java.nio.IntBuffer}
      @param dh a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXQueryChannelDeltasSGIX(long display, int screen, int channel, IntBuffer dx, IntBuffer dy, IntBuffer dw, IntBuffer dh);

  /** Entry point to C language function: <code> int glXQueryChannelDeltasSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXQueryChannelDeltasSGIX(long display, int screen, int channel, int[] dx, int dx_offset, int[] dy, int dy_offset, int[] dw, int dw_offset, int[] dh, int dh_offset);

  /** Entry point to C language function: <code> int glXQueryChannelRectSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh); </code> <br>Part of <code>GLX_SGIX_video_resize</code>
      @param dx a direct or array-backed {@link java.nio.IntBuffer}
      @param dy a direct or array-backed {@link java.nio.IntBuffer}
      @param dw a direct or array-backed {@link java.nio.IntBuffer}
      @param dh a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXQueryChannelRectSGIX(long display, int screen, int channel, IntBuffer dx, IntBuffer dy, IntBuffer dw, IntBuffer dh);

  /** Entry point to C language function: <code> int glXQueryChannelRectSGIX(Display *  display, int screen, int channel, int *  dx, int *  dy, int *  dw, int *  dh); </code> <br>Part of <code>GLX_SGIX_video_resize</code>   */
  public int glXQueryChannelRectSGIX(long display, int screen, int channel, int[] dx, int dx_offset, int[] dy, int dy_offset, int[] dw, int dw_offset, int[] dh, int dh_offset);

  /** Entry point to C language function: <code> int glXQueryContextInfoEXT(Display *  dpy, GLXContext context, int attribute, int *  value); </code> <br>Part of <code>GLX_EXT_import_context</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXQueryContextInfoEXT(long dpy, long context, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> int glXQueryContextInfoEXT(Display *  dpy, GLXContext context, int attribute, int *  value); </code> <br>Part of <code>GLX_EXT_import_context</code>   */
  public int glXQueryContextInfoEXT(long dpy, long context, int attribute, int[] value, int value_offset);

  /** Entry point to C language function: <code> Bool glXQueryFrameCountNV(Display *  dpy, int screen, GLuint *  count); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param count a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean glXQueryFrameCountNV(long dpy, int screen, IntBuffer count);

  /** Entry point to C language function: <code> Bool glXQueryFrameCountNV(Display *  dpy, int screen, GLuint *  count); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXQueryFrameCountNV(long dpy, int screen, int[] count, int count_offset);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapBarriersSGIX(Display *  dpy, int screen, int *  max); </code> <br>Part of <code>GLX_SGIX_swap_barrier</code>
      @param max a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapBarriersSGIX(long dpy, int screen, IntBuffer max);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapBarriersSGIX(Display *  dpy, int screen, int *  max); </code> <br>Part of <code>GLX_SGIX_swap_barrier</code>   */
  public boolean glXQueryMaxSwapBarriersSGIX(long dpy, int screen, int[] max, int max_offset);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapGroupsNV(Display *  dpy, int screen, GLuint *  maxGroups, GLuint *  maxBarriers); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param maxGroups a direct or array-backed {@link java.nio.IntBuffer}
      @param maxBarriers a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean glXQueryMaxSwapGroupsNV(long dpy, int screen, IntBuffer maxGroups, IntBuffer maxBarriers);

  /** Entry point to C language function: <code> Bool glXQueryMaxSwapGroupsNV(Display *  dpy, int screen, GLuint *  maxGroups, GLuint *  maxBarriers); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXQueryMaxSwapGroupsNV(long dpy, int screen, int[] maxGroups, int maxGroups_offset, int[] maxBarriers, int maxBarriers_offset);

  /** Entry point to C language function: <code> Bool glXQuerySwapGroupNV(Display *  dpy, XID drawable, GLuint *  group, GLuint *  barrier); </code> <br>Part of <code>GLX_NV_swap_group</code>
      @param group a direct or array-backed {@link java.nio.IntBuffer}
      @param barrier a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean glXQuerySwapGroupNV(long dpy, long drawable, IntBuffer group, IntBuffer barrier);

  /** Entry point to C language function: <code> Bool glXQuerySwapGroupNV(Display *  dpy, XID drawable, GLuint *  group, GLuint *  barrier); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXQuerySwapGroupNV(long dpy, long drawable, int[] group, int group_offset, int[] barrier, int barrier_offset);

  /** Entry point to C language function: <code> Bool glXReleaseBuffersMESA(Display *  dpy, XID drawable); </code> <br>Part of <code>GLX_MESA_release_buffers</code>   */
  public boolean glXReleaseBuffersMESA(long dpy, long drawable);

  /** Entry point to C language function: <code> int glXReleaseVideoDeviceNV(Display *  dpy, int screen, GLXVideoDeviceNV VideoDevice); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXReleaseVideoDeviceNV(long dpy, int screen, int VideoDevice);

  /** Entry point to C language function: <code> int glXReleaseVideoImageNV(Display *  dpy, XID pbuf); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXReleaseVideoImageNV(long dpy, long pbuf);

  /** Entry point to C language function: <code> Bool glXResetFrameCountNV(Display *  dpy, int screen); </code> <br>Part of <code>GLX_NV_swap_group</code>   */
  public boolean glXResetFrameCountNV(long dpy, int screen);

  /** Entry point to C language function: <code> int glXSendPbufferToVideoNV(Display *  dpy, XID pbuf, int iBufferType, unsigned long *  pulCounterPbuffer, GLboolean bBlock); </code> <br>Part of <code>GLX_NV_video_out</code>
      @param pulCounterPbuffer a direct or array-backed {@link java.nio.LongBuffer}   */
  public int glXSendPbufferToVideoNV(long dpy, long pbuf, int iBufferType, LongBuffer pulCounterPbuffer, boolean bBlock);

  /** Entry point to C language function: <code> int glXSendPbufferToVideoNV(Display *  dpy, XID pbuf, int iBufferType, unsigned long *  pulCounterPbuffer, GLboolean bBlock); </code> <br>Part of <code>GLX_NV_video_out</code>   */
  public int glXSendPbufferToVideoNV(long dpy, long pbuf, int iBufferType, long[] pulCounterPbuffer, int pulCounterPbuffer_offset, boolean bBlock);

  /** Entry point to C language function: <code> Bool glXSet3DfxModeMESA(int interval); </code> <br>Part of <code>GLX_MESA_set_3dfx_mode</code>   */
  public boolean glXSet3DfxModeMESA(int interval);

  /** Entry point to C language function: <code> int glXSwapIntervalSGI(int interval); </code> <br>Part of <code>GLX_SGI_swap_control</code>   */
  public int glXSwapIntervalSGI(int interval);

  /** Entry point to C language function: <code> int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *  count); </code> <br>Part of <code>GLX_SGI_video_sync</code>
      @param count a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glXWaitVideoSyncSGI(int divisor, int remainder, IntBuffer count);

  /** Entry point to C language function: <code> int glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int *  count); </code> <br>Part of <code>GLX_SGI_video_sync</code>   */
  public int glXWaitVideoSyncSGI(int divisor, int remainder, int[] count, int count_offset);


  // --- Begin CustomJavaCode .cfg declarations
      public boolean isFunctionAvailable(String glFunctionName);
      public boolean isExtensionAvailable(String glExtensionName);
  // ---- End CustomJavaCode .cfg declarations

} // end of class GLXExt
