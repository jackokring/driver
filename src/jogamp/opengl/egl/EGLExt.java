/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:28:32 CEST 2012 ----! */

package jogamp.opengl.egl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public interface EGLExt {

  /** Part of <code>EGL_KHR_config_attribs</code> */
  public static final int EGL_CONFORMANT_KHR = 0x3042;
  /** Part of <code>EGL_KHR_config_attribs</code> */
  public static final int EGL_VG_COLORSPACE_LINEAR_BIT_KHR = 0x0020;
  /** Part of <code>EGL_KHR_config_attribs</code> */
  public static final int EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR = 0x0040;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_READ_SURFACE_BIT_KHR = 0x0001;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_WRITE_SURFACE_BIT_KHR = 0x0002;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_LOCK_SURFACE_BIT_KHR = 0x0080;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_OPTIMAL_FORMAT_BIT_KHR = 0x0100;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_MATCH_FORMAT_KHR = 0x3043;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_FORMAT_RGB_565_EXACT_KHR = 0x30C0;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_FORMAT_RGB_565_KHR = 0x30C1;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_FORMAT_RGBA_8888_EXACT_KHR = 0x30C2;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_FORMAT_RGBA_8888_KHR = 0x30C3;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_MAP_PRESERVE_PIXELS_KHR = 0x30C4;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_LOCK_USAGE_HINT_KHR = 0x30C5;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_POINTER_KHR = 0x30C6;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PITCH_KHR = 0x30C7;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_ORIGIN_KHR = 0x30C8;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PIXEL_RED_OFFSET_KHR = 0x30C9;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR = 0x30CA;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR = 0x30CB;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR = 0x30CC;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR = 0x30CD;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_LOWER_LEFT_KHR = 0x30CE;
  /** Part of <code>EGL_KHR_lock_surface</code> */
  public static final int EGL_UPPER_LEFT_KHR = 0x30CF;
  /** Part of <code>EGL_KHR_image</code> */
  public static final int EGL_NATIVE_PIXMAP_KHR = 0x30B0;
  /** Part of <code>EGL_KHR_vg_parent_image</code> */
  public static final int EGL_VG_PARENT_IMAGE_KHR = 0x30BA;
  /** Part of <code>EGL_KHR_gl_texture_2D_image</code> */
  public static final int EGL_GL_TEXTURE_2D_KHR = 0x30B1;
  /** Part of <code>EGL_KHR_gl_texture_2D_image</code> */
  public static final int EGL_GL_TEXTURE_LEVEL_KHR = 0x30BC;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR = 0x30B3;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR = 0x30B4;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR = 0x30B5;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR = 0x30B6;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR = 0x30B7;
  /** Part of <code>EGL_KHR_gl_texture_cubemap_image</code> */
  public static final int EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR = 0x30B8;
  /** Part of <code>EGL_KHR_gl_texture_3D_image</code> */
  public static final int EGL_GL_TEXTURE_3D_KHR = 0x30B2;
  /** Part of <code>EGL_KHR_gl_texture_3D_image</code> */
  public static final int EGL_GL_TEXTURE_ZOFFSET_KHR = 0x30BD;
  /** Part of <code>EGL_KHR_gl_renderbuffer_image</code> */
  public static final int EGL_GL_RENDERBUFFER_KHR = 0x30B9;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_SYNC_STATUS_KHR = 0x30F1;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_SIGNALED_KHR = 0x30F2;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_UNSIGNALED_KHR = 0x30F3;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_TIMEOUT_EXPIRED_KHR = 0x30F5;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_CONDITION_SATISFIED_KHR = 0x30F6;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_SYNC_TYPE_KHR = 0x30F7;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_SYNC_REUSABLE_KHR = 0x30FA;
  /** Part of <code>EGL_KHR_reusable_sync</code> */
  public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 0x0001;
  /** Part of <code>EGL_KHR_image_base</code> */
  public static final int EGL_IMAGE_PRESERVED_KHR = 0x30D2;
  /** Part of <code>EGL_IMG_context_priority</code> */
  public static final int EGL_CONTEXT_PRIORITY_LEVEL_IMG = 0x3100;
  /** Part of <code>EGL_IMG_context_priority</code> */
  public static final int EGL_CONTEXT_PRIORITY_HIGH_IMG = 0x3101;
  /** Part of <code>EGL_IMG_context_priority</code> */
  public static final int EGL_CONTEXT_PRIORITY_MEDIUM_IMG = 0x3102;
  /** Part of <code>EGL_IMG_context_priority</code> */
  public static final int EGL_CONTEXT_PRIORITY_LOW_IMG = 0x3103;
  /** Part of <code>EGL_KHR_lock_surface2</code> */
  public static final int EGL_BITMAP_PIXEL_SIZE_KHR = 0x3110;
  /** Part of <code>EGL_NV_coverage_sample</code> */
  public static final int EGL_COVERAGE_BUFFERS_NV = 0x30E0;
  /** Part of <code>EGL_NV_coverage_sample</code> */
  public static final int EGL_COVERAGE_SAMPLES_NV = 0x30E1;
  /** Part of <code>EGL_NV_depth_nonlinear</code> */
  public static final int EGL_DEPTH_ENCODING_NV = 0x30E2;
  /** Part of <code>EGL_NV_depth_nonlinear</code> */
  public static final int EGL_DEPTH_ENCODING_NONE_NV = 0;
  /** Part of <code>EGL_NV_depth_nonlinear</code> */
  public static final int EGL_DEPTH_ENCODING_NONLINEAR_NV = 0x30E3;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV = 0x30E6;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_STATUS_NV = 0x30E7;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SIGNALED_NV = 0x30E8;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_UNSIGNALED_NV = 0x30E9;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_NV = 0x0001;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_ALREADY_SIGNALED_NV = 0x30EA;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_TIMEOUT_EXPIRED_NV = 0x30EB;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_CONDITION_SATISFIED_NV = 0x30EC;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_TYPE_NV = 0x30ED;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_CONDITION_NV = 0x30EE;
  /** Part of <code>EGL_NV_sync</code> */
  public static final int EGL_SYNC_FENCE_NV = 0x30EF;
  /** Part of <code>EGL_KHR_fence_sync</code> */
  public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 0x30F0;
  /** Part of <code>EGL_KHR_fence_sync</code> */
  public static final int EGL_SYNC_CONDITION_KHR = 0x30F8;
  /** Part of <code>EGL_KHR_fence_sync</code> */
  public static final int EGL_SYNC_FENCE_KHR = 0x30F9;
  /** Part of <code>EGL_HI_clientpixmap</code> */
  public static final int EGL_CLIENT_PIXMAP_POINTER_HI = 0x8F74;
  /** Part of <code>EGL_HI_colorformats</code> */
  public static final int EGL_COLOR_FORMAT_HI = 0x8F70;
  /** Part of <code>EGL_HI_colorformats</code> */
  public static final int EGL_COLOR_RGB_HI = 0x8F71;
  /** Part of <code>EGL_HI_colorformats</code> */
  public static final int EGL_COLOR_RGBA_HI = 0x8F72;
  /** Part of <code>EGL_HI_colorformats</code> */
  public static final int EGL_COLOR_ARGB_HI = 0x8F73;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_FORMAT_MESA = 0x31D0;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_USE_MESA = 0x31D1;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_FORMAT_ARGB32_MESA = 0x31D2;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_MESA = 0x31D3;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_STRIDE_MESA = 0x31D4;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_USE_SCANOUT_MESA = 0x00000001;
  /** Part of <code>EGL_MESA_drm_image</code> */
  public static final int EGL_DRM_BUFFER_USE_SHARE_MESA = 0x00000002;
  /** Part of <code>EGL_NV_post_sub_buffer</code> */
  public static final int EGL_POST_SUB_BUFFER_SUPPORTED_NV = 0x30BE;
  /** Part of <code>EGL_ANGLE_surface_d3d_texture_2d_share_handle</code> */
  public static final int EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE = 0x3200;
  /** Part of <code>EGL_NV_coverage_sample_resolve</code> */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_NV = 0x3131;
  /** Part of <code>EGL_NV_coverage_sample_resolve</code> */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV = 0x3132;
  /** Part of <code>EGL_NV_coverage_sample_resolve</code> */
  public static final int EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV = 0x3133;
  /** Part of <code>EGL_EXT_create_context_robustness</code> */
  public static final int EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT = 0x30BF;
  /** Part of <code>EGL_EXT_create_context_robustness</code> */
  public static final int EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT = 0x3138;
  /** Part of <code>EGL_EXT_create_context_robustness</code> */
  public static final int EGL_NO_RESET_NOTIFICATION_EXT = 0x31BE;
  /** Part of <code>EGL_EXT_create_context_robustness</code> */
  public static final int EGL_LOSE_CONTEXT_ON_RESET_EXT = 0x31BF;
  /** Part of <code>EGL_NV_omx_il_sink</code> */
  public static final int EGL_OPENMAX_IL_BIT_NV = 0x0010;
  /** Part of <code>EGL_NV_omx_il_sink</code> */
  public static final int EGL_SURFACE_OMX_IL_EVENT_CALLBACK_NV = 0x309A;
  /** Part of <code>EGL_NV_omx_il_sink</code> */
  public static final int EGL_SURFACE_OMX_IL_EMPTY_BUFFER_DONE_CALLBACK_NV = 0x309B;
  /** Part of <code>EGL_NV_omx_il_sink</code> */
  public static final int EGL_SURFACE_OMX_IL_CALLBACK_DATA_NV = 0x309C;
  /** Part of <code>EGL_NV_omx_il_sink</code> */
  public static final int EGL_SURFACE_COMPONENT_HANDLE_NV = 0x309D;
  /** Part of <code>EGL_NV_texture_rectangle</code> */
  public static final int EGL_GL_TEXTURE_RECTANGLE_NV_KHR = 0x30BB;
  /** Part of <code>EGL_NV_texture_rectangle</code> */
  public static final int EGL_TEXTURE_RECTANGLE_NV = 0x20A2;

  /** Entry point to C language function: <code> EGLint eglClientWaitSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>   */
  public int eglClientWaitSyncKHR(long dpy, long sync, int flags, long timeout);

  /** Entry point to C language function: <code> EGLint eglClientWaitSyncNV(EGLClientBuffer sync, EGLint flags, EGLTimeNV timeout); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}   */
  public int eglClientWaitSyncNV(Buffer sync, int flags, long timeout);

  /** Entry point to C language function: <code> EGLImageKHR eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_MESA_drm_image</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public long eglCreateDRMImageMESA(long dpy, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLImageKHR eglCreateDRMImageMESA(EGLDisplay dpy, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_MESA_drm_image</code>   */
  public long eglCreateDRMImageMESA(long dpy, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> EGLClientBuffer eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_NV_sync</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public ByteBuffer eglCreateFenceSyncNV(long dpy, int condition, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLClientBuffer eglCreateFenceSyncNV(EGLDisplay dpy, EGLenum condition, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_NV_sync</code>   */
  public ByteBuffer eglCreateFenceSyncNV(long dpy, int condition, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> EGLImageKHR eglCreateImageKHR(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_KHR_image</code>
      @param buffer a direct only {@link java.nio.Buffer}
      @param attrib_list a direct only {@link java.nio.IntBuffer}   */
  public long eglCreateImageKHR(long dpy, long ctx, int target, Buffer buffer, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLSurface eglCreatePixmapSurfaceHI(EGLDisplay dpy, EGLConfig config, EGLClientPixmapHI *  pixmap); </code> <br>Part of <code>EGL_HI_clientpixmap</code>   */
  public long eglCreatePixmapSurfaceHI(long dpy, long config, EGLClientPixmapHI pixmap);

  /** Entry point to C language function: <code> EGLSyncKHR eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public long eglCreateSyncKHR(long dpy, int type, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLSyncKHR eglCreateSyncKHR(EGLDisplay dpy, EGLenum type, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>   */
  public long eglCreateSyncKHR(long dpy, int type, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> EGLBoolean eglDestroyImageKHR(EGLDisplay dpy, EGLImageKHR image); </code> <br>Part of <code>EGL_KHR_image</code>   */
  public boolean eglDestroyImageKHR(long dpy, long image);

  /** Entry point to C language function: <code> EGLBoolean eglDestroySyncKHR(EGLDisplay dpy, EGLSyncKHR sync); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>   */
  public boolean eglDestroySyncKHR(long dpy, long sync);

  /** Entry point to C language function: <code> EGLBoolean eglDestroySyncNV(EGLClientBuffer sync); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}   */
  public boolean eglDestroySyncNV(Buffer sync);

  /** Entry point to C language function: <code> EGLBoolean eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *  name, EGLint *  handle, EGLint *  stride); </code> <br>Part of <code>EGL_MESA_drm_image</code>
      @param name a direct or array-backed {@link java.nio.IntBuffer}
      @param handle a direct or array-backed {@link java.nio.IntBuffer}
      @param stride a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean eglExportDRMImageMESA(long dpy, long image, IntBuffer name, IntBuffer handle, IntBuffer stride);

  /** Entry point to C language function: <code> EGLBoolean eglExportDRMImageMESA(EGLDisplay dpy, EGLImageKHR image, EGLint *  name, EGLint *  handle, EGLint *  stride); </code> <br>Part of <code>EGL_MESA_drm_image</code>   */
  public boolean eglExportDRMImageMESA(long dpy, long image, int[] name, int name_offset, int[] handle, int handle_offset, int[] stride, int stride_offset);

  /** Entry point to C language function: <code> EGLBoolean eglFenceNV(EGLClientBuffer sync); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}   */
  public boolean eglFenceNV(Buffer sync);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *  value); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean eglGetSyncAttribKHR(long dpy, long sync, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint *  value); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>   */
  public boolean eglGetSyncAttribKHR(long dpy, long sync, int attribute, int[] value, int value_offset);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribNV(EGLClientBuffer sync, EGLint attribute, EGLint *  value); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean eglGetSyncAttribNV(Buffer sync, int attribute, IntBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglGetSyncAttribNV(EGLClientBuffer sync, EGLint attribute, EGLint *  value); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}   */
  public boolean eglGetSyncAttribNV(Buffer sync, int attribute, int[] value, int value_offset);

  /** Entry point to C language function: <code> EGLuint64 eglGetSystemTimeFrequencyNV(void); </code> <br>Part of <code>EGL_NV_system_time</code>   */
  public long eglGetSystemTimeFrequencyNV();

  /** Entry point to C language function: <code> EGLuint64 eglGetSystemTimeNV(void); </code> <br>Part of <code>EGL_NV_system_time</code>   */
  public long eglGetSystemTimeNV();

  /** Entry point to C language function: <code> EGLBoolean eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_KHR_lock_surface</code>
      @param attrib_list a direct or array-backed {@link java.nio.IntBuffer}   */
  public boolean eglLockSurfaceKHR(long display, long surface, IntBuffer attrib_list);

  /** Entry point to C language function: <code> EGLBoolean eglLockSurfaceKHR(EGLDisplay display, EGLSurface surface, const EGLint *  attrib_list); </code> <br>Part of <code>EGL_KHR_lock_surface</code>   */
  public boolean eglLockSurfaceKHR(long display, long surface, int[] attrib_list, int attrib_list_offset);

  /** Entry point to C language function: <code> EGLBoolean eglPostSubBufferNV(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height); </code> <br>Part of <code>EGL_NV_post_sub_buffer</code>   */
  public boolean eglPostSubBufferNV(long dpy, long surface, int x, int y, int width, int height);

  /** Entry point to C language function: <code> EGLBoolean eglQuerySurfacePointerANGLE(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLClientBuffer *  value); </code> <br>Part of <code>EGL_ANGLE_query_surface_pointer</code>
      @param value a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public boolean eglQuerySurfacePointerANGLE(long dpy, long surface, int attribute, PointerBuffer value);

  /** Entry point to C language function: <code> EGLBoolean eglSignalSyncKHR(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode); </code> <br>Part of <code>EGL_KHR_reusable_sync</code>   */
  public boolean eglSignalSyncKHR(long dpy, long sync, int mode);

  /** Entry point to C language function: <code> EGLBoolean eglSignalSyncNV(EGLClientBuffer sync, EGLenum mode); </code> <br>Part of <code>EGL_NV_sync</code>
      @param sync a direct or array-backed {@link java.nio.Buffer}   */
  public boolean eglSignalSyncNV(Buffer sync, int mode);

  /** Entry point to C language function: <code> EGLBoolean eglUnlockSurfaceKHR(EGLDisplay display, EGLSurface surface); </code> <br>Part of <code>EGL_KHR_lock_surface</code>   */
  public boolean eglUnlockSurfaceKHR(long display, long surface);


  // --- Begin CustomJavaCode .cfg declarations
      /** Part of <code>EGL_KHR_image</code> */
      public static final long EGL_NO_IMAGE = 0;
      /** Part of <code>EGL_KHR_reusable_sync</code> */
      public static final long EGL_NO_SYNC_KHR = 0;
      public boolean isFunctionAvailable(String glFunctionName);
      public boolean isExtensionAvailable(String glExtensionName);
  // ---- End CustomJavaCode .cfg declarations

} // end of class EGLExt
