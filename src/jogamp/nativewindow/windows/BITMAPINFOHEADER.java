/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 03 06:26:16 CEST 2012 ----! */


package jogamp.nativewindow.windows;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDescriptionRuntime;

import javax.media.nativewindow.util.Point;
import javax.media.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;

public class BITMAPINFOHEADER {

  StructAccessor accessor;

  private static final int mdIdx = MachineDescriptionRuntime.getStatic().ordinal();

  private static final int[] BITMAPINFOHEADER_size = new int[] { 40 /* ARMle_EABI */, 40 /* X86_32_UNIX */, 40 /* X86_64_UNIX */, 40 /* X86_32_MACOS */, 40 /* X86_32_WINDOWS */, 40 /* X86_64_WINDOWS */  };
  private static final int[] biSize_offset = new int[] { 0 /* ARMle_EABI */, 0 /* X86_32_UNIX */, 0 /* X86_64_UNIX */, 0 /* X86_32_MACOS */, 0 /* X86_32_WINDOWS */, 0 /* X86_64_WINDOWS */ };
  private static final int[] biWidth_offset = new int[] { 4 /* ARMle_EABI */, 4 /* X86_32_UNIX */, 4 /* X86_64_UNIX */, 4 /* X86_32_MACOS */, 4 /* X86_32_WINDOWS */, 4 /* X86_64_WINDOWS */ };
  private static final int[] biHeight_offset = new int[] { 8 /* ARMle_EABI */, 8 /* X86_32_UNIX */, 8 /* X86_64_UNIX */, 8 /* X86_32_MACOS */, 8 /* X86_32_WINDOWS */, 8 /* X86_64_WINDOWS */ };
  private static final int[] biPlanes_offset = new int[] { 12 /* ARMle_EABI */, 12 /* X86_32_UNIX */, 12 /* X86_64_UNIX */, 12 /* X86_32_MACOS */, 12 /* X86_32_WINDOWS */, 12 /* X86_64_WINDOWS */ };
  private static final int[] biBitCount_offset = new int[] { 14 /* ARMle_EABI */, 14 /* X86_32_UNIX */, 14 /* X86_64_UNIX */, 14 /* X86_32_MACOS */, 14 /* X86_32_WINDOWS */, 14 /* X86_64_WINDOWS */ };
  private static final int[] biCompression_offset = new int[] { 16 /* ARMle_EABI */, 16 /* X86_32_UNIX */, 16 /* X86_64_UNIX */, 16 /* X86_32_MACOS */, 16 /* X86_32_WINDOWS */, 16 /* X86_64_WINDOWS */ };
  private static final int[] biSizeImage_offset = new int[] { 20 /* ARMle_EABI */, 20 /* X86_32_UNIX */, 20 /* X86_64_UNIX */, 20 /* X86_32_MACOS */, 20 /* X86_32_WINDOWS */, 20 /* X86_64_WINDOWS */ };
  private static final int[] biXPelsPerMeter_offset = new int[] { 24 /* ARMle_EABI */, 24 /* X86_32_UNIX */, 24 /* X86_64_UNIX */, 24 /* X86_32_MACOS */, 24 /* X86_32_WINDOWS */, 24 /* X86_64_WINDOWS */ };
  private static final int[] biYPelsPerMeter_offset = new int[] { 28 /* ARMle_EABI */, 28 /* X86_32_UNIX */, 28 /* X86_64_UNIX */, 28 /* X86_32_MACOS */, 28 /* X86_32_WINDOWS */, 28 /* X86_64_WINDOWS */ };
  private static final int[] biClrUsed_offset = new int[] { 32 /* ARMle_EABI */, 32 /* X86_32_UNIX */, 32 /* X86_64_UNIX */, 32 /* X86_32_MACOS */, 32 /* X86_32_WINDOWS */, 32 /* X86_64_WINDOWS */ };
  private static final int[] biClrImportant_offset = new int[] { 36 /* ARMle_EABI */, 36 /* X86_32_UNIX */, 36 /* X86_64_UNIX */, 36 /* X86_32_MACOS */, 36 /* X86_32_WINDOWS */, 36 /* X86_64_WINDOWS */ };

  public static int size() {
    return BITMAPINFOHEADER_size[mdIdx];
  }

  public static BITMAPINFOHEADER create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static BITMAPINFOHEADER create(java.nio.ByteBuffer buf) {
      return new BITMAPINFOHEADER(buf);
  }

  BITMAPINFOHEADER(java.nio.ByteBuffer buf) {
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  public BITMAPINFOHEADER setBiSize(int val) {
    accessor.setIntAt(biSize_offset[mdIdx], val);
    return this;
  }

  public int getBiSize() {
    return accessor.getIntAt(biSize_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiWidth(int val) {
    accessor.setIntAt(biWidth_offset[mdIdx], val);
    return this;
  }

  public int getBiWidth() {
    return accessor.getIntAt(biWidth_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiHeight(int val) {
    accessor.setIntAt(biHeight_offset[mdIdx], val);
    return this;
  }

  public int getBiHeight() {
    return accessor.getIntAt(biHeight_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiPlanes(short val) {
    accessor.setShortAt(biPlanes_offset[mdIdx], val);
    return this;
  }

  public short getBiPlanes() {
    return accessor.getShortAt(biPlanes_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiBitCount(short val) {
    accessor.setShortAt(biBitCount_offset[mdIdx], val);
    return this;
  }

  public short getBiBitCount() {
    return accessor.getShortAt(biBitCount_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiCompression(int val) {
    accessor.setIntAt(biCompression_offset[mdIdx], val);
    return this;
  }

  public int getBiCompression() {
    return accessor.getIntAt(biCompression_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiSizeImage(int val) {
    accessor.setIntAt(biSizeImage_offset[mdIdx], val);
    return this;
  }

  public int getBiSizeImage() {
    return accessor.getIntAt(biSizeImage_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiXPelsPerMeter(int val) {
    accessor.setIntAt(biXPelsPerMeter_offset[mdIdx], val);
    return this;
  }

  public int getBiXPelsPerMeter() {
    return accessor.getIntAt(biXPelsPerMeter_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiYPelsPerMeter(int val) {
    accessor.setIntAt(biYPelsPerMeter_offset[mdIdx], val);
    return this;
  }

  public int getBiYPelsPerMeter() {
    return accessor.getIntAt(biYPelsPerMeter_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiClrUsed(int val) {
    accessor.setIntAt(biClrUsed_offset[mdIdx], val);
    return this;
  }

  public int getBiClrUsed() {
    return accessor.getIntAt(biClrUsed_offset[mdIdx]);
  }

  public BITMAPINFOHEADER setBiClrImportant(int val) {
    accessor.setIntAt(biClrImportant_offset[mdIdx], val);
    return this;
  }

  public int getBiClrImportant() {
    return accessor.getIntAt(biClrImportant_offset[mdIdx]);
  }
}
