/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 03 06:26:16 CEST 2012 ----! */

package jogamp.nativewindow.windows;

import javax.media.nativewindow.util.Point;
import javax.media.nativewindow.NativeWindowException;
import jogamp.nativewindow.NWJNILibLoader;
import jogamp.nativewindow.Debug;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

public class GDI {

  public static final int BI_RGB = 0;
  public static final int BI_RLE8 = 1;
  public static final int BI_RLE4 = 2;
  public static final int BI_BITFIELDS = 3;
  public static final int DIB_RGB_COLORS = 0;
  public static final int DIB_PAL_COLORS = 1;
  public static final int PFD_TYPE_RGBA = 0;
  public static final int PFD_TYPE_COLORINDEX = 1;
  public static final int PFD_MAIN_PLANE = 0;
  public static final int PFD_OVERLAY_PLANE = 1;
  public static final int PFD_UNDERLAY_PLANE = (-1);
  public static final int PFD_DOUBLEBUFFER = 0x00000001;
  public static final int PFD_STEREO = 0x00000002;
  public static final int PFD_DRAW_TO_WINDOW = 0x00000004;
  public static final int PFD_DRAW_TO_BITMAP = 0x00000008;
  public static final int PFD_SUPPORT_GDI = 0x00000010;
  public static final int PFD_SUPPORT_OPENGL = 0x00000020;
  public static final int PFD_GENERIC_FORMAT = 0x00000040;
  public static final int PFD_NEED_PALETTE = 0x00000080;
  public static final int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
  public static final int PFD_SWAP_EXCHANGE = 0x00000200;
  public static final int PFD_SWAP_COPY = 0x00000400;
  public static final int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
  public static final int PFD_GENERIC_ACCELERATED = 0x00001000;
  public static final int PFD_SUPPORT_DIRECTDRAW = 0x00002000;
  public static final int PFD_DEPTH_DONTCARE = 0x20000000;
  public static final int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
  public static final long PFD_STEREO_DONTCARE = 0x80000000;
  public static final int ERROR_SUCCESS = 0;
  public static final int ERROR_INVALID_PIXEL_FORMAT = 2000;
  public static final int ERROR_NO_SYSTEM_RESOURCES = 1450;
  public static final int ERROR_INVALID_DATA = 13;
  public static final int ERROR_PROC_NOT_FOUND = 127;
  public static final int ERROR_INVALID_WINDOW_HANDLE = 1400;
  public static final int SW_HIDE = 0;
  public static final int SW_SHOWNORMAL = 1;
  public static final int SW_NORMAL = 1;
  public static final int SW_SHOWMINIMIZED = 2;
  public static final int SW_SHOWMAXIMIZED = 3;
  public static final int SW_MAXIMIZE = 3;
  public static final int SW_SHOWNOACTIVATE = 4;
  public static final int SW_SHOW = 5;
  public static final int SW_MINIMIZE = 6;
  public static final int SW_SHOWMINNOACTIVE = 7;
  public static final int SW_SHOWNA = 8;
  public static final int SW_RESTORE = 9;
  public static final int SW_SHOWDEFAULT = 10;
  public static final int SW_FORCEMINIMIZE = 11;
  public static final int SW_MAX = 11;
  public static final int OBJ_PEN = 1;
  public static final int OBJ_BRUSH = 2;
  public static final int OBJ_DC = 3;
  public static final int OBJ_METADC = 4;
  public static final int OBJ_PAL = 5;
  public static final int OBJ_FONT = 6;
  public static final int OBJ_BITMAP = 7;
  public static final int OBJ_REGION = 8;
  public static final int OBJ_METAFILE = 9;
  public static final int OBJ_MEMDC = 10;
  public static final int OBJ_EXTPEN = 11;
  public static final int OBJ_ENHMETADC = 12;
  public static final int OBJ_ENHMETAFILE = 13;
  public static final int OBJ_COLORSPACE = 14;
  public static final int DWM_BB_ENABLE = 1;
  public static final int DWM_EC_DISABLECOMPOSITION = 0;
  public static final int DWM_EC_ENABLECOMPOSITION = 1;

  /** Interface to C language function: <br> <code> int ChoosePixelFormat(HANDLE, const PIXELFORMATDESCRIPTOR * ); </code>    */
  public static int ChoosePixelFormat(long arg0, PIXELFORMATDESCRIPTOR arg1)  {

        return ChoosePixelFormat1(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code> int ChoosePixelFormat(HANDLE, const PIXELFORMATDESCRIPTOR * ); </code>    */
  private static native int ChoosePixelFormat1(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code> HANDLE CreateCompatibleDC(HANDLE); </code>    */
  public static native long CreateCompatibleDC(long arg0);

  /** Interface to C language function: <br> <code> HANDLE CreateDIBSection(HANDLE, const BITMAPINFO * , UINT, LPVOID * , HANDLE, DWORD); </code> 
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public static long CreateDIBSection(long arg0, BITMAPINFO arg1, int arg2, PointerBuffer arg3, long arg4, int arg5)  {

    final boolean arg3_is_direct = Buffers.isDirect(arg3);
        return CreateDIBSection1(arg0, ((arg1 == null) ? null : arg1.getBuffer()), arg2, arg3_is_direct ? ( arg3 != null ? arg3.getBuffer() : null ) : Buffers.getArray(arg3), arg3_is_direct ? Buffers.getDirectBufferByteOffset(arg3) : Buffers.getIndirectBufferByteOffset(arg3), arg3_is_direct, arg4, arg5);
  }

  /** Entry point to C language function: <code> HANDLE CreateDIBSection(HANDLE, const BITMAPINFO * , UINT, LPVOID * , HANDLE, DWORD); </code> 
      @param arg3 a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  private static native long CreateDIBSection1(long arg0, ByteBuffer arg1, int arg2, Object arg3, int arg3_byte_offset, boolean arg3_is_direct, long arg4, int arg5);

  /** Interface to C language function: <br> <code> BOOL DeleteDC(HANDLE); </code>    */
  public static native boolean DeleteDC(long arg0);

  /** Interface to C language function: <br> <code> BOOL DeleteObject(HANDLE); </code>    */
  public static native boolean DeleteObject(long arg0);

  /** Interface to C language function: <br> <code> int DescribePixelFormat(HANDLE, int, UINT, PPIXELFORMATDESCRIPTOR); </code>    */
  public static int DescribePixelFormat(long arg0, int arg1, int arg2, PIXELFORMATDESCRIPTOR arg3)  {

        return DescribePixelFormat1(arg0, arg1, arg2, ((arg3 == null) ? null : arg3.getBuffer()));
  }

  /** Entry point to C language function: <code> int DescribePixelFormat(HANDLE, int, UINT, PPIXELFORMATDESCRIPTOR); </code>    */
  private static native int DescribePixelFormat1(long arg0, int arg1, int arg2, ByteBuffer arg3);

  /** Interface to C language function: <br> <code> BOOL DestroyWindow(HANDLE hWnd); </code>    */
  public static native boolean DestroyWindow(long hWnd);

  /** Interface to C language function: <br> <code> BOOL DwmEnableBlurBehindWindow(HANDLE, const DWM_BLURBEHIND * ); </code>    */
  public static boolean DwmEnableBlurBehindWindow(long arg0, DWM_BLURBEHIND arg1)  {

        return DwmEnableBlurBehindWindow1(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code> BOOL DwmEnableBlurBehindWindow(HANDLE, const DWM_BLURBEHIND * ); </code>    */
  private static native boolean DwmEnableBlurBehindWindow1(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code> BOOL DwmEnableComposition(UINT uCompositionAction); </code>    */
  public static native boolean DwmEnableComposition(int uCompositionAction);

  /** Interface to C language function: <br> <code> BOOL DwmExtendFrameIntoClientArea(HANDLE, const MARGINS * ); </code>    */
  public static boolean DwmExtendFrameIntoClientArea(long arg0, MARGINS arg1)  {

        return DwmExtendFrameIntoClientArea1(arg0, ((arg1 == null) ? null : arg1.getBuffer()));
  }

  /** Entry point to C language function: <code> BOOL DwmExtendFrameIntoClientArea(HANDLE, const MARGINS * ); </code>    */
  private static native boolean DwmExtendFrameIntoClientArea1(long arg0, ByteBuffer arg1);

  /** Interface to C language function: <br> <code> BOOL DwmIsCompositionEnabled(); </code>    */
  public static native boolean DwmIsCompositionEnabled();

  /** Interface to C language function: <br> <code> BOOL DwmIsExtensionAvailable(); </code>    */
  public static native boolean DwmIsExtensionAvailable();

  /** Interface to C language function: <br> <code> HANDLE GetApplicationHandle(); </code>    */
  public static native long GetApplicationHandle();

  /** Interface to C language function: <br> <code> BOOL GetClientRect(HANDLE hwnd, PRECT lpRect); </code>    */
  public static boolean GetClientRect(long hwnd, RECT lpRect)  {

        return GetClientRect1(hwnd, ((lpRect == null) ? null : lpRect.getBuffer()));
  }

  /** Entry point to C language function: <code> BOOL GetClientRect(HANDLE hwnd, PRECT lpRect); </code>    */
  private static native boolean GetClientRect1(long hwnd, ByteBuffer lpRect);

  /** Interface to C language function: <br> <code> HANDLE GetCurrentProcess(void); </code>    */
  public static native long GetCurrentProcess();

  /** Interface to C language function: <br> <code> HANDLE GetDC(HANDLE); </code>    */
  public static native long GetDC(long arg0);

  /** Interface to C language function: <br> <code> BOOL GetDeviceGammaRamp(HANDLE, LPVOID); </code> 
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  public static boolean GetDeviceGammaRamp(long arg0, Buffer arg1)  {

    final boolean arg1_is_direct = Buffers.isDirect(arg1);
        return GetDeviceGammaRamp1(arg0, arg1_is_direct ? arg1 : Buffers.getArray(arg1), arg1_is_direct ? Buffers.getDirectBufferByteOffset(arg1) : Buffers.getIndirectBufferByteOffset(arg1), arg1_is_direct);
  }

  /** Entry point to C language function: <code> BOOL GetDeviceGammaRamp(HANDLE, LPVOID); </code> 
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  private static native boolean GetDeviceGammaRamp1(long arg0, Object arg1, int arg1_byte_offset, boolean arg1_is_direct);

  /** Interface to C language function: <br> <code> DWORD GetLastError(void); </code>    */
  public static native int GetLastError();

  /** Interface to C language function: <br> <code> DWORD GetObjectType(HANDLE h); </code>    */
  public static native int GetObjectType(long h);

  /** Interface to C language function: <br> <code> HANDLE GetParent(HANDLE hWnd); </code>    */
  public static native long GetParent(long hWnd);

  /** Interface to C language function: <br> <code> int GetPixelFormat(HANDLE); </code>    */
  public static native int GetPixelFormat(long arg0);

  /** Interface to C language function: <br> <code> BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask); </code> 
      @param lpProcessAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param lpSystemAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public static boolean GetProcessAffinityMask(long hProcess, PointerBuffer lpProcessAffinityMask, PointerBuffer lpSystemAffinityMask)  {

    final boolean lpProcessAffinityMask_is_direct = Buffers.isDirect(lpProcessAffinityMask);
    final boolean lpSystemAffinityMask_is_direct = Buffers.isDirect(lpSystemAffinityMask);
        return GetProcessAffinityMask1(hProcess, lpProcessAffinityMask_is_direct ? ( lpProcessAffinityMask != null ? lpProcessAffinityMask.getBuffer() : null ) : Buffers.getArray(lpProcessAffinityMask), lpProcessAffinityMask_is_direct ? Buffers.getDirectBufferByteOffset(lpProcessAffinityMask) : Buffers.getIndirectBufferByteOffset(lpProcessAffinityMask), lpProcessAffinityMask_is_direct, lpSystemAffinityMask_is_direct ? ( lpSystemAffinityMask != null ? lpSystemAffinityMask.getBuffer() : null ) : Buffers.getArray(lpSystemAffinityMask), lpSystemAffinityMask_is_direct ? Buffers.getDirectBufferByteOffset(lpSystemAffinityMask) : Buffers.getIndirectBufferByteOffset(lpSystemAffinityMask), lpSystemAffinityMask_is_direct);
  }

  /** Entry point to C language function: <code> BOOL GetProcessAffinityMask(HANDLE hProcess, PDWORD_PTR lpProcessAffinityMask, PDWORD_PTR lpSystemAffinityMask); </code> 
      @param lpProcessAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}
      @param lpSystemAffinityMask a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  private static native boolean GetProcessAffinityMask1(long hProcess, Object lpProcessAffinityMask, int lpProcessAffinityMask_byte_offset, boolean lpProcessAffinityMask_is_direct, Object lpSystemAffinityMask, int lpSystemAffinityMask_byte_offset, boolean lpSystemAffinityMask_is_direct);

  /** Interface to C language function: <br> <code> BOOL IsWindow(HANDLE hWnd); </code>    */
  public static native boolean IsWindow(long hWnd);

  /** Interface to C language function: <br> <code> BOOL IsWindowVisible(HANDLE hWnd); </code>    */
  public static native boolean IsWindowVisible(long hWnd);

  /** Interface to C language function: <br> <code> int ReleaseDC(HANDLE hWnd, HANDLE hDC); </code>    */
  public static native int ReleaseDC(long hWnd, long hDC);

  /** Interface to C language function: <br> <code> HANDLE SelectObject(HANDLE, HANDLE); </code>    */
  public static native long SelectObject(long arg0, long arg1);

  /** Interface to C language function: <br> <code> BOOL SetDeviceGammaRamp(HANDLE, LPVOID); </code> 
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  public static boolean SetDeviceGammaRamp(long arg0, Buffer arg1)  {

    final boolean arg1_is_direct = Buffers.isDirect(arg1);
        return SetDeviceGammaRamp1(arg0, arg1_is_direct ? arg1 : Buffers.getArray(arg1), arg1_is_direct ? Buffers.getDirectBufferByteOffset(arg1) : Buffers.getIndirectBufferByteOffset(arg1), arg1_is_direct);
  }

  /** Entry point to C language function: <code> BOOL SetDeviceGammaRamp(HANDLE, LPVOID); </code> 
      @param arg1 a direct or array-backed {@link java.nio.Buffer}   */
  private static native boolean SetDeviceGammaRamp1(long arg0, Object arg1, int arg1_byte_offset, boolean arg1_is_direct);

  /** Interface to C language function: <br> <code> HANDLE SetParent(HANDLE hWndChild, HANDLE hWndNewParent); </code>    */
  public static native long SetParent(long hWndChild, long hWndNewParent);

  /** Interface to C language function: <br> <code> BOOL SetPixelFormat(HANDLE, int, const PIXELFORMATDESCRIPTOR * ); </code>    */
  public static boolean SetPixelFormat(long arg0, int arg1, PIXELFORMATDESCRIPTOR arg2)  {

        return SetPixelFormat1(arg0, arg1, ((arg2 == null) ? null : arg2.getBuffer()));
  }

  /** Entry point to C language function: <code> BOOL SetPixelFormat(HANDLE, int, const PIXELFORMATDESCRIPTOR * ); </code>    */
  private static native boolean SetPixelFormat1(long arg0, int arg1, ByteBuffer arg2);

  /** Interface to C language function: <br> <code> BOOL SetProcessAffinityMask(HANDLE hProcess, DWORD_PTR dwProcessAffinityMask); </code>    */
  public static native boolean SetProcessAffinityMask(long hProcess, long dwProcessAffinityMask);

  /** Interface to C language function: <br> <code> BOOL ShowWindow(HANDLE hWnd, int nCmdShow); </code>    */
  public static native boolean ShowWindow(long hWnd, int nCmdShow);

  /** Interface to C language function: <br> <code> BOOL SwapBuffers(HANDLE); </code>    */
  public static native boolean SwapBuffers(long arg0);

  /** Interface to C language function: <br> <code> HANDLE WindowFromDC(HANDLE hDC); </code>    */
  public static native long WindowFromDC(long hDC);


} // end of class GDI
