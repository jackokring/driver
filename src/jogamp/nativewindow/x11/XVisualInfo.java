/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/JavaEmitter.java on Fri Aug 03 06:26:12 CEST 2012 ----! */


package jogamp.nativewindow.x11;

import java.nio.*;

import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import jogamp.common.os.MachineDescriptionRuntime;

import java.nio.*;
import java.util.*;
import javax.media.nativewindow.util.Point;

public class XVisualInfo {

  StructAccessor accessor;

  private static final int mdIdx = MachineDescriptionRuntime.getStatic().ordinal();

  private static final int[] XVisualInfo_size = new int[] { 40 /* ARMle_EABI */, 40 /* X86_32_UNIX */, 64 /* X86_64_UNIX */, 40 /* X86_32_MACOS */, 40 /* X86_32_WINDOWS */, 48 /* X86_64_WINDOWS */  };
  private static final int[] visual_offset = new int[] { 0 /* ARMle_EABI */, 0 /* X86_32_UNIX */, 0 /* X86_64_UNIX */, 0 /* X86_32_MACOS */, 0 /* X86_32_WINDOWS */, 0 /* X86_64_WINDOWS */ };
  private static final int[] visualid_offset = new int[] { 4 /* ARMle_EABI */, 4 /* X86_32_UNIX */, 8 /* X86_64_UNIX */, 4 /* X86_32_MACOS */, 4 /* X86_32_WINDOWS */, 8 /* X86_64_WINDOWS */ };
  private static final int[] screen_offset = new int[] { 8 /* ARMle_EABI */, 8 /* X86_32_UNIX */, 16 /* X86_64_UNIX */, 8 /* X86_32_MACOS */, 8 /* X86_32_WINDOWS */, 12 /* X86_64_WINDOWS */ };
  private static final int[] depth_offset = new int[] { 12 /* ARMle_EABI */, 12 /* X86_32_UNIX */, 20 /* X86_64_UNIX */, 12 /* X86_32_MACOS */, 12 /* X86_32_WINDOWS */, 16 /* X86_64_WINDOWS */ };
  private static final int[] c_class_offset = new int[] { 16 /* ARMle_EABI */, 16 /* X86_32_UNIX */, 24 /* X86_64_UNIX */, 16 /* X86_32_MACOS */, 16 /* X86_32_WINDOWS */, 20 /* X86_64_WINDOWS */ };
  private static final int[] red_mask_offset = new int[] { 20 /* ARMle_EABI */, 20 /* X86_32_UNIX */, 32 /* X86_64_UNIX */, 20 /* X86_32_MACOS */, 20 /* X86_32_WINDOWS */, 24 /* X86_64_WINDOWS */ };
  private static final int[] green_mask_offset = new int[] { 24 /* ARMle_EABI */, 24 /* X86_32_UNIX */, 40 /* X86_64_UNIX */, 24 /* X86_32_MACOS */, 24 /* X86_32_WINDOWS */, 28 /* X86_64_WINDOWS */ };
  private static final int[] blue_mask_offset = new int[] { 28 /* ARMle_EABI */, 28 /* X86_32_UNIX */, 48 /* X86_64_UNIX */, 28 /* X86_32_MACOS */, 28 /* X86_32_WINDOWS */, 32 /* X86_64_WINDOWS */ };
  private static final int[] colormap_size_offset = new int[] { 32 /* ARMle_EABI */, 32 /* X86_32_UNIX */, 56 /* X86_64_UNIX */, 32 /* X86_32_MACOS */, 32 /* X86_32_WINDOWS */, 36 /* X86_64_WINDOWS */ };
  private static final int[] bits_per_rgb_offset = new int[] { 36 /* ARMle_EABI */, 36 /* X86_32_UNIX */, 60 /* X86_64_UNIX */, 36 /* X86_32_MACOS */, 36 /* X86_32_WINDOWS */, 40 /* X86_64_WINDOWS */ };

  public static int size() {
    return XVisualInfo_size[mdIdx];
  }

  public static XVisualInfo create() {
    return create(Buffers.newDirectByteBuffer(size()));
  }

  public static XVisualInfo create(java.nio.ByteBuffer buf) {
      return new XVisualInfo(buf);
  }

  XVisualInfo(java.nio.ByteBuffer buf) {
    accessor = new StructAccessor(buf);
  }

  public java.nio.ByteBuffer getBuffer() {
    return accessor.getBuffer();
  }

  public XVisualInfo setVisual(long val) {
    accessor.setLongAt(visual_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.pointerSizeInBytes());
    return this;
  }

  public long getVisual() {
    return accessor.getLongAt(visual_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.pointerSizeInBytes());
  }

  public XVisualInfo setVisualid(long val) {
    accessor.setLongAt(visualid_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
    return this;
  }

  public long getVisualid() {
    return accessor.getLongAt(visualid_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
  }

  public XVisualInfo setScreen(int val) {
    accessor.setIntAt(screen_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
    return this;
  }

  public int getScreen() {
    return accessor.getIntAt(screen_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
  }

  public XVisualInfo setDepth(int val) {
    accessor.setIntAt(depth_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
    return this;
  }

  public int getDepth() {
    return accessor.getIntAt(depth_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
  }

  public XVisualInfo setC_class(int val) {
    accessor.setIntAt(c_class_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
    return this;
  }

  public int getC_class() {
    return accessor.getIntAt(c_class_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
  }

  public XVisualInfo setRed_mask(long val) {
    accessor.setLongAt(red_mask_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
    return this;
  }

  public long getRed_mask() {
    return accessor.getLongAt(red_mask_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
  }

  public XVisualInfo setGreen_mask(long val) {
    accessor.setLongAt(green_mask_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
    return this;
  }

  public long getGreen_mask() {
    return accessor.getLongAt(green_mask_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
  }

  public XVisualInfo setBlue_mask(long val) {
    accessor.setLongAt(blue_mask_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
    return this;
  }

  public long getBlue_mask() {
    return accessor.getLongAt(blue_mask_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.longSizeInBytes());
  }

  public XVisualInfo setColormap_size(int val) {
    accessor.setIntAt(colormap_size_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
    return this;
  }

  public int getColormap_size() {
    return accessor.getIntAt(colormap_size_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
  }

  public XVisualInfo setBits_per_rgb(int val) {
    accessor.setIntAt(bits_per_rgb_offset[mdIdx], val, MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
    return this;
  }

  public int getBits_per_rgb() {
    return accessor.getIntAt(bits_per_rgb_offset[mdIdx], MachineDescriptionRuntime.getStatic().md.intSizeInBytes());
  }

  // --- Begin CustomJavaCode .cfg declarations
 public static XVisualInfo create(XVisualInfo s) { XVisualInfo d = XVisualInfo.create(); d.getBuffer().put(s.getBuffer()); d.getBuffer().rewind(); s.getBuffer().rewind(); return d; }
  // ---- End CustomJavaCode .cfg declarations
}
