/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:28:27 CEST 2012 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import javax.media.opengl.GLES1;
import javax.media.opengl.GLES2;
import javax.media.opengl.GL2;
import javax.media.opengl.GLArrayData;
import javax.media.opengl.GLUniformData;
import com.jogamp.common.nio.Buffers;
import com.jogamp.opengl.util.GLBuffers;
import java.io.PrintStream;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <P> 
  * This interface contains all core embedded OpenGL methods of ES 2.x, with x >= 0,
  * inclusive, as well as most of it's extensions defined at the
  * time of this specification.
  * </P>
  */
public interface GLES2 extends GL2ES2{

  /** Part of <code>GL_OES_compressed_ETC1_RGB8_texture</code> */
  public static final int GL_ETC1_RGB8_OES = 0x8D64;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGB8_OES = 0x8B90;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGBA8_OES = 0x8B91;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGBA4_OES = 0x8B93;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGB5_A1_OES = 0x8B94;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGB8_OES = 0x8B95;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGBA8_OES = 0x8B96;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGBA4_OES = 0x8B98;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGB5_A1_OES = 0x8B99;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_SAMPLER_EXTERNAL_OES = 0x8D66;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
  /** Part of <code>GL_OES_texture_3D</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET = 0x8CD4;
  /** Part of <code>GL_OES_texture_half_float</code> */
  public static final int GL_HALF_FLOAT_OES = 0x8D61;
  /** Part of <code>GL_OES_vertex_array_object</code> */
  public static final int GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;
  /** Part of <code>GL_AMD_compressed_3DC_texture</code> */
  public static final int GL_3DC_X_AMD = 0x87F9;
  /** Part of <code>GL_AMD_compressed_3DC_texture</code> */
  public static final int GL_3DC_XY_AMD = 0x87FA;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGB_AMD = 0x8C92;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_COUNTER_TYPE_AMD = 0x8BC0;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_COUNTER_RANGE_AMD = 0x8BC1;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_UNSIGNED_INT64_AMD = 0x8BC2;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERCENTAGE_AMD = 0x8BC3;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_AMD = 0x8BC6;
  /** Part of <code>GL_AMD_program_binary_Z400</code> */
  public static final int GL_Z400_BINARY_AMD = 0x8740;
  /** Part of <code>GL_ANGLE_framebuffer_blit</code> */
  public static final int GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8;
  /** Part of <code>GL_ANGLE_framebuffer_blit</code> */
  public static final int GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9;
  /** Part of <code>GL_ANGLE_framebuffer_blit</code> */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
  /** Part of <code>GL_ANGLE_framebuffer_blit</code> */
  public static final int GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA;
  /** Part of <code>GL_ANGLE_framebuffer_multisample</code> */
  public static final int GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB;
  /** Part of <code>GL_ANGLE_framebuffer_multisample</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56;
  /** Part of <code>GL_ANGLE_framebuffer_multisample</code> */
  public static final int GL_MAX_SAMPLES_ANGLE = 0x8D57;
  /** Part of <code>GL_APPLE_rgb_422</code> */
  public static final int GL_RGB_422_APPLE = 0x8A1F;
  /** Part of <code>GL_APPLE_ycbcr_422</code>, <code>GL_APPLE_rgb_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
  /** Part of <code>GL_APPLE_ycbcr_422</code>, <code>GL_APPLE_rgb_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_MAX_SAMPLES_APPLE = 0x8D57;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
  /** Part of <code>GL_APPLE_texture_max_level</code> */
  public static final int GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;
  /** Part of <code>GL_ARM_mali_shader_binary</code> */
  public static final int GL_MALI_SHADER_BINARY_ARM = 0x8F60;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_PROGRAM_OBJECT_EXT = 0x8B40;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_SHADER_OBJECT_EXT = 0x8B48;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_BUFFER_OBJECT_EXT = 0x9151;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_QUERY_OBJECT_EXT = 0x9153;
  /** Part of <code>GL_EXT_debug_label</code> */
  public static final int GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_COLOR_EXT = 0x1800;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_DEPTH_EXT = 0x1801;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_STENCIL_EXT = 0x1802;
  /** Part of <code>GL_EXT_multisampled_render_to_texture</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
  /** Part of <code>GL_IMG_program_binary</code> */
  public static final int GL_SGX_PROGRAM_BINARY_IMG = 0x9130;
  /** Part of <code>GL_IMG_read_format</code> */
  public static final int GL_BGRA_IMG = 0x80E1;
  /** Part of <code>GL_IMG_read_format</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
  /** Part of <code>GL_IMG_shader_binary</code> */
  public static final int GL_SGX_BINARY_IMG = 0x8C0A;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_MAX_SAMPLES_IMG = 0x9135;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_TEXTURE_SAMPLES_IMG = 0x9136;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_ALL_COMPLETED_NV = 0x84F2;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_STATUS_NV = 0x84F3;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_CONDITION_NV = 0x84F4;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_COMPONENT_NV = 0x8ED0;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_COMPONENT4_NV = 0x8ED1;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_ATTACHMENT_NV = 0x8ED2;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_BUFFERS_NV = 0x8ED3;
  /** Part of <code>GL_NV_multisample_coverage</code>, <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_SAMPLES_NV = 0x8ED4;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_AUTOMATIC_NV = 0x8ED7;
  /** Part of <code>GL_NV_coverage_sample</code> */
  public static final int GL_COVERAGE_BUFFER_BIT_NV = 0x8000;
  /** Part of <code>GL_NV_depth_nonlinear</code> */
  public static final int GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C;
  /** Part of <code>GL_NV_read_buffer</code> */
  public static final int GL_READ_BUFFER_NV = 0x0C02;
  /** Part of <code>GL_QCOM_alpha_test</code> */
  public static final int GL_ALPHA_TEST_QCOM = 0x0BC0;
  /** Part of <code>GL_QCOM_alpha_test</code> */
  public static final int GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
  /** Part of <code>GL_QCOM_alpha_test</code> */
  public static final int GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_TYPE_QCOM = 0x8BD7;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_TARGET_QCOM = 0x8BDA;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_STATE_RESTORE = 0x8BDC;
  /** Part of <code>GL_QCOM_perfmon_global_mode</code> */
  public static final int GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
  /** Part of <code>GL_QCOM_writeonly_rendering</code> */
  public static final int GL_WRITEONLY_RENDERING_QCOM = 0x8823;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final long GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;
  /** Part of <code>GL_VIV_shader_binary</code> */
  public static final int GL_SHADER_BINARY_VIV = 0x8FC4;

  /** Entry point to C language function: <code> void {@native glAlphaFuncQCOM}(GLenum func, GLclampf ref); </code> <br>Part of <code>GL_QCOM_alpha_test</code>   */
  public void glAlphaFuncQCOM(int func, float ref);

  /** Entry point to C language function: <code> void {@native glBeginPerfMonitorAMD}(GLuint monitor); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glBeginPerfMonitorAMD(int monitor);

  /** Entry point to C language function: <code> void {@native glBindVertexArrayOES}(GLuint array); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glBindVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glBlitFramebufferANGLE}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter); </code> <br>Part of <code>GL_ANGLE_framebuffer_blit</code>   */
  public void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> void {@native glCoverageMaskNV}(GLboolean mask); </code> <br>Part of <code>GL_NV_coverage_sample</code>   */
  public void glCoverageMaskNV(boolean mask);

  /** Entry point to C language function: <code> void {@native glCoverageOperationNV}(GLenum operation); </code> <br>Part of <code>GL_NV_coverage_sample</code>   */
  public void glCoverageOperationNV(int operation);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_NV_fence</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteFencesNV(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glDeleteFencesNV(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glDeletePerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param monitors a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeletePerfMonitorsAMD(int n, IntBuffer monitors);

  /** Entry point to C language function: <code> void {@native glDeletePerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glDeletePerfMonitorsAMD(int n, int[] monitors, int monitors_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glDeleteVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glDisableDriverControlQCOM}(GLuint driverControl); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glDisableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments); </code> <br>Part of <code>GL_EXT_discard_framebuffer</code>
      @param attachments a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, IntBuffer attachments);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments); </code> <br>Part of <code>GL_EXT_discard_framebuffer</code>   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, int[] attachments, int attachments_offset);

  /** Entry point to C language function: <code> void {@native glDrawBuffersNV}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_VERSION_2_0</code>; <code>GL_NV_draw_buffers</code>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawBuffers(int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glDrawBuffersNV}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_VERSION_2_0</code>; <code>GL_NV_draw_buffers</code>   */
  public void glDrawBuffers(int n, int[] bufs, int bufs_offset);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetRenderbufferStorageOES}(GLenum target, GLeglImageOES image); </code> <br>Part of <code>GL_OES_EGL_image</code>   */
  public void glEGLImageTargetRenderbufferStorageOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetTexture2DOES}(GLenum target, GLeglImageOES image); </code> <br>Part of <code>GL_OES_EGL_image</code>   */
  public void glEGLImageTargetTexture2DOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEnableDriverControlQCOM}(GLuint driverControl); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glEnableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glEndPerfMonitorAMD}(GLuint monitor); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glEndPerfMonitorAMD(int monitor);

  /** Entry point to C language function: <code> void {@native glEndTilingQCOM}(GLbitfield preserveMask); </code> <br>Part of <code>GL_QCOM_tiled_rendering</code>   */
  public void glEndTilingQCOM(int preserveMask);

  /** Entry point to C language function: <code> void {@native glExtGetBufferPointervQCOM}(GLenum target, GLvoid *  *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param params a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glExtGetBufferPointervQCOM(int target, PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numBuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetBuffersQCOM(IntBuffer buffers, int maxBuffers, IntBuffer numBuffers);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetBuffersQCOM(int[] buffers, int buffers_offset, int maxBuffers, int[] numBuffers, int numBuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param framebuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numFramebuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetFramebuffersQCOM(IntBuffer framebuffers, int maxFramebuffers, IntBuffer numFramebuffers);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetFramebuffersQCOM(int[] framebuffers, int framebuffers_offset, int maxFramebuffers, int[] numFramebuffers, int numFramebuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param source a direct or array-backed {@link java.nio.ByteBuffer}
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, ByteBuffer source, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, byte[] source, int source_offset, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param programs a direct or array-backed {@link java.nio.IntBuffer}
      @param numPrograms a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramsQCOM(IntBuffer programs, int maxPrograms, IntBuffer numPrograms);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetProgramsQCOM(int[] programs, int programs_offset, int maxPrograms, int[] numPrograms, int numPrograms_offset);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numRenderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetRenderbuffersQCOM(IntBuffer renderbuffers, int maxRenderbuffers, IntBuffer numRenderbuffers);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetRenderbuffersQCOM(int[] renderbuffers, int renderbuffers_offset, int maxRenderbuffers, int[] numRenderbuffers, int numRenderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param shaders a direct or array-backed {@link java.nio.IntBuffer}
      @param numShaders a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetShadersQCOM(IntBuffer shaders, int maxShaders, IntBuffer numShaders);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetShadersQCOM(int[] shaders, int shaders_offset, int maxShaders, int[] numShaders, int numShaders_offset);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glExtGetTexSubImageQCOM}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *  texels); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param texels a direct or array-backed {@link java.nio.Buffer}   */
  public void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer texels);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}
      @param numTextures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexturesQCOM(IntBuffer textures, int maxTextures, IntBuffer numTextures);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetTexturesQCOM(int[] textures, int textures_offset, int maxTextures, int[] numTextures, int numTextures_offset);

  /** Entry point to C language function: <code> GLboolean {@native glExtIsProgramBinaryQCOM}(GLuint program); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public boolean glExtIsProgramBinaryQCOM(int program);

  /** Entry point to C language function: <code> void {@native glExtTexObjectStateOverrideiQCOM}(GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glFinishFenceNV}(GLuint array); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glFinishFenceNV(int array);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei zoffset); </code> <br>Part of <code>GL_EXT_multisampled_render_to_texture</code>   */
  public void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleIMG}(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei); </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code>   */
  public void glFramebufferTexture2DMultisampleIMG(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_NV_fence</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenFencesNV(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGenFencesNV(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glGenPerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param monitors a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenPerfMonitorsAMD(int n, IntBuffer monitors);

  /** Entry point to C language function: <code> void {@native glGenPerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGenPerfMonitorsAMD(int n, int[] monitors, int monitors_offset);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glGenVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString); </code> <br>Part of <code>GL_QCOM_driver_control</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControlString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, IntBuffer length, ByteBuffer driverControlString);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, int[] length, int length_offset, byte[] driverControlString, int driverControlString_offset);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls); </code> <br>Part of <code>GL_QCOM_driver_control</code>
      @param num a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControls a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetDriverControlsQCOM(IntBuffer num, int size, IntBuffer driverControls);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glGetDriverControlsQCOM(int[] num, int num_offset, int size, int[] driverControls, int driverControls_offset);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFenceivNV(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGetFenceivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectLabelEXT}(GLenum type, GLuint object, GLsizei bufSize, GLsizei *  length, GLchar *  label); </code> <br>Part of <code>GL_EXT_debug_label</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetObjectLabelEXT(int type, int object, int bufSize, IntBuffer length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glGetObjectLabelEXT}(GLenum type, GLuint object, GLsizei bufSize, GLsizei *  length, GLchar *  label); </code> <br>Part of <code>GL_EXT_debug_label</code>   */
  public void glGetObjectLabelEXT(int type, int object, int bufSize, int[] length, int length_offset, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterDataAMD}(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *  data, GLint *  bytesWritten); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}
      @param bytesWritten a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorCounterDataAMD(int monitor, int pname, int dataSize, IntBuffer data, IntBuffer bytesWritten);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterDataAMD}(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *  data, GLint *  bytesWritten); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCounterDataAMD(int monitor, int pname, int dataSize, int[] data, int data_offset, int[] bytesWritten, int bytesWritten_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterInfoAMD}(GLuint group, GLuint counter, GLenum pname, GLvoid *  data); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetPerfMonitorCounterInfoAMD(int group, int counter, int pname, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterStringAMD}(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *  length, GLchar *  counterString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param counterString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetPerfMonitorCounterStringAMD(int group, int counter, int bufSize, IntBuffer length, ByteBuffer counterString);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterStringAMD}(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *  length, GLchar *  counterString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCounterStringAMD(int group, int counter, int bufSize, int[] length, int length_offset, byte[] counterString, int counterString_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCountersAMD}(GLuint group, GLint *  numCounters, GLint *  maxActiveCounters, GLsizei counterSize, GLuint *  counters); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param numCounters a direct or array-backed {@link java.nio.IntBuffer}
      @param maxActiveCounters a direct or array-backed {@link java.nio.IntBuffer}
      @param counters a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorCountersAMD(int group, IntBuffer numCounters, IntBuffer maxActiveCounters, int counterSize, IntBuffer counters);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCountersAMD}(GLuint group, GLint *  numCounters, GLint *  maxActiveCounters, GLsizei counterSize, GLuint *  counters); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCountersAMD(int group, int[] numCounters, int numCounters_offset, int[] maxActiveCounters, int maxActiveCounters_offset, int counterSize, int[] counters, int counters_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupStringAMD}(GLuint group, GLsizei bufSize, GLsizei *  length, GLchar *  groupString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param groupString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetPerfMonitorGroupStringAMD(int group, int bufSize, IntBuffer length, ByteBuffer groupString);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupStringAMD}(GLuint group, GLsizei bufSize, GLsizei *  length, GLchar *  groupString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorGroupStringAMD(int group, int bufSize, int[] length, int length_offset, byte[] groupString, int groupString_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupsAMD}(GLint *  numGroups, GLsizei groupsSize, GLuint *  groups); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param numGroups a direct or array-backed {@link java.nio.IntBuffer}
      @param groups a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorGroupsAMD(IntBuffer numGroups, int groupsSize, IntBuffer groups);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupsAMD}(GLint *  numGroups, GLsizei groupsSize, GLuint *  groups); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorGroupsAMD(int[] numGroups, int numGroups_offset, int groupsSize, int[] groups, int groups_offset);

  /** Entry point to C language function: <code> void {@native glInsertEventMarkerEXT}(GLsizei length, const GLchar *  marker); </code> <br>Part of <code>GL_EXT_debug_marker</code>
      @param marker a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glInsertEventMarkerEXT(int length, ByteBuffer marker);

  /** Entry point to C language function: <code> void {@native glInsertEventMarkerEXT}(GLsizei length, const GLchar *  marker); </code> <br>Part of <code>GL_EXT_debug_marker</code>   */
  public void glInsertEventMarkerEXT(int length, byte[] marker, int marker_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceNV}(GLuint target); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glIsFenceNV(int target);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexArrayOES}(GLuint array); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public boolean glIsVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glLabelObjectEXT}(GLenum type, GLuint object, GLsizei length, const GLchar *  label); </code> <br>Part of <code>GL_EXT_debug_label</code>
      @param label a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glLabelObjectEXT(int type, int object, int length, ByteBuffer label);

  /** Entry point to C language function: <code> void {@native glLabelObjectEXT}(GLenum type, GLuint object, GLsizei length, const GLchar *  label); </code> <br>Part of <code>GL_EXT_debug_label</code>   */
  public void glLabelObjectEXT(int type, int object, int length, byte[] label, int label_offset);

  /** Entry point to C language function: <code> void {@native glPopGroupMarkerEXT}(void); </code> <br>Part of <code>GL_EXT_debug_marker</code>   */
  public void glPopGroupMarkerEXT();

  /** Entry point to C language function: <code> void {@native glPushGroupMarkerEXT}(GLsizei length, const GLchar *  marker); </code> <br>Part of <code>GL_EXT_debug_marker</code>
      @param marker a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glPushGroupMarkerEXT(int length, ByteBuffer marker);

  /** Entry point to C language function: <code> void {@native glPushGroupMarkerEXT}(GLsizei length, const GLchar *  marker); </code> <br>Part of <code>GL_EXT_debug_marker</code>   */
  public void glPushGroupMarkerEXT(int length, byte[] marker, int marker_offset);

  /** Entry point to C language function: <code> void {@native glReadBufferNV}(GLenum mode); </code> <br>Part of <code>GL_NV_read_buffer</code>   */
  public void glReadBufferNV(int mode);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleANGLE}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_ANGLE_framebuffer_multisample</code>   */
  public void glRenderbufferStorageMultisampleANGLE(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleAPPLE}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_APPLE_framebuffer_multisample</code>   */
  public void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleIMG}(GLenum, GLsizei, GLenum, GLsizei, GLsizei); </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code>   */
  public void glRenderbufferStorageMultisampleIMG(int arg0, int arg1, int arg2, int arg3, int arg4);

  /** Entry point to C language function: <code> void {@native glResolveMultisampleFramebufferAPPLE}(void); </code> <br>Part of <code>GL_APPLE_framebuffer_multisample</code>   */
  public void glResolveMultisampleFramebufferAPPLE();

  /** Entry point to C language function: <code> void {@native glSelectPerfMonitorCountersAMD}(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *  countersList); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param countersList a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSelectPerfMonitorCountersAMD(int monitor, boolean enable, int group, int numCounters, IntBuffer countersList);

  /** Entry point to C language function: <code> void {@native glSelectPerfMonitorCountersAMD}(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *  countersList); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glSelectPerfMonitorCountersAMD(int monitor, boolean enable, int group, int numCounters, int[] countersList, int countersList_offset);

  /** Entry point to C language function: <code> void {@native glSetFenceNV}(GLuint target, GLenum id); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glSetFenceNV(int target, int id);

  /** Entry point to C language function: <code> void {@native glStartTilingQCOM}(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask); </code> <br>Part of <code>GL_QCOM_tiled_rendering</code>   */
  public void glStartTilingQCOM(int x, int y, int width, int height, int preserveMask);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceNV}(GLuint target); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glTestFenceNV(int target);


  // --- Begin CustomJavaCode .cfg declarations
  
    public static final int GL_NVIDIA_PLATFORM_BINARY_NV = 0x890B;
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GLES2
