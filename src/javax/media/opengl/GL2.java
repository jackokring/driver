/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:27:31 CEST 2012 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <P> 
  * This interface contains all core desktop OpenGL methods through
  * version 3.0, inclusive, as well as most of it's extensions defined at the
  * time of this specification.  Early OpenGL extensions whose functionality
  * was incorporated into core OpenGL by version 3.0, inclusive, are specifically
  * excluded.<br>
  * Note: OpenGL 3.0 is the last subsumed version in the specification. 
  * You need to use a {@link GL3} or {@link GL3bc} OpenGL 3.1+ context to benefit
  * from new functionality and versions.
  * </P>
  */
public interface GL2 extends GL2ES1, GL2GL3{

  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_2_BYTES = 0x1407;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3_BYTES = 0x1408;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_4_BYTES = 0x1409;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_QUADS = 0x0007;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_QUAD_STRIP = 0x0008;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON = 0x0009;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE = 0x0B24;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE_PATTERN = 0x0B25;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_STIPPLE_REPEAT = 0x0B26;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_MODE = 0x0B40;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_STIPPLE = 0x0B42;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EDGE_FLAG = 0x0B43;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COMPILE = 0x1300;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COMPILE_AND_EXECUTE = 0x1301;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_BASE = 0x0B32;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_INDEX = 0x0B33;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_MODE = 0x0B30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_INDEXES = 0x1603;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_MATERIAL_FACE = 0x0B55;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_RED_BITS = 0x0D58;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_GREEN_BITS = 0x0D59;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_BLUE_BITS = 0x0D5A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_ALPHA_BITS = 0x0D5B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_CLEAR_VALUE = 0x0B80;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM = 0x0100;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LOAD = 0x0101;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MULT = 0x0103;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RETURN = 0x0102;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK = 0x1C01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RENDER = 0x1C00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECT = 0x1C02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_2D = 0x0600;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D = 0x0601;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D_COLOR = 0x0602;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_3D_COLOR_TEXTURE = 0x0603;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_4D_COLOR_TEXTURE = 0x0604;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_TOKEN = 0x0701;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_TOKEN = 0x0702;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_RESET_TOKEN = 0x0707;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_TOKEN = 0x0703;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BITMAP_TOKEN = 0x0704;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DRAW_PIXEL_TOKEN = 0x0705;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COPY_PIXEL_TOKEN = 0x0706;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PASS_THROUGH_TOKEN = 0x0700;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECTION_BUFFER_POINTER = 0x0DF3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SELECTION_BUFFER_SIZE = 0x0DF4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FOG_INDEX = 0x0B61;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LOGIC_OP = 0x0BF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_LOGIC_OP = 0x0BF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX0 = 0x0409;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX1 = 0x040A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX2 = 0x040B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX3 = 0x040C;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR_INDEX = 0x1900;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_BITS = 0x0D51;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUX_BUFFERS = 0x0C00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BITMAP = 0x1A00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_LIST_NESTING = 0x0B31;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_NAME_STACK_DEPTH = 0x0D37;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_EVAL_ORDER = 0x0D30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ATTRIB_STACK_DEPTH = 0x0BB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_INDEX = 0x0B01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_COLOR = 0x0B04;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_DISTANCE = 0x0B09;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_INDEX = 0x0B05;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_POSITION = 0x0B07;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_CLEAR_VALUE = 0x0C20;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_MODE = 0x0C30;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_WRITEMASK = 0x0C21;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_NAME_STACK_DEPTH = 0x0D70;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RENDER_MODE = 0x0C40;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RGBA_MODE = 0x0C31;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_AUTO_NORMAL = 0x0D80;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_COLOR_4 = 0x0D90;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_INDEX = 0x0D91;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_NORMAL = 0x0D92;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_VERTEX_3 = 0x0D97;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_VERTEX_4 = 0x0D98;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_COLOR_4 = 0x0DB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_INDEX = 0x0DB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_NORMAL = 0x0DB2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_VERTEX_3 = 0x0DB7;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_VERTEX_4 = 0x0DB8;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_GRID_DOMAIN = 0x0DD0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP1_GRID_SEGMENTS = 0x0DD1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_GRID_DOMAIN = 0x0DD2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP2_GRID_SEGMENTS = 0x0DD3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COEFF = 0x0A00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOMAIN = 0x0A02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ORDER = 0x0A01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP_COLOR = 0x0D10;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_MAP_STENCIL = 0x0D11;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_SHIFT = 0x0D12;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_INDEX_OFFSET = 0x0D13;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED_SCALE = 0x0D14;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RED_BIAS = 0x0D15;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN_SCALE = 0x0D18;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN_BIAS = 0x0D19;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE_SCALE = 0x0D1A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE_BIAS = 0x0D1B;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALPHA_BIAS = 0x0D1D;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_SCALE = 0x0D1E;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH_BIAS = 0x0D1F;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_S_TO_S = 0x0C71;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_I = 0x0C70;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_R = 0x0C72;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_G = 0x0C73;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_B = 0x0C74;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_I_TO_A = 0x0C75;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_R_TO_R = 0x0C76;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_G_TO_G = 0x0C77;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_B_TO_B = 0x0C78;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MAP_A_TO_A = 0x0C79;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ZOOM_X = 0x0D16;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ZOOM_Y = 0x0D17;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_S = 0x0C60;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_T = 0x0C61;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BORDER = 0x1005;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_COMPONENTS = 0x1003;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_INTENSITY_SIZE = 0x8061;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_OBJECT_LINEAR = 0x2401;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_OBJECT_PLANE = 0x2501;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EYE_LINEAR = 0x2400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EYE_PLANE = 0x2502;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SPHERE_MAP = 0x2402;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CLAMP = 0x2900;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_S = 0x2000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_T = 0x2001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_R = 0x2002;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_Q = 0x2003;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_R = 0x0C62;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GEN_Q = 0x0C63;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_CURRENT_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_BIT = 0x00000002;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_BIT = 0x00000004;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_BIT = 0x00000008;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_STIPPLE_BIT = 0x00000010;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PIXEL_MODE_BIT = 0x00000020;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIGHTING_BIT = 0x00000040;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FOG_BIT = 0x00000080;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ACCUM_BUFFER_BIT = 0x00000200;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_VIEWPORT_BIT = 0x00000800;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TRANSFORM_BIT = 0x00001000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ENABLE_BIT = 0x00002000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_HINT_BIT = 0x00008000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_EVAL_BIT = 0x00010000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LIST_BIT = 0x00020000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BIT = 0x00040000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_SCISSOR_BIT = 0x00080000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_ALL_ATTRIB_BITS = 0x000FFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_PRIORITY = 0x8066;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_RESIDENT = 0x8067;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA4 = 0x803B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA8 = 0x803C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA12 = 0x803D;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_ALPHA16 = 0x803E;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE4 = 0x803F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE8 = 0x8040;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12 = 0x8041;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE16 = 0x8042;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE4_ALPHA4 = 0x8043;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE6_ALPHA2 = 0x8044;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE8_ALPHA8 = 0x8045;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12_ALPHA4 = 0x8046;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE12_ALPHA12 = 0x8047;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_LUMINANCE16_ALPHA16 = 0x8048;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY = 0x8049;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY4 = 0x804A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY8 = 0x804B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY12 = 0x804C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INTENSITY16 = 0x804D;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final long GL_ALL_CLIENT_ATTRIB_BITS = 0xFFFFFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final long GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY = 0x8077;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY = 0x8079;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_TYPE = 0x8085;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_STRIDE = 0x8086;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_INDEX_ARRAY_POINTER = 0x8091;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_V2F = 0x2A20;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_V3F = 0x2A21;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4UB_V2F = 0x2A22;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4UB_V3F = 0x2A23;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C3F_V3F = 0x2A24;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_N3F_V3F = 0x2A25;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_C4F_N3F_V3F = 0x2A26;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_V3F = 0x2A27;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T4F_V4F = 0x2A28;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C4UB_V3F = 0x2A29;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C3F_V3F = 0x2A2A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_N3F_V3F = 0x2A2B;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T2F_C4F_N3F_V3F = 0x2A2C;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_T4F_C4F_N3F_V4F = 0x2A2D;
  /** Part of <code>GL_VERSION_1_2_DEPRECATED</code> */
  public static final int GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
  /** Part of <code>GL_VERSION_1_2_DEPRECATED</code> */
  public static final int GL_SINGLE_COLOR = 0x81F9;
  /** Part of <code>GL_VERSION_1_2_DEPRECATED</code> */
  public static final int GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_1D = 0x8010;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_2D = 0x8011;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_SEPARABLE_2D = 0x8012;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_BORDER_MODE = 0x8013;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_FILTER_SCALE = 0x8014;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_FILTER_BIAS = 0x8015;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_REDUCE = 0x8016;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_FORMAT = 0x8017;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_WIDTH = 0x8018;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_HEIGHT = 0x8019;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MAX_CONVOLUTION_WIDTH = 0x801A;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM = 0x8024;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_PROXY_HISTOGRAM = 0x8025;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_WIDTH = 0x8026;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_FORMAT = 0x8027;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_RED_SIZE = 0x8028;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_GREEN_SIZE = 0x8029;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_BLUE_SIZE = 0x802A;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_HISTOGRAM_SINK = 0x802D;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MINMAX = 0x802E;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MINMAX_FORMAT = 0x802F;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MINMAX_SINK = 0x8030;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_TABLE_TOO_LARGE = 0x8031;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_MATRIX = 0x80B1;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE = 0x80D0;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_PROXY_COLOR_TABLE = 0x80D3;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_SCALE = 0x80D6;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_BIAS = 0x80D7;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_FORMAT = 0x80D8;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_WIDTH = 0x80D9;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_RED_SIZE = 0x80DA;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONSTANT_BORDER = 0x8151;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_REPLICATE_BORDER = 0x8153;
  /** Part of <code>GL_ARB_imaging_DEPRECATED</code> */
  public static final int GL_CONVOLUTION_BORDER_COLOR = 0x8154;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_MULTISAMPLE_BIT = 0x20000000;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_COMPRESSED_ALPHA = 0x84E9;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_COMPRESSED_LUMINANCE = 0x84EA;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_COMPRESSED_INTENSITY = 0x84EC;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE0_RGB = 0x8580;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE1_RGB = 0x8581;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE2_RGB = 0x8582;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE0_ALPHA = 0x8588;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE1_ALPHA = 0x8589;
  /** Part of <code>GL_VERSION_1_3_DEPRECATED</code> */
  public static final int GL_SOURCE2_ALPHA = 0x858A;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_SOURCE = 0x8450;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE = 0x8451;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FRAGMENT_DEPTH = 0x8452;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_CURRENT_FOG_COORDINATE = 0x8453;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_ARRAY = 0x8457;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_COLOR_SUM = 0x8458;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_CURRENT_SECONDARY_COLOR = 0x8459;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY = 0x845E;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_TEXTURE_FILTER_CONTROL = 0x8500;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_DEPTH_TEXTURE_MODE = 0x884B;
  /** Part of <code>GL_VERSION_1_4_DEPRECATED</code> */
  public static final int GL_COMPARE_R_TO_TEXTURE = 0x884E;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_SRC = 0x8450;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD = 0x8451;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_CURRENT_FOG_COORD = 0x8453;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_ARRAY_TYPE = 0x8454;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_ARRAY_POINTER = 0x8456;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_ARRAY = 0x8457;
  /** Part of <code>GL_VERSION_1_5_DEPRECATED</code> */
  public static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
  /** Part of <code>GL_VERSION_2_0_DEPRECATED</code> */
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
  /** Part of <code>GL_VERSION_2_0_DEPRECATED</code> */
  public static final int GL_MAX_TEXTURE_COORDS = 0x8871;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_SLUMINANCE_ALPHA = 0x8C44;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_SLUMINANCE8_ALPHA8 = 0x8C45;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_SLUMINANCE = 0x8C46;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_SLUMINANCE8 = 0x8C47;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_COMPRESSED_SLUMINANCE = 0x8C4A;
  /** Part of <code>GL_VERSION_2_1_DEPRECATED</code> */
  public static final int GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
  /** Part of <code>GL_VERSION_3_0_DEPRECATED</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_CLAMP_VERTEX_COLOR = 0x891A;
  /** Part of <code>GL_VERSION_3_0_DEPRECATED</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_CLAMP_FRAGMENT_COLOR = 0x891B;
  /** Part of <code>GL_VERSION_3_0_DEPRECATED</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA_INTEGER = 0x8D97;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_VERTEX_BLEND_ARB = 0x86A7;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_CURRENT_WEIGHT_ARB = 0x86A8;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW0_ARB = 0x1700;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW1_ARB = 0x850A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW2_ARB = 0x8722;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW3_ARB = 0x8723;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW4_ARB = 0x8724;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW5_ARB = 0x8725;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW6_ARB = 0x8726;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW7_ARB = 0x8727;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW8_ARB = 0x8728;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW9_ARB = 0x8729;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW10_ARB = 0x872A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW11_ARB = 0x872B;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW12_ARB = 0x872C;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW13_ARB = 0x872D;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW14_ARB = 0x872E;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW15_ARB = 0x872F;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW16_ARB = 0x8730;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW17_ARB = 0x8731;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW18_ARB = 0x8732;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW19_ARB = 0x8733;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW20_ARB = 0x8734;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW21_ARB = 0x8735;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW22_ARB = 0x8736;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW23_ARB = 0x8737;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW24_ARB = 0x8738;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW25_ARB = 0x8739;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW26_ARB = 0x873A;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW27_ARB = 0x873B;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW28_ARB = 0x873C;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW29_ARB = 0x873D;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW30_ARB = 0x873E;
  /** Part of <code>GL_ARB_vertex_blend</code> */
  public static final int GL_MODELVIEW31_ARB = 0x873F;
  /** Part of <code>GL_ARB_matrix_palette</code> */
  public static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
  /** Part of <code>GL_ARB_matrix_palette</code> */
  public static final int GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
  /** Part of <code>GL_ARB_shadow_ambient</code> */
  public static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_COLOR_SUM_ARB = 0x8458;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_ARB = 0x8620;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_LENGTH_ARB = 0x8627;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_STRING_ARB = 0x8628;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_CURRENT_MATRIX_ARB = 0x8641;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_BINDING_ARB = 0x8677;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_FORMAT_ARB = 0x8876;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX0_ARB = 0x88C0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX1_ARB = 0x88C1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX2_ARB = 0x88C2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX3_ARB = 0x88C3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX4_ARB = 0x88C4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX5_ARB = 0x88C5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX6_ARB = 0x88C6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX7_ARB = 0x88C7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX8_ARB = 0x88C8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX9_ARB = 0x88C9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX10_ARB = 0x88CA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX11_ARB = 0x88CB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX12_ARB = 0x88CC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX13_ARB = 0x88CD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX14_ARB = 0x88CE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX15_ARB = 0x88CF;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX16_ARB = 0x88D0;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX17_ARB = 0x88D1;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX18_ARB = 0x88D2;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX19_ARB = 0x88D3;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX20_ARB = 0x88D4;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX21_ARB = 0x88D5;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX22_ARB = 0x88D6;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX23_ARB = 0x88D7;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX24_ARB = 0x88D8;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX25_ARB = 0x88D9;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX26_ARB = 0x88DA;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX27_ARB = 0x88DB;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX28_ARB = 0x88DC;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX29_ARB = 0x88DD;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX30_ARB = 0x88DE;
  /** Part of <code>GL_ARB_vertex_program</code> */
  public static final int GL_MATRIX31_ARB = 0x88DF;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_FRAGMENT_PROGRAM_ARB = 0x8804;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
  /** Part of <code>GL_ARB_fragment_program</code> */
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_PROGRAM_OBJECT_ARB = 0x8B40;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SHADER_OBJECT_ARB = 0x8B48;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_TYPE_ARB = 0x8B4E;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC2_ARB = 0x8B50;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC3_ARB = 0x8B51;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_VEC4_ARB = 0x8B52;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC2_ARB = 0x8B53;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC3_ARB = 0x8B54;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_INT_VEC4_ARB = 0x8B55;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_ARB = 0x8B56;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC2_ARB = 0x8B57;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC3_ARB = 0x8B58;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_BOOL_VEC4_ARB = 0x8B59;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT2_ARB = 0x8B5A;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT3_ARB = 0x8B5B;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_FLOAT_MAT4_ARB = 0x8B5C;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_1D_ARB = 0x8B5D;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_ARB = 0x8B5E;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_3D_ARB = 0x8B5F;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_CUBE_ARB = 0x8B60;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
  /** Part of <code>GL_ARB_shader_objects</code> */
  public static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
  /** Part of <code>GL_ARB_shading_language_100</code> */
  public static final int GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
  /** Part of <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_RGBA_FLOAT_MODE = 0x8820;
  /** Part of <code>GL_ARB_framebuffer_object_DEPRECATED</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
  /** Part of <code>GL_ARB_framebuffer_object_DEPRECATED</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_ALPHA32F = 0x8816;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_INTENSITY32F = 0x8817;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_LUMINANCE32F = 0x8818;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_LUMINANCE_ALPHA32F = 0x8819;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_ALPHA16F = 0x881C;
  /** Part of <code>GL_ARB_texture_float</code> */
  public static final int GL_INTENSITY16F = 0x881D;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_LUMINANCE16F = 0x881E;
  /** Part of <code>GL_ARB_texture_float</code>;  */
  public static final int GL_LUMINANCE_ALPHA16F = 0x881F;
  /** Part of <code>GL_ARB_framebuffer_object_DEPRECATED</code> */
  public static final int GL_INDEX = 0x8222;
  /** Part of <code>GL_EXT_abgr</code> */
  public static final int GL_ABGR_EXT = 0x8000;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_CMYK_EXT = 0x800C;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_CMYKA_EXT = 0x800D;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_PACK_CMYK_HINT_EXT = 0x800E;
  /** Part of <code>GL_EXT_cmyka</code> */
  public static final int GL_UNPACK_CMYK_HINT_EXT = 0x800F;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_COLOR3_BIT_PGI = 0x00010000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_COLOR4_BIT_PGI = 0x00020000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_EDGEFLAG_BIT_PGI = 0x00040000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_INDEX_BIT_PGI = 0x00080000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_NORMAL_BIT_PGI = 0x08000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD1_BIT_PGI = 0x10000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD2_BIT_PGI = 0x20000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_TEXCOORD3_BIT_PGI = 0x40000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final long GL_TEXCOORD4_BIT_PGI = 0x80000000;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX23_BIT_PGI = 0x00000004;
  /** Part of <code>GL_PGI_vertex_hints</code> */
  public static final int GL_VERTEX4_BIT_PGI = 0x00000008;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CLIP_NEAR_HINT_PGI = 0x1A220;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_CLIP_FAR_HINT_PGI = 0x1A221;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_WIDE_LINE_HINT_PGI = 0x1A222;
  /** Part of <code>GL_PGI_misc_hints</code> */
  public static final int GL_BACK_NORMALS_HINT_PGI = 0x1A223;
  /** Part of <code>GL_EXT_clip_volume_hint</code> */
  public static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_EXT = 0x81B8;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
  /** Part of <code>GL_EXT_index_material</code> */
  public static final int GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_EXT = 0x81B5;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_FUNC_EXT = 0x81B6;
  /** Part of <code>GL_EXT_index_func</code> */
  public static final int GL_INDEX_TEST_REF_EXT = 0x81B7;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_V2F_EXT = 0x81AD;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_V3F_EXT = 0x81AE;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_N3F_V2F_EXT = 0x81AF;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_IUI_N3F_V3F_EXT = 0x81B0;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_V2F_EXT = 0x81B1;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_V3F_EXT = 0x81B2;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
  /** Part of <code>GL_EXT_index_array_formats</code> */
  public static final int GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
  /** Part of <code>GL_EXT_compiled_vertex_array</code> */
  public static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
  /** Part of <code>GL_EXT_compiled_vertex_array</code> */
  public static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_EXT = 0x81AA;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
  /** Part of <code>GL_EXT_cull_vertex</code> */
  public static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_MATERIAL_EXT = 0x8349;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_NORMAL_EXT = 0x834A;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_FRAGMENT_COLOR_EXT = 0x834C;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_ATTENUATION_EXT = 0x834D;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_SHADOW_ATTENUATION_EXT = 0x834E;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_LIGHT_EXT = 0x8350;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
  /** Part of <code>GL_EXT_light_texture</code> */
  public static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_MAG_FILTER_EXT = 0x8331;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_MIN_FILTER_EXT = 0x8332;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_CUBIC_EXT = 0x8334;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_AVERAGE_EXT = 0x8335;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
  /** Part of <code>GL_EXT_pixel_transform</code> */
  public static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
  /** Part of <code>GL_EXT_shared_texture_palette</code> */
  public static final int GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
  /** Part of <code>GL_EXT_texture_perturb_normal</code> */
  public static final int GL_PERTURB_EXT = 0x85AE;
  /** Part of <code>GL_EXT_texture_perturb_normal</code> */
  public static final int GL_TEXTURE_NORMAL_EXT = 0x85AF;
  /** Part of <code>GL_REND_screen_coordinates</code> */
  public static final int GL_SCREEN_COORDINATES_REND = 0x8490;
  /** Part of <code>GL_REND_screen_coordinates</code> */
  public static final int GL_INVERTED_SCREEN_W_REND = 0x8491;
  /** Part of <code>GL_APPLE_specular_vector</code> */
  public static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
  /** Part of <code>GL_APPLE_transform_hint</code> */
  public static final int GL_TRANSFORM_HINT_APPLE = 0x85B1;
  /** Part of <code>GL_SUNX_constant_data</code> */
  public static final int GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
  /** Part of <code>GL_SUNX_constant_data</code> */
  public static final int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_RED_MIN_CLAMP_INGR = 0x8560;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_GREEN_MIN_CLAMP_INGR = 0x8561;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_BLUE_MIN_CLAMP_INGR = 0x8562;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_RED_MAX_CLAMP_INGR = 0x8564;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_GREEN_MAX_CLAMP_INGR = 0x8565;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_BLUE_MAX_CLAMP_INGR = 0x8566;
  /** Part of <code>GL_INGR_color_clamp</code> */
  public static final int GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
  /** Part of <code>GL_INGR_interlace_read</code> */
  public static final int GL_INTERLACE_READ_INGR = 0x8568;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_EXT = 0x80CC;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_REV_EXT = 0x80CD;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_AVERAGE_EXT = 0x80CE;
  /** Part of <code>GL_EXT_422_pixels</code> */
  public static final int GL_422_REV_AVERAGE_EXT = 0x80CF;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_MATRIX_EXT = 0x8506;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHTING_EXT = 0x8509;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW0_EXT = 0x1700;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_MODELVIEW1_EXT = 0x850A;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
  /** Part of <code>GL_EXT_vertex_weighting</code> */
  public static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
  /** Part of <code>GL_NV_light_max_exponent</code> */
  public static final int GL_MAX_SHININESS_NV = 0x8504;
  /** Part of <code>GL_NV_light_max_exponent</code> */
  public static final int GL_MAX_SPOT_EXPONENT_NV = 0x8505;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
  /** Part of <code>GL_NV_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_FOG_DISTANCE_MODE_NV = 0x855A;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_EYE_RADIAL_NV = 0x855B;
  /** Part of <code>GL_NV_fog_distance</code> */
  public static final int GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_LIGHT_NV = 0x855D;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_CONSTANT_NV = 0x855E;
  /** Part of <code>GL_NV_texgen_emboss</code> */
  public static final int GL_EMBOSS_MAP_NV = 0x855F;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_ALL_COMPLETED_NV = 0x84F2;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_STATUS_NV = 0x84F3;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_CONDITION_NV = 0x84F4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_2D_NV = 0x86C0;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_TESSELLATION_NV = 0x86C2;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
  /** Part of <code>GL_NV_evaluators</code> */
  public static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SHADER_CONSISTENT_NV = 0x86DD;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_SHADER_NV = 0x86DE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SHADER_OPERATION_NV = 0x86DF;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CULL_MODES_NV = 0x86E0;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CONST_EYE_NV = 0x86E5;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_PASS_THROUGH_NV = 0x86E6;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_CULL_FRAGMENT_NV = 0x86E7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_NV = 0x86EC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HILO_NV = 0x86F4;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_NV = 0x86F5;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_NV = 0x86F6;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT_MAG_VIB_NV = 0x86F7;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HILO16_NV = 0x86F8;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_HILO_NV = 0x86F9;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_HILO16_NV = 0x86FA;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGBA_NV = 0x86FB;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGBA8_NV = 0x86FC;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB_NV = 0x86FE;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB8_NV = 0x86FF;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE_NV = 0x8701;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE8_NV = 0x8702;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_ALPHA_NV = 0x8705;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_ALPHA8_NV = 0x8706;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_INTENSITY_NV = 0x8707;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_INTENSITY8_NV = 0x8708;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_NV = 0x8709;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_MAG8_NV = 0x870A;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HI_SCALE_NV = 0x870E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_LO_SCALE_NV = 0x870F;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DS_SCALE_NV = 0x8710;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DT_SCALE_NV = 0x8711;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_MAGNITUDE_SCALE_NV = 0x8712;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_VIBRANCE_SCALE_NV = 0x8713;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_HI_BIAS_NV = 0x8714;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_LO_BIAS_NV = 0x8715;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DS_BIAS_NV = 0x8716;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_DT_BIAS_NV = 0x8717;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_MAGNITUDE_BIAS_NV = 0x8718;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_VIBRANCE_BIAS_NV = 0x8719;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_HI_SIZE_NV = 0x871B;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_LO_SIZE_NV = 0x871C;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_DS_SIZE_NV = 0x871D;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_DT_SIZE_NV = 0x871E;
  /** Part of <code>GL_NV_texture_shader</code> */
  public static final int GL_TEXTURE_MAG_SIZE_NV = 0x871F;
  /** Part of <code>GL_NV_texture_shader2</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
  /** Part of <code>GL_NV_vertex_array_range2</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
  /** Part of <code>GL_OML_interlace</code> */
  public static final int GL_INTERLACE_OML = 0x8980;
  /** Part of <code>GL_OML_interlace</code> */
  public static final int GL_INTERLACE_READ_OML = 0x8981;
  /** Part of <code>GL_OML_subsample</code> */
  public static final int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
  /** Part of <code>GL_OML_subsample</code> */
  public static final int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_PACK_RESAMPLE_OML = 0x8984;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_UNPACK_RESAMPLE_OML = 0x8985;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_REPLICATE_OML = 0x8986;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_AVERAGE_OML = 0x8988;
  /** Part of <code>GL_OML_resample</code> */
  public static final int GL_RESAMPLE_DECIMATE_OML = 0x8989;
  /** Part of <code>GL_NV_copy_depth_to_color</code> */
  public static final int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
  /** Part of <code>GL_NV_copy_depth_to_color</code> */
  public static final int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_ATI = 0x87F0;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
  /** Part of <code>GL_ATI_pn_triangles</code> */
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_EXT = 0x8780;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_INDEX_EXT = 0x8782;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_NEGATE_EXT = 0x8783;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_DOT3_EXT = 0x8784;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_DOT4_EXT = 0x8785;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MUL_EXT = 0x8786;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_ADD_EXT = 0x8787;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MADD_EXT = 0x8788;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_FRAC_EXT = 0x8789;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MAX_EXT = 0x878A;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MIN_EXT = 0x878B;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SET_GE_EXT = 0x878C;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SET_LT_EXT = 0x878D;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_CLAMP_EXT = 0x878E;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_FLOOR_EXT = 0x878F;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_ROUND_EXT = 0x8790;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_EXP_BASE_2_EXT = 0x8791;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_LOG_BASE_2_EXT = 0x8792;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_POWER_EXT = 0x8793;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_RECIP_EXT = 0x8794;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_RECIP_SQRT_EXT = 0x8795;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_SUB_EXT = 0x8796;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_CROSS_PRODUCT_EXT = 0x8797;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OP_MOV_EXT = 0x8799;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_VERTEX_EXT = 0x879A;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_COLOR0_EXT = 0x879B;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_COLOR1_EXT = 0x879C;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_OUTPUT_FOG_EXT = 0x87BD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_SCALAR_EXT = 0x87BE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VECTOR_EXT = 0x87BF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MATRIX_EXT = 0x87C0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_EXT = 0x87C1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_EXT = 0x87C2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_EXT = 0x87C3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_EXT = 0x87C4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_X_EXT = 0x87D5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_Y_EXT = 0x87D6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_Z_EXT = 0x87D7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_W_EXT = 0x87D8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_X_EXT = 0x87D9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_Y_EXT = 0x87DA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_Z_EXT = 0x87DB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_W_EXT = 0x87DC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_ZERO_EXT = 0x87DD;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_ONE_EXT = 0x87DE;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NEGATIVE_ONE_EXT = 0x87DF;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_NORMALIZED_RANGE_EXT = 0x87E0;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_FULL_RANGE_EXT = 0x87E1;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_CURRENT_VERTEX_EXT = 0x87E2;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_MVP_MATRIX_EXT = 0x87E3;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_VALUE_EXT = 0x87E4;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_DATATYPE_EXT = 0x87E5;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_EXT = 0x87E8;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_VALUE_EXT = 0x87EA;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_INVARIANT_DATATYPE_EXT = 0x87EB;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
  /** Part of <code>GL_EXT_vertex_shader</code> */
  public static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
  /** Part of <code>GL_NV_multisample_filter_hint</code> */
  public static final int GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
  /** Part of <code>GL_NV_depth_clamp</code> */
  public static final int GL_DEPTH_CLAMP_NV = 0x864F;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNTER_BITS_NV = 0x8864;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNT_NV = 0x8866;
  /** Part of <code>GL_NV_occlusion_query</code> */
  public static final int GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_HILO8_NV = 0x885E;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_SIGNED_HILO8_NV = 0x885F;
  /** Part of <code>GL_NV_texture_shader3</code> */
  public static final int GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
  /** Part of <code>GL_EXT_stencil_two_side</code> */
  public static final int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
  /** Part of <code>GL_EXT_stencil_two_side</code> */
  public static final int GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
  /** Part of <code>GL_APPLE_client_storage</code> */
  public static final int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
  /** Part of <code>GL_APPLE_fence</code> */
  public static final int GL_DRAW_PIXELS_APPLE = 0x8A0A;
  /** Part of <code>GL_APPLE_fence</code> */
  public static final int GL_FENCE_APPLE = 0x8A0B;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_CLIENT_APPLE = 0x85B4;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_CACHED_APPLE = 0x85BE;
  /** Part of <code>GL_APPLE_vertex_array_range</code> */
  public static final int GL_STORAGE_SHARED_APPLE = 0x85BF;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_YCBCR_422_APPLE = 0x85B9;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
  /** Part of <code>GL_APPLE_ycbcr_422</code> */
  public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGB_S3TC = 0x83A0;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGB4_S3TC = 0x83A1;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGBA_S3TC = 0x83A2;
  /** Part of <code>GL_S3_s3tc</code> */
  public static final int GL_RGBA4_S3TC = 0x83A3;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER0_ATI = 0x8825;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER1_ATI = 0x8826;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER2_ATI = 0x8827;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER3_ATI = 0x8828;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER4_ATI = 0x8829;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER5_ATI = 0x882A;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER6_ATI = 0x882B;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER7_ATI = 0x882C;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER8_ATI = 0x882D;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER9_ATI = 0x882E;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER10_ATI = 0x882F;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER11_ATI = 0x8830;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER12_ATI = 0x8831;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER13_ATI = 0x8832;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER14_ATI = 0x8833;
  /** Part of <code>GL_ATI_draw_buffers</code> */
  public static final int GL_DRAW_BUFFER15_ATI = 0x8834;
  /** Part of <code>GL_ATI_pixel_format_float</code> */
  public static final int GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
  /** Part of <code>GL_ATI_pixel_format_float</code> */
  public static final int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGBA_FLOAT32_ATI = 0x8814;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGB_FLOAT32_ATI = 0x8815;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_ALPHA_FLOAT32_ATI = 0x8816;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_INTENSITY_FLOAT32_ATI = 0x8817;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_FLOAT32_ATI = 0x8818;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGBA_FLOAT16_ATI = 0x881A;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_RGB_FLOAT16_ATI = 0x881B;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_ALPHA_FLOAT16_ATI = 0x881C;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_INTENSITY_FLOAT16_ATI = 0x881D;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_FLOAT16_ATI = 0x881E;
  /** Part of <code>GL_ATI_texture_float</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R_NV = 0x8880;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG_NV = 0x8881;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB_NV = 0x8882;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA_NV = 0x8883;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R16_NV = 0x8884;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_R32_NV = 0x8885;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG16_NV = 0x8886;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RG32_NV = 0x8887;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB16_NV = 0x8888;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGB32_NV = 0x8889;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA16_NV = 0x888A;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA32_NV = 0x888B;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
  /** Part of <code>GL_NV_float_buffer</code> */
  public static final int GL_FLOAT_RGBA_MODE_NV = 0x888E;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
  /** Part of <code>GL_NV_pixel_data_range</code> */
  public static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
  /** Part of <code>GL_NV_primitive_restart</code> */
  public static final int GL_PRIMITIVE_RESTART_NV = 0x8558;
  /** Part of <code>GL_NV_primitive_restart</code> */
  public static final int GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
  /** Part of <code>GL_NV_texture_expand_normal</code> */
  public static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
  /** Part of <code>GL_EXT_depth_bounds_test</code> */
  public static final int GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
  /** Part of <code>GL_EXT_depth_bounds_test</code> */
  public static final int GL_DEPTH_BOUNDS_EXT = 0x8891;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_EXT = 0x8742;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
  /** Part of <code>GL_EXT_texture_mirror_clamp</code> */
  public static final int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
  /** Part of <code>GL_EXT_pixel_buffer_object</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
  /** Part of <code>GL_EXT_stencil_clear_tag</code> */
  public static final int GL_STENCIL_TAG_BITS_EXT = 0x88F2;
  /** Part of <code>GL_EXT_stencil_clear_tag</code> */
  public static final int GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
  /** Part of <code>GL_EXT_timer_query</code> */
  public static final int GL_TIME_ELAPSED_EXT = 0x88BF;
  /** Part of <code>GL_APPLE_flush_buffer_range</code> */
  public static final int GL_BUFFER_SERIALIZED_MODIFY = 0x8A12;
  /** Part of <code>GL_APPLE_flush_buffer_range</code> */
  public static final int GL_BUFFER_FLUSHING_UNMAP = 0x8A13;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
  /** Part of <code>GL_NV_gpu_program4</code> */
  public static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_LINES_ADJACENCY_EXT = 0x000A;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_GEOMETRY_PROGRAM_NV = 0x8C26;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
  /** Part of <code>GL_NV_geometry_program4</code> */
  public static final int GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
  /** Part of <code>GL_NV_vertex_program4</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
  /** Part of <code>GL_EXT_texture_array</code> */
  public static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE = 0x884E;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
  /** Part of <code>GL_EXT_texture_compression_latc</code> */
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
  /** Part of <code>GL_NV_framebuffer_multisample_coverage</code> */
  public static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
  /** Part of <code>GL_NV_parameter_buffer_object</code> */
  public static final int GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_UNIFORM_BUFFER_EXT = 0x8DEE;
  /** Part of <code>GL_EXT_bindable_uniform</code> */
  public static final int GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA32UI = 0x8D72;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY32UI = 0x8D73;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE32UI = 0x8D74;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA32UI = 0x8D75;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA16UI = 0x8D78;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY16UI = 0x8D79;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE16UI = 0x8D7A;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA16UI = 0x8D7B;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA8UI = 0x8D7E;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY8UI = 0x8D7F;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE8UI = 0x8D80;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA8UI = 0x8D81;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA32I = 0x8D84;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY32I = 0x8D85;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE32I = 0x8D86;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA32I = 0x8D87;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA16I = 0x8D8A;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY16I = 0x8D8B;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE16I = 0x8D8C;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA16I = 0x8D8D;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_ALPHA8I = 0x8D90;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_INTENSITY8I = 0x8D91;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE8I = 0x8D92;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA8I = 0x8D93;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_INTEGER = 0x8D9C;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_LUMINANCE_ALPHA_INTEGER = 0x8D9D;
  /** Part of <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA_INTEGER_MODE = 0x8D9E;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_PROGRAM_MATRIX_EXT = 0x8E2D;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
  /** Part of <code>GL_EXT_direct_state_access</code> */
  public static final int GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
  /** Part of <code>GL_EXT_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_POSITION_NV = 0x8E50;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_MASK_NV = 0x8E51;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
  /** Part of <code>GL_NV_explicit_multisample</code> */
  public static final int GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
  /** Part of <code>GL_NV_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
  /** Part of <code>GL_ATI_meminfo</code> */
  public static final int GL_VBO_FREE_MEMORY_ATI = 0x87FB;
  /** Part of <code>GL_ATI_meminfo</code> */
  public static final int GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
  /** Part of <code>GL_ATI_meminfo</code> */
  public static final int GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_COUNTER_TYPE_AMD = 0x8BC0;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_COUNTER_RANGE_AMD = 0x8BC1;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_UNSIGNED_INT64_AMD = 0x8BC2;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERCENTAGE_AMD = 0x8BC3;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
  /** Part of <code>GL_AMD_performance_monitor</code> */
  public static final int GL_PERFMON_RESULT_AMD = 0x8BC6;
  /** Part of <code>GL_EXT_provoking_vertex</code> */
  public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
  /** Part of <code>GL_EXT_provoking_vertex</code> */
  public static final int GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
  /** Part of <code>GL_EXT_provoking_vertex</code> */
  public static final int GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
  /** Part of <code>GL_EXT_provoking_vertex</code> */
  public static final int GL_PROVOKING_VERTEX_EXT = 0x8E4F;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_ALPHA_SNORM = 0x9010;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE_SNORM = 0x9011;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE_ALPHA_SNORM = 0x9012;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_INTENSITY_SNORM = 0x9013;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_ALPHA8_SNORM = 0x9014;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE8_SNORM = 0x9015;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_INTENSITY8_SNORM = 0x9017;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_ALPHA16_SNORM = 0x9018;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE16_SNORM = 0x9019;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_INTENSITY16_SNORM = 0x901B;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
  /** Part of <code>GL_APPLE_texture_range</code> */
  public static final int GL_STORAGE_PRIVATE_APPLE = 0x85BD;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_HALF_APPLE = 0x140B;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGBA_FLOAT32_APPLE = 0x8814;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGB_FLOAT32_APPLE = 0x8815;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_ALPHA_FLOAT32_APPLE = 0x8816;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_INTENSITY_FLOAT32_APPLE = 0x8817;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGBA_FLOAT16_APPLE = 0x881A;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_RGB_FLOAT16_APPLE = 0x881B;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_ALPHA_FLOAT16_APPLE = 0x881C;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_INTENSITY_FLOAT16_APPLE = 0x881D;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
  /** Part of <code>GL_APPLE_float_pixels</code> */
  public static final int GL_COLOR_FLOAT_APPLE = 0x8A0F;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
  /** Part of <code>GL_APPLE_vertex_program_evaluators</code> */
  public static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
  /** Part of <code>GL_APPLE_aux_depth_stencil</code> */
  public static final int GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_BUFFER_OBJECT_APPLE = 0x85B3;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_RELEASED_APPLE = 0x8A19;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_VOLATILE_APPLE = 0x8A1A;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_RETAINED_APPLE = 0x8A1B;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_UNDEFINED_APPLE = 0x8A1C;
  /** Part of <code>GL_APPLE_object_purgeable</code> */
  public static final int GL_PURGEABLE_APPLE = 0x8A1D;
  /** Part of <code>GL_APPLE_row_bytes</code> */
  public static final int GL_PACK_ROW_BYTES_APPLE = 0x8A15;
  /** Part of <code>GL_APPLE_row_bytes</code> */
  public static final int GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
  /** Part of <code>GL_APPLE_rgb_422</code> */
  public static final int GL_RGB_422_APPLE = 0x8A1F;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_BUFFER_NV = 0x9020;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_FIELD_UPPER_NV = 0x9022;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_FIELD_LOWER_NV = 0x9023;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_PARTIAL_SUCCESS_NV = 0x902E;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_SUCCESS_NV = 0x902F;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_FAILURE_NV = 0x9030;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_YCBYCR8_422_NV = 0x9031;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_YCBAYCR8A_4224_NV = 0x9032;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
  /** Part of <code>GL_NV_video_capture</code> */
  public static final int GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
  /** Part of <code>GL_NV_gpu_program5</code> */
  public static final int GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
  /** Part of <code>GL_NV_shader_buffer_store</code> */
  public static final int GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
  /** Part of <code>GL_NV_tessellation_program5</code> */
  public static final int GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
  /** Part of <code>GL_NV_tessellation_program5</code> */
  public static final int GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
  /** Part of <code>GL_NV_tessellation_program5</code> */
  public static final int GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
  /** Part of <code>GL_NV_tessellation_program5</code> */
  public static final int GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
  /** Part of <code>GL_NV_tessellation_program5</code> */
  public static final int GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
  /** Part of <code>GL_NV_multisample_coverage</code> */
  public static final int GL_COVERAGE_SAMPLES_NV = 0x80A9;
  /** Part of <code>GL_NV_multisample_coverage</code> */
  public static final int GL_COLOR_SAMPLES_NV = 0x8E20;
  /** Part of <code>GL_AMD_name_gen_delete</code> */
  public static final int GL_DATA_BUFFER_AMD = 0x9151;
  /** Part of <code>GL_AMD_name_gen_delete</code> */
  public static final int GL_PERFORMANCE_MONITOR_AMD = 0x9152;
  /** Part of <code>GL_AMD_name_gen_delete</code> */
  public static final int GL_QUERY_OBJECT_AMD = 0x9153;
  /** Part of <code>GL_AMD_name_gen_delete</code> */
  public static final int GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
  /** Part of <code>GL_AMD_name_gen_delete</code> */
  public static final int GL_SAMPLER_OBJECT_AMD = 0x9155;
  /** Part of <code>GL_NV_vdpau_interop</code> */
  public static final int GL_SURFACE_STATE_NV = 0x86EB;
  /** Part of <code>GL_NV_vdpau_interop</code> */
  public static final int GL_SURFACE_REGISTERED_NV = 0x86FD;
  /** Part of <code>GL_NV_vdpau_interop</code> */
  public static final int GL_SURFACE_MAPPED_NV = 0x8700;
  /** Part of <code>GL_NV_vdpau_interop</code> */
  public static final int GL_WRITE_DISCARD_NV = 0x88BE;
  /** Part of <code>GL_EXT_Cg_shader</code> */
  public static final int GL_CG_VERTEX_SHADER_EXT = 0x890E;
  /** Part of <code>GL_EXT_Cg_shader</code> */
  public static final int GL_CG_FRAGMENT_SHADER_EXT = 0x890F;
  /** Part of <code>GL_APPLE_pixel_buffer</code> */
  public static final int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 0x8A10;

  /** Entry point to C language function: <code> void {@native glAccum}(GLenum op, GLfloat value); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glAccum(int op, float value);

  /** Entry point to C language function: <code> void {@native glActiveStencilFaceEXT}(GLenum face); </code> <br>Part of <code>GL_EXT_stencil_two_side</code>   */
  public void glActiveStencilFaceEXT(int face);

  /** Entry point to C language function: <code> void {@native glApplyTextureEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glApplyTextureEXT(int mode);

  /** Entry point to C language function: <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}
      @param residences a direct or array-backed {@link java.nio.ByteBuffer}   */
  public boolean glAreTexturesResident(int n, IntBuffer textures, ByteBuffer residences);

  /** Entry point to C language function: <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public boolean glAreTexturesResident(int n, int[] textures, int textures_offset, byte[] residences, int residences_offset);

  /** Entry point to C language function: <code> void {@native glArrayElement}(GLint i); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glArrayElement(int i);

  /** Entry point to C language function: <code> void {@native glAttachObjectARB}(GLhandleARB containerObj, GLhandleARB obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glAttachObjectARB(int containerObj, int obj);

  /** Entry point to C language function: <code> void {@native glBegin}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBegin(int mode);

  /** Entry point to C language function: <code> void {@native glBeginOcclusionQueryNV}(GLuint id); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glBeginOcclusionQueryNV(int id);

  /** Entry point to C language function: <code> void {@native glBeginPerfMonitorAMD}(GLuint monitor); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glBeginPerfMonitorAMD(int monitor);

  /** Entry point to C language function: <code> void {@native glBeginVertexShaderEXT}(void); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glBeginVertexShaderEXT();

  /** Entry point to C language function: <code> void {@native glBeginVideoCaptureNV}(GLuint video_capture_slot); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glBeginVideoCaptureNV(int video_capture_slot);

  /** Entry point to C language function: <code> void {@native glBindBufferOffsetEXT}(GLenum target, GLuint index, GLuint buffer, GLintptr offset); </code> <br>Part of <code>GL_EXT_transform_feedback</code>   */
  public void glBindBufferOffset(int target, int index, int buffer, long offset);

  /** Entry point to C language function: <code> GLuint {@native glBindLightParameterEXT}(GLenum light, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindLightParameterEXT(int light, int value);

  /** Entry point to C language function: <code> GLuint {@native glBindMaterialParameterEXT}(GLenum face, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindMaterialParameterEXT(int face, int value);

  /** Entry point to C language function: <code> void {@native glBindMultiTextureEXT}(GLenum texunit, GLenum target, GLuint texture); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glBindMultiTextureEXT(int texunit, int target, int texture);

  /** Entry point to C language function: <code> GLuint {@native glBindParameterEXT}(GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindParameterEXT(int value);

  /** Entry point to C language function: <code> void {@native glBindProgramARB}(GLenum target, GLuint program); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glBindProgramARB(int target, int program);

  /** Entry point to C language function: <code> GLuint {@native glBindTexGenParameterEXT}(GLenum unit, GLenum coord, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindTexGenParameterEXT(int unit, int coord, int value);

  /** Entry point to C language function: <code> GLuint {@native glBindTextureUnitParameterEXT}(GLenum unit, GLenum value); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glBindTextureUnitParameterEXT(int unit, int value);

  /** Entry point to C language function: <code> void {@native glBindTransformFeedbackNV}(GLenum target, GLuint id); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glBindTransformFeedbackNV(int target, int id);

  /** Entry point to C language function: <code> void {@native glBindVertexShaderEXT}(GLuint id); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glBindVertexShaderEXT(int id);

  /** Entry point to C language function: <code> void {@native glBindVideoCaptureStreamBufferNV}(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glBindVideoCaptureStreamBufferNV(int video_capture_slot, int stream, int frame_region, long offset);

  /** Entry point to C language function: <code> void {@native glBindVideoCaptureStreamTextureNV}(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glBindVideoCaptureStreamTextureNV(int video_capture_slot, int stream, int frame_region, int target, int texture);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param bitmap a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ByteBuffer bitmap);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap, int bitmap_offset);

  /** Entry point to C language function: <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, long bitmap_buffer_offset);

  /** Entry point to C language function: <code> void {@native glBlendEquationIndexedAMD}(GLuint buf, GLenum mode); </code> <br>Part of <code>GL_AMD_draw_buffers_blend</code>   */
  public void glBlendEquationIndexedAMD(int buf, int mode);

  /** Entry point to C language function: <code> void {@native glBlendEquationSeparateIndexedAMD}(GLuint buf, GLenum modeRGB, GLenum modeAlpha); </code> <br>Part of <code>GL_AMD_draw_buffers_blend</code>   */
  public void glBlendEquationSeparateIndexedAMD(int buf, int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFuncIndexedAMD}(GLuint buf, GLenum src, GLenum dst); </code> <br>Part of <code>GL_AMD_draw_buffers_blend</code>   */
  public void glBlendFuncIndexedAMD(int buf, int src, int dst);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateINGR}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code> <br>Part of <code>GL_INGR_blend_func_separate</code>   */
  public void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateIndexedAMD}(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha); </code> <br>Part of <code>GL_AMD_draw_buffers_blend</code>   */
  public void glBlendFuncSeparateIndexedAMD(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Entry point to C language function: <code> void {@native glBufferParameteriAPPLE}(GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_APPLE_flush_buffer_range</code>   */
  public void glBufferParameteri(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glCallList}(GLuint list); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glCallList(int list);

  /** Entry point to C language function: <code> void {@native glCallLists}(GLsizei n, GLenum type, const GLvoid *  lists); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param lists a direct or array-backed {@link java.nio.Buffer}   */
  public void glCallLists(int n, int type, Buffer lists);

  /** Entry point to C language function: <code> GLenum {@native glCheckNamedFramebufferStatusEXT}(GLuint framebuffer, GLenum target); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public int glCheckNamedFramebufferStatusEXT(int framebuffer, int target);

  /** Entry point to C language function: <code> void {@native glClearAccum}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glClearAccum(float red, float green, float blue, float alpha);

  /** Entry point to C language function: <code> void {@native glClearColorIiEXT}(GLint red, GLint green, GLint blue, GLint alpha); </code> <br>Part of <code>GL_EXT_texture_integer</code>   */
  public void glClearColorIi(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glClearColorIuiEXT}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code> <br>Part of <code>GL_EXT_texture_integer</code>   */
  public void glClearColorIui(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glClearIndex}(GLfloat c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glClearIndex(float c);

  /** Entry point to C language function: <code> void {@native glClientAttribDefaultEXT}(GLbitfield mask); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glClientAttribDefaultEXT(int mask);

  /** Entry point to C language function: <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param equation a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glClipPlane(int plane, DoubleBuffer equation);

  /** Entry point to C language function: <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glClipPlane(int plane, double[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3b(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glColor3bv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3bv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3d(double red, double green, double blue);

  /** Entry point to C language function: <code> void {@native glColor3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glColor3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3f(float red, float green, float blue);

  /** Entry point to C language function: <code> void {@native glColor3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glColor3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor3hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3i}(GLint red, GLint green, GLint blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3i(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColor3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3s}(GLshort red, GLshort green, GLshort blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3s(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3ub(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glColor3ubv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3ubv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3ui}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3ui(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColor3uiv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3uiv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor3us}(GLushort red, GLushort green, GLushort blue); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3us(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor3usv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor3usv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4b}(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4b(byte red, byte green, byte blue, byte alpha);

  /** Entry point to C language function: <code> void {@native glColor4bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glColor4bv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4bv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4d}(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4d(double red, double green, double blue, double alpha);

  /** Entry point to C language function: <code> void {@native glColor4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glColor4dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glColor4fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor4h(short red, short green, short blue, short alpha);

  /** Entry point to C language function: <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor4hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glColor4hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4i}(GLint red, GLint green, GLint blue, GLint alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4i(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glColor4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColor4iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4s}(GLshort red, GLshort green, GLshort blue, GLshort alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4s(short red, short green, short blue, short alpha);

  /** Entry point to C language function: <code> void {@native glColor4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor4sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glColor4ubv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4ubv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4ui}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4ui(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glColor4uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColor4uiv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4uiv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColor4us}(GLushort red, GLushort green, GLushort blue, GLushort alpha); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4us(short red, short green, short blue, short alpha);

  /** Entry point to C language function: <code> void {@native glColor4usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glColor4usv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glColor4usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColor4usv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glColorMaskIndexedEXT}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glColorMaskIndexed(int index, boolean r, boolean g, boolean b, boolean a);

  /** Entry point to C language function: <code> void {@native glColorMaterial}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glColorMaterial(int face, int mode);

  /** Entry point to C language function: <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glColorSubTable(int target, int start, int count, int format, int type, Buffer data);

  /** Entry point to C language function: <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glColorSubTable(int target, int start, int count, int format, int type, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param table a direct or array-backed {@link java.nio.Buffer}   */
  public void glColorTable(int target, int internalformat, int width, int format, int type, Buffer table);

  /** Entry point to C language function: <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glColorTable(int target, int internalformat, int width, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glColorTableParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColorTableParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCompileShaderARB}(GLhandleARB shaderObj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glCompileShaderARB(int shaderObj);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexImage3DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedMultiTexSubImage3DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureImage3DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glCompressedTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  bits); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bits a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, Buffer bits);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param image a direct or array-backed {@link java.nio.Buffer}   */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, Buffer image);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, long image_buffer_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param image a direct or array-backed {@link java.nio.Buffer}   */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, Buffer image);

  /** Entry point to C language function: <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, long image_buffer_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterf}(GLenum target, GLenum pname, GLfloat params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionParameterf(int target, int pname, float params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glConvolutionParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteri}(GLenum target, GLenum pname, GLint params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionParameteri(int target, int pname, int params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glConvolutionParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCopyColorSubTable}(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glCopyColorSubTable(int target, int start, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyColorTable}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glCopyColorTable(int target, int internalformat, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyConvolutionFilter1D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyConvolutionFilter2D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyImageSubDataNV}(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth); </code> <br>Part of <code>GL_NV_copy_image</code>   */
  public void glCopyImageSubDataNV(int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyMultiTexSubImage3DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glCopyPixels(int x, int y, int width, int height, int type);

  /** Entry point to C language function: <code> void {@native glCopyTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureImage1DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureImage2DEXT(int texture, int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> void {@native glCopyTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glCopyTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point to C language function: <code> GLhandleARB {@native glCreateProgramObjectARB}(void); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glCreateProgramObjectARB();

  /** Entry point to C language function: <code> GLhandleARB {@native glCreateShaderObjectARB}(GLenum shaderType); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glCreateShaderObjectARB(int shaderType);

  /** Entry point to C language function: <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glCullParameterdvEXT(int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterdvEXT(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glCullParameterfvEXT(int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_cull_vertex</code>   */
  public void glCullParameterfvEXT(int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  fences); </code> <br>Part of <code>GL_APPLE_fence</code>
      @param fences a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteFencesAPPLE(int n, IntBuffer fences);

  /** Entry point to C language function: <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  fences); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glDeleteFencesAPPLE(int n, int[] fences, int fences_offset);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  fences); </code> <br>Part of <code>GL_NV_fence</code>
      @param fences a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteFencesNV(int n, IntBuffer fences);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  fences); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glDeleteFencesNV(int n, int[] fences, int fences_offset);

  /** Entry point to C language function: <code> void {@native glDeleteLists}(GLuint list, GLsizei range); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDeleteLists(int list, int range);

  /** Entry point to C language function: <code> void {@native glDeleteNamesAMD}(GLenum identifier, GLuint num, const GLuint *  names); </code> <br>Part of <code>GL_AMD_name_gen_delete</code>
      @param names a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteNamesAMD(int identifier, int num, IntBuffer names);

  /** Entry point to C language function: <code> void {@native glDeleteNamesAMD}(GLenum identifier, GLuint num, const GLuint *  names); </code> <br>Part of <code>GL_AMD_name_gen_delete</code>   */
  public void glDeleteNamesAMD(int identifier, int num, int[] names, int names_offset);

  /** Entry point to C language function: <code> void {@native glDeleteObjectARB}(GLhandleARB obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glDeleteObjectARB(int obj);

  /** Entry point to C language function: <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteOcclusionQueriesNV(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glDeleteOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeletePerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param monitors a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeletePerfMonitorsAMD(int n, IntBuffer monitors);

  /** Entry point to C language function: <code> void {@native glDeletePerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glDeletePerfMonitorsAMD(int n, int[] monitors, int monitors_offset);

  /** Entry point to C language function: <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  programs); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param programs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteProgramsARB(int n, IntBuffer programs);

  /** Entry point to C language function: <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  programs); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glDeleteProgramsARB(int n, int[] programs, int programs_offset);

  /** Entry point to C language function: <code> void {@native glDeleteTransformFeedbacksNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_transform_feedback2</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteTransformFeedbacksNV(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteTransformFeedbacksNV}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glDeleteTransformFeedbacksNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexShaderEXT}(GLuint id); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glDeleteVertexShaderEXT(int id);

  /** Entry point to C language function: <code> void {@native glDepthBoundsEXT}(GLclampd zmin, GLclampd zmax); </code> <br>Part of <code>GL_EXT_depth_bounds_test</code>   */
  public void glDepthBoundsEXT(double zmin, double zmax);

  /** Entry point to C language function: <code> void {@native glDetachObjectARB}(GLhandleARB containerObj, GLhandleARB attachedObj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glDetachObjectARB(int containerObj, int attachedObj);

  /** Entry point to C language function: <code> void {@native glDisableClientStateIndexedEXT}(GLenum array, GLuint index); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glDisableClientStateIndexedEXT(int array, int index);

  /** Entry point to C language function: <code> void {@native glDisableIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glDisableIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glDisableVariantClientStateEXT}(GLuint id); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glDisableVariantClientStateEXT(int id);

  /** Entry point to C language function: <code> void {@native glDisableVertexAttribAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glDisableVertexAttribAPPLE(int index, int pname);

  /** Entry point to C language function: <code> void {@native glDisableVertexAttribArrayARB}(GLuint index); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glDisableVertexAttribArrayARB(int index);

  /** Entry point to C language function: <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_ATI_draw_buffers</code>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawBuffersATI(int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_ATI_draw_buffers</code>   */
  public void glDrawBuffersATI(int n, int[] bufs, int bufs_offset);

  /** Entry point to C language function: <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawPixels(int width, int height, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawPixels(int width, int height, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackNV}(GLenum mode, GLuint id); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glDrawTransformFeedbackNV(int mode, int id);

  /** Entry point to C language function: <code> void {@native glEdgeFlag}(GLboolean flag); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEdgeFlag(boolean flag);

  /** Entry point to C language function: <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}   */
  public void glEdgeFlagPointer(int stride, Buffer ptr);

  /** Entry point to C language function: <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glEdgeFlagPointer(int stride, long ptr_buffer_offset);

  /** Entry point to C language function: <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param flag a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glEdgeFlagv(ByteBuffer flag);

  /** Entry point to C language function: <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEdgeFlagv(byte[] flag, int flag_offset);

  /** Entry point to C language function: <code> void {@native glEnableClientStateIndexedEXT}(GLenum array, GLuint index); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glEnableClientStateIndexedEXT(int array, int index);

  /** Entry point to C language function: <code> void {@native glEnableIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glEnableIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glEnableVariantClientStateEXT}(GLuint id); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glEnableVariantClientStateEXT(int id);

  /** Entry point to C language function: <code> void {@native glEnableVertexAttribAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glEnableVertexAttribAPPLE(int index, int pname);

  /** Entry point to C language function: <code> void {@native glEnableVertexAttribArrayARB}(GLuint index); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glEnableVertexAttribArrayARB(int index);

  /** Entry point to C language function: <code> void {@native glEnd}(void); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEnd();

  /** Entry point to C language function: <code> void {@native glEndList}(void); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEndList();

  /** Entry point to C language function: <code> void {@native glEndOcclusionQueryNV}(void); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glEndOcclusionQueryNV();

  /** Entry point to C language function: <code> void {@native glEndPerfMonitorAMD}(GLuint monitor); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glEndPerfMonitorAMD(int monitor);

  /** Entry point to C language function: <code> void {@native glEndVertexShaderEXT}(void); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glEndVertexShaderEXT();

  /** Entry point to C language function: <code> void {@native glEndVideoCaptureNV}(GLuint video_capture_slot); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glEndVideoCaptureNV(int video_capture_slot);

  /** Entry point to C language function: <code> void {@native glEvalCoord1d}(GLdouble u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord1d(double u);

  /** Entry point to C language function: <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param u a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glEvalCoord1dv(DoubleBuffer u);

  /** Entry point to C language function: <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord1dv(double[] u, int u_offset);

  /** Entry point to C language function: <code> void {@native glEvalCoord1f}(GLfloat u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord1f(float u);

  /** Entry point to C language function: <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param u a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glEvalCoord1fv(FloatBuffer u);

  /** Entry point to C language function: <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord1fv(float[] u, int u_offset);

  /** Entry point to C language function: <code> void {@native glEvalCoord2d}(GLdouble u, GLdouble v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord2d(double u, double v);

  /** Entry point to C language function: <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param u a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glEvalCoord2dv(DoubleBuffer u);

  /** Entry point to C language function: <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord2dv(double[] u, int u_offset);

  /** Entry point to C language function: <code> void {@native glEvalCoord2f}(GLfloat u, GLfloat v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord2f(float u, float v);

  /** Entry point to C language function: <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param u a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glEvalCoord2fv(FloatBuffer u);

  /** Entry point to C language function: <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalCoord2fv(float[] u, int u_offset);

  /** Entry point to C language function: <code> void {@native glEvalMapsNV}(GLenum target, GLenum mode); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glEvalMapsNV(int target, int mode);

  /** Entry point to C language function: <code> void {@native glEvalMesh1}(GLenum mode, GLint i1, GLint i2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalMesh1(int mode, int i1, int i2);

  /** Entry point to C language function: <code> void {@native glEvalMesh2}(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);

  /** Entry point to C language function: <code> void {@native glEvalPoint1}(GLint i); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalPoint1(int i);

  /** Entry point to C language function: <code> void {@native glEvalPoint2}(GLint i, GLint j); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glEvalPoint2(int i, int j);

  /** Entry point to C language function: <code> void {@native glExtractComponentEXT}(GLuint res, GLuint src, GLuint num); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glExtractComponentEXT(int res, int src, int num);

  /** Entry point to C language function: <code> void {@native glFeedbackBuffer}(GLsizei size, GLenum type, GLfloat *  buffer); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param buffer a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glFeedbackBuffer(int size, int type, FloatBuffer buffer);

  /** Entry point to C language function: <code> void {@native glFeedbackBuffer}(GLsizei size, GLenum type, GLfloat *  buffer); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glFeedbackBuffer(int size, int type, float[] buffer, int buffer_offset);

  /** Entry point to C language function: <code> void {@native glFinishFenceAPPLE}(GLuint fence); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glFinishFenceAPPLE(int fence);

  /** Entry point to C language function: <code> void {@native glFinishFenceNV}(GLuint fence); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glFinishFenceNV(int fence);

  /** Entry point to C language function: <code> void {@native glFinishObjectAPPLE}(GLenum object, GLint name); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glFinishObjectAPPLE(int object, int name);

  /** Entry point to C language function: <code> void {@native glFinishRenderAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glFinishRenderAPPLE();

  /** Entry point to C language function: <code> void {@native glFinishTextureSUNX}(void); </code> <br>Part of <code>GL_SUNX_constant_data</code>   */
  public void glFinishTextureSUNX();

  /** Entry point to C language function: <code> void {@native glFlushMappedNamedBufferRangeEXT}(GLuint buffer, GLintptr offset, GLsizeiptr length); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFlushMappedNamedBufferRangeEXT(int buffer, long offset, long length);

  /** Entry point to C language function: <code> void {@native glFlushPixelDataRangeNV}(GLenum target); </code> <br>Part of <code>GL_NV_pixel_data_range</code>   */
  public void glFlushPixelDataRangeNV(int target);

  /** Entry point to C language function: <code> void {@native glFlushRenderAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glFlushRenderAPPLE();

  /** Entry point to C language function: <code> void {@native glFlushVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glFlushVertexArrayRangeAPPLE(int length, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glFlushVertexArrayRangeNV}(void); </code> <br>Part of <code>GL_NV_vertex_array_range</code>   */
  public void glFlushVertexArrayRangeNV();

  /** Entry point to C language function: <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glFogCoordPointer(int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glFogCoordPointer(int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordd}(GLdouble coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glFogCoordd(double coord);

  /** Entry point to C language function: <code> void {@native glFogCoorddv}(const GLdouble *  coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param coord a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glFogCoorddv(DoubleBuffer coord);

  /** Entry point to C language function: <code> void {@native glFogCoorddv}(const GLdouble *  coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glFogCoorddv(double[] coord, int coord_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordf}(GLfloat coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glFogCoordf(float coord);

  /** Entry point to C language function: <code> void {@native glFogCoordfv}(const GLfloat *  coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param coord a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glFogCoordfv(FloatBuffer coord);

  /** Entry point to C language function: <code> void {@native glFogCoordfv}(const GLfloat *  coord); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glFogCoordfv(float[] coord, int coord_offset);

  /** Entry point to C language function: <code> void {@native glFogCoordhNV}(GLhalfNV fog); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glFogCoordh(short fog);

  /** Entry point to C language function: <code> void {@native glFogCoordhvNV}(const GLhalfNV *  fog); </code> <br>Part of <code>GL_NV_half_float</code>
      @param fog a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glFogCoordhv(ShortBuffer fog);

  /** Entry point to C language function: <code> void {@native glFogCoordhvNV}(const GLhalfNV *  fog); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glFogCoordhv(short[] fog, int fog_offset);

  /** Entry point to C language function: <code> void {@native glFogi}(GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glFogi(int pname, int param);

  /** Entry point to C language function: <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glFogiv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glFogiv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glFrameTerminatorGREMEDY}(void); </code> <br>Part of <code>GL_GREMEDY_frame_terminator</code>   */
  public void glFrameTerminatorGREMEDY();

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBufferEXT}(GLuint framebuffer, GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferDrawBufferEXT(int framebuffer, int mode);

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBuffersEXT}(GLuint framebuffer, GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glFramebufferDrawBuffersEXT(int framebuffer, int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glFramebufferDrawBuffersEXT}(GLuint framebuffer, GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferDrawBuffersEXT(int framebuffer, int n, int[] bufs, int bufs_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferReadBufferEXT}(GLuint framebuffer, GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glFramebufferReadBufferEXT(int framebuffer, int mode);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_NV_geometry_program4</code>   */
  public void glFramebufferTextureEXT(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureFaceEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_NV_geometry_program4</code>   */
  public void glFramebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayerEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer); </code> <br>Part of <code>GL_NV_geometry_program4</code>   */
  public void glFramebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  fences); </code> <br>Part of <code>GL_APPLE_fence</code>
      @param fences a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenFencesAPPLE(int n, IntBuffer fences);

  /** Entry point to C language function: <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  fences); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glGenFencesAPPLE(int n, int[] fences, int fences_offset);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  fences); </code> <br>Part of <code>GL_NV_fence</code>
      @param fences a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenFencesNV(int n, IntBuffer fences);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  fences); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGenFencesNV(int n, int[] fences, int fences_offset);

  /** Entry point to C language function: <code> GLuint {@native glGenLists}(GLsizei range); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public int glGenLists(int range);

  /** Entry point to C language function: <code> void {@native glGenNamesAMD}(GLenum identifier, GLuint num, GLuint *  names); </code> <br>Part of <code>GL_AMD_name_gen_delete</code>
      @param names a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenNamesAMD(int identifier, int num, IntBuffer names);

  /** Entry point to C language function: <code> void {@native glGenNamesAMD}(GLenum identifier, GLuint num, GLuint *  names); </code> <br>Part of <code>GL_AMD_name_gen_delete</code>   */
  public void glGenNamesAMD(int identifier, int num, int[] names, int names_offset);

  /** Entry point to C language function: <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenOcclusionQueriesNV(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGenOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGenPerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param monitors a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenPerfMonitorsAMD(int n, IntBuffer monitors);

  /** Entry point to C language function: <code> void {@native glGenPerfMonitorsAMD}(GLsizei n, GLuint *  monitors); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGenPerfMonitorsAMD(int n, int[] monitors, int monitors_offset);

  /** Entry point to C language function: <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  programs); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param programs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenProgramsARB(int n, IntBuffer programs);

  /** Entry point to C language function: <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  programs); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGenProgramsARB(int n, int[] programs, int programs_offset);

  /** Entry point to C language function: <code> GLuint {@native glGenSymbolsEXT}(GLenum datatype, GLenum storagetype, GLenum range, GLuint components); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glGenSymbolsEXT(int datatype, int storagetype, int range, int components);

  /** Entry point to C language function: <code> void {@native glGenTransformFeedbacksNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_transform_feedback2</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenTransformFeedbacksNV(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenTransformFeedbacksNV}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glGenTransformFeedbacksNV(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> GLuint {@native glGenVertexShadersEXT}(GLuint range); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public int glGenVertexShadersEXT(int range);

  /** Entry point to C language function: <code> void {@native glGenerateMultiTexMipmapEXT}(GLenum texunit, GLenum target); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGenerateMultiTexMipmapEXT(int texunit, int target);

  /** Entry point to C language function: <code> void {@native glGenerateTextureMipmapEXT}(GLuint texture, GLenum target); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGenerateTextureMipmapEXT(int texture, int target);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformARB}(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param size a direct or array-backed {@link java.nio.IntBuffer}
      @param type a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniformARB(int programObj, int index, int maxLength, IntBuffer length, IntBuffer size, IntBuffer type, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformARB}(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetActiveUniformARB(int programObj, int index, int maxLength, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetAttachedObjectsARB}(GLhandleARB containerObj, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param count a direct or array-backed {@link java.nio.IntBuffer}
      @param obj a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetAttachedObjectsARB(int containerObj, int maxCount, IntBuffer count, IntBuffer obj);

  /** Entry point to C language function: <code> void {@native glGetAttachedObjectsARB}(GLhandleARB containerObj, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetAttachedObjectsARB(int containerObj, int maxCount, int[] count, int count_offset, int[] obj, int obj_offset);

  /** Entry point to C language function: <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetBooleanIndexedv(int target, int index, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetBooleanIndexedv(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param equation a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetClipPlane(int plane, DoubleBuffer equation);

  /** Entry point to C language function: <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetClipPlane(int plane, double[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param table a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetColorTable(int target, int format, int type, Buffer table);

  /** Entry point to C language function: <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetColorTable(int target, int format, int type, long table_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetColorTableParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetColorTableParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetCompressedMultiTexImageEXT}(GLenum texunit, GLenum target, GLint lod, GLvoid *  img); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedMultiTexImageEXT(int texunit, int target, int lod, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTextureImageEXT}(GLuint texture, GLenum target, GLint lod, GLvoid *  img); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTextureImageEXT(int texture, int target, int lod, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param image a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetConvolutionFilter(int target, int format, int type, Buffer image);

  /** Entry point to C language function: <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  image); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetConvolutionFilter(int target, int format, int type, long image_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetConvolutionParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetConvolutionParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetDoubleIndexedvEXT}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param data a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoubleIndexedvEXT(int target, int index, DoubleBuffer data);

  /** Entry point to C language function: <code> void {@native glGetDoubleIndexedvEXT}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetDoubleIndexedvEXT(int target, int index, double[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint fence, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFenceivNV(int fence, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint fence, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGetFenceivNV(int fence, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFloatIndexedvEXT}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetFloatIndexedvEXT(int target, int index, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetFloatIndexedvEXT}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFloatIndexedvEXT(int target, int index, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameterivEXT}(GLuint framebuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFramebufferParameterivEXT(int framebuffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFramebufferParameterivEXT}(GLuint framebuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetFramebufferParameterivEXT(int framebuffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLhandleARB {@native glGetHandleARB}(GLenum pname); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glGetHandleARB(int pname);

  /** Entry point to C language function: <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param values a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetHistogram(int target, boolean reset, int format, int type, Buffer values);

  /** Entry point to C language function: <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetHistogram(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetHistogramParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetHistogramParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetHistogramParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetHistogramParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetInfoLogARB}(GLhandleARB obj, GLsizei maxLength, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetInfoLogARB(int obj, int maxLength, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetInfoLogARB}(GLhandleARB obj, GLsizei maxLength, GLsizei *  length, GLcharARB *  infoLog); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetInfoLogARB(int obj, int maxLength, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetIntegerIndexedv(int target, int index, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public void glGetIntegerIndexedv(int target, int index, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetInvariantBooleanvEXT(int id, int value, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetInvariantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantBooleanvEXT(int id, int value, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetInvariantFloatvEXT(int id, int value, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetInvariantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantFloatvEXT(int id, int value, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInvariantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetInvariantIntegervEXT(int id, int value, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetInvariantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetInvariantIntegervEXT(int id, int value, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetLightiv(int light, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetLightiv(int light, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetLocalConstantBooleanvEXT(int id, int value, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantBooleanvEXT(int id, int value, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetLocalConstantFloatvEXT(int id, int value, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantFloatvEXT(int id, int value, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetLocalConstantIntegervEXT(int id, int value, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetLocalConstantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetLocalConstantIntegervEXT(int id, int value, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterfvNV}(GLenum target, GLuint index, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMapAttribParameterfvNV(int target, int index, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterfvNV}(GLenum target, GLuint index, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterfvNV(int target, int index, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterivNV}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMapAttribParameterivNV(int target, int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapAttribParameterivNV}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapAttribParameterivNV(int target, int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *  points); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param points a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, boolean packed, Buffer points);

  /** Entry point to C language function: <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMapParameterfvNV(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMapParameterivNV(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glGetMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetMapdv(int target, int query, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetMapdv(int target, int query, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMapfv(int target, int query, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetMapfv(int target, int query, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMapiv(int target, int query, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetMapiv(int target, int query, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMaterialiv(int face, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param values a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetMinmax(int target, boolean reset, int format, int type, Buffer values);

  /** Entry point to C language function: <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetMinmax(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMinmaxParameterfv(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetMinmaxParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMinmaxParameteriv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetMinmaxParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvfvEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvfvEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvfvEXT(int texunit, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexEnvivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexEnvivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexEnvivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGendvEXT}(GLenum texunit, GLenum coord, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetMultiTexGendvEXT(int texunit, int coord, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGendvEXT}(GLenum texunit, GLenum coord, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGendvEXT(int texunit, int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenfvEXT}(GLenum texunit, GLenum coord, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenfvEXT}(GLenum texunit, GLenum coord, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenfvEXT(int texunit, int coord, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenivEXT}(GLenum texunit, GLenum coord, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexGenivEXT(int texunit, int coord, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexGenivEXT}(GLenum texunit, GLenum coord, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexGenivEXT(int texunit, int coord, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexImageEXT}(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetMultiTexImageEXT(int texunit, int target, int level, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterfvEXT}(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterfvEXT}(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterfvEXT(int texunit, int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterivEXT}(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexLevelParameterivEXT}(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexLevelParameterivEXT(int texunit, int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIuivEXT}(GLenum texunit, GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterIuivEXT}(GLenum texunit, GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterIuivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterfvEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterfvEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterfvEXT(int texunit, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMultiTexParameterivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMultiTexParameterivEXT}(GLenum texunit, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetMultiTexParameterivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefvNV}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_NV_explicit_multisample</code>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultisamplefvNV(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefvNV}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_NV_explicit_multisample</code>   */
  public void glGetMultisamplefvNV(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterivEXT}(GLuint buffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedBufferParameterivEXT(int buffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterivEXT}(GLuint buffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedBufferParameterivEXT(int buffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferSubDataEXT}(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetNamedBufferSubDataEXT(int buffer, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameterivEXT}(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedFramebufferAttachmentParameterivEXT(int framebuffer, int attachment, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedFramebufferAttachmentParameterivEXT}(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedFramebufferAttachmentParameterivEXT(int framebuffer, int attachment, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIivEXT}(GLuint program, GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedProgramLocalParameterIivEXT(int program, int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIivEXT}(GLuint program, GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIuivEXT}(GLuint program, GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedProgramLocalParameterIuivEXT(int program, int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterIuivEXT}(GLuint program, GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterIuivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterdvEXT}(GLuint program, GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetNamedProgramLocalParameterdvEXT(int program, int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterdvEXT}(GLuint program, GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterdvEXT(int program, int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterfvEXT}(GLuint program, GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetNamedProgramLocalParameterfvEXT(int program, int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramLocalParameterfvEXT}(GLuint program, GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramLocalParameterfvEXT(int program, int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramStringEXT}(GLuint program, GLenum target, GLenum pname, GLvoid *  string); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param string a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetNamedProgramStringEXT(int program, int target, int pname, Buffer string);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramivEXT}(GLuint program, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedProgramivEXT(int program, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedProgramivEXT}(GLuint program, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedProgramivEXT(int program, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameterivEXT}(GLuint renderbuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedRenderbufferParameterivEXT(int renderbuffer, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedRenderbufferParameterivEXT}(GLuint renderbuffer, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetNamedRenderbufferParameterivEXT(int renderbuffer, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterfvARB}(GLhandleARB obj, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetObjectParameterfvARB(int obj, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterfvARB}(GLhandleARB obj, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterfvARB(int obj, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivAPPLE}(GLenum objectType, GLuint name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_APPLE_object_purgeable</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetObjectParameterivAPPLE(int objectType, int name, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivAPPLE}(GLenum objectType, GLuint name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_APPLE_object_purgeable</code>   */
  public void glGetObjectParameterivAPPLE(int objectType, int name, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivARB}(GLhandleARB obj, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetObjectParameterivARB(int obj, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetObjectParameterivARB}(GLhandleARB obj, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetObjectParameterivARB(int obj, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryivNV}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetOcclusionQueryivNV(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryivNV}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryivNV(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetOcclusionQueryuivNV(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public void glGetOcclusionQueryuivNV(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterDataAMD}(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *  data, GLint *  bytesWritten); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}
      @param bytesWritten a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorCounterDataAMD(int monitor, int pname, int dataSize, IntBuffer data, IntBuffer bytesWritten);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterDataAMD}(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *  data, GLint *  bytesWritten); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCounterDataAMD(int monitor, int pname, int dataSize, int[] data, int data_offset, int[] bytesWritten, int bytesWritten_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterInfoAMD}(GLuint group, GLuint counter, GLenum pname, GLvoid *  data); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetPerfMonitorCounterInfoAMD(int group, int counter, int pname, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterStringAMD}(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *  length, GLchar *  counterString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param counterString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetPerfMonitorCounterStringAMD(int group, int counter, int bufSize, IntBuffer length, ByteBuffer counterString);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCounterStringAMD}(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *  length, GLchar *  counterString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCounterStringAMD(int group, int counter, int bufSize, int[] length, int length_offset, byte[] counterString, int counterString_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCountersAMD}(GLuint group, GLint *  numCounters, GLint *  maxActiveCounters, GLsizei counterSize, GLuint *  counters); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param numCounters a direct or array-backed {@link java.nio.IntBuffer}
      @param maxActiveCounters a direct or array-backed {@link java.nio.IntBuffer}
      @param counters a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorCountersAMD(int group, IntBuffer numCounters, IntBuffer maxActiveCounters, int counterSize, IntBuffer counters);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorCountersAMD}(GLuint group, GLint *  numCounters, GLint *  maxActiveCounters, GLsizei counterSize, GLuint *  counters); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorCountersAMD(int group, int[] numCounters, int numCounters_offset, int[] maxActiveCounters, int maxActiveCounters_offset, int counterSize, int[] counters, int counters_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupStringAMD}(GLuint group, GLsizei bufSize, GLsizei *  length, GLchar *  groupString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param groupString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetPerfMonitorGroupStringAMD(int group, int bufSize, IntBuffer length, ByteBuffer groupString);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupStringAMD}(GLuint group, GLsizei bufSize, GLsizei *  length, GLchar *  groupString); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorGroupStringAMD(int group, int bufSize, int[] length, int length_offset, byte[] groupString, int groupString_offset);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupsAMD}(GLint *  numGroups, GLsizei groupsSize, GLuint *  groups); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param numGroups a direct or array-backed {@link java.nio.IntBuffer}
      @param groups a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPerfMonitorGroupsAMD(IntBuffer numGroups, int groupsSize, IntBuffer groups);

  /** Entry point to C language function: <code> void {@native glGetPerfMonitorGroupsAMD}(GLint *  numGroups, GLsizei groupsSize, GLuint *  groups); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glGetPerfMonitorGroupsAMD(int[] numGroups, int numGroups_offset, int groupsSize, int[] groups, int groups_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetPixelMapfv(int map, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapfv(int map, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapfv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetPixelMapuiv(int map, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapuiv(int map, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapuiv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glGetPixelMapusv(int map, ShortBuffer values);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapusv(int map, short[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPixelMapusv(int map, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param mask a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetPolygonStipple(ByteBuffer mask);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPolygonStipple(byte[] mask, int mask_offset);

  /** Entry point to C language function: <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetPolygonStipple(long mask_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramEnvParameterIivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramEnvParameterIuivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramEnvParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterdvARB}(GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetProgramEnvParameterdvARB(int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterdvARB}(GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterdvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetProgramEnvParameterfvARB(int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramEnvParameterfvARB(int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramLocalParameterIivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramLocalParameterIuivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glGetProgramLocalParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterdvARB}(GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetProgramLocalParameterdvARB(int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterdvARB}(GLenum target, GLuint index, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterdvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetProgramLocalParameterfvARB(int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint index, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramLocalParameterfvARB(int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramStringARB}(GLenum target, GLenum pname, GLvoid *  string); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param string a direct only {@link java.nio.Buffer}   */
  public void glGetProgramStringARB(int target, int pname, Buffer string);

  /** Entry point to C language function: <code> void {@native glGetProgramSubroutineParameteruivNV}(GLenum target, GLuint index, GLuint *  param); </code> <br>Part of <code>GL_NV_gpu_program5</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramSubroutineParameteruivNV(int target, int index, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glGetProgramSubroutineParameteruivNV}(GLenum target, GLuint index, GLuint *  param); </code> <br>Part of <code>GL_NV_gpu_program5</code>   */
  public void glGetProgramSubroutineParameteruivNV(int target, int index, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramivARB(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetProgramivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, GLint64EXT *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjecti64vEXT(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, GLint64EXT *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjecti64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjectui64vEXT(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_EXT_timer_query</code>   */
  public void glGetQueryObjectui64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param row a direct or array-backed {@link java.nio.Buffer}
      @param column a direct or array-backed {@link java.nio.Buffer}
      @param span a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetSeparableFilter(int target, int format, int type, Buffer row, Buffer column, Buffer span);

  /** Entry point to C language function: <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glGetSeparableFilter(int target, int format, int type, long row_buffer_offset, long column_buffer_offset, long span_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetShaderSourceARB}(GLhandleARB obj, GLsizei maxLength, GLsizei *  length, GLcharARB *  source); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param source a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetShaderSourceARB(int obj, int maxLength, IntBuffer length, ByteBuffer source);

  /** Entry point to C language function: <code> void {@native glGetShaderSourceARB}(GLhandleARB obj, GLsizei maxLength, GLsizei *  length, GLcharARB *  source); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetShaderSourceARB(int obj, int maxLength, int[] length, int length_offset, byte[] source, int source_offset);

  /** Entry point to C language function: <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetTexGendv(int coord, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureImageEXT}(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTextureImageEXT(int texture, int target, int level, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfvEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTextureLevelParameterfvEXT(int texture, int target, int level, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterfvEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterfvEXT(int texture, int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterivEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureLevelParameterivEXT(int texture, int target, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureLevelParameterivEXT}(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureLevelParameterivEXT(int texture, int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameterIivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuivEXT}(GLuint texture, GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameterIuivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterIuivEXT}(GLuint texture, GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterIuivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfvEXT}(GLuint texture, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTextureParameterfvEXT(int texture, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterfvEXT}(GLuint texture, GLenum target, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterfvEXT(int texture, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTextureParameterivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glGetTextureParameterivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLint {@native glGetUniformBufferSizeEXT}(GLuint program, GLint location); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public int glGetUniformBufferSizeEXT(int program, int location);

  /** Entry point to C language function: <code> GLint {@native glGetUniformLocationARB}(GLhandleARB programObj, const GLcharARB *  name); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public int glGetUniformLocationARB(int programObj, String name);

  /** Entry point to C language function: <code> GLintptr {@native glGetUniformOffsetEXT}(GLuint program, GLint location); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public long glGetUniformOffsetEXT(int program, int location);

  /** Entry point to C language function: <code> void {@native glGetUniformfvARB}(GLhandleARB programObj, GLint location, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetUniformfvARB(int programObj, int location, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformfvARB}(GLhandleARB programObj, GLint location, GLfloat *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformfvARB(int programObj, int location, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformivARB}(GLhandleARB programObj, GLint location, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformivARB(int programObj, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformivARB}(GLhandleARB programObj, GLint location, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glGetUniformivARB(int programObj, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetVariantBooleanvEXT(int id, int value, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetVariantBooleanvEXT}(GLuint id, GLenum value, GLboolean *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantBooleanvEXT(int id, int value, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetVariantFloatvEXT(int id, int value, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetVariantFloatvEXT}(GLuint id, GLenum value, GLfloat *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantFloatvEXT(int id, int value, float[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetVariantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVariantIntegervEXT(int id, int value, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetVariantIntegervEXT}(GLuint id, GLenum value, GLint *  data); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glGetVariantIntegervEXT(int id, int value, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIivEXT}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribIivEXT(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIivEXT}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glGetVertexAttribIivEXT(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuivEXT}(GLuint index, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribIuivEXT(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuivEXT}(GLuint index, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glGetVertexAttribIuivEXT(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLi64vNV}(GLuint index, GLenum pname, GLint64EXT *  params); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetVertexAttribLi64vNV(int index, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLi64vNV}(GLuint index, GLenum pname, GLint64EXT *  params); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glGetVertexAttribLi64vNV(int index, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLui64vNV}(GLuint index, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetVertexAttribLui64vNV(int index, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLui64vNV}(GLuint index, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glGetVertexAttribLui64vNV(int index, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribdvARB(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfvARB}(GLuint index, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetVertexAttribfvARB(int index, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribfvARB}(GLuint index, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribfvARB(int index, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribivARB}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribivARB(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribivARB}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glGetVertexAttribivARB(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamdvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVideoCaptureStreamdvNV(int video_capture_slot, int stream, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamdvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glGetVideoCaptureStreamdvNV(int video_capture_slot, int stream, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamfvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetVideoCaptureStreamfvNV(int video_capture_slot, int stream, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamfvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glGetVideoCaptureStreamfvNV(int video_capture_slot, int stream, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamivNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVideoCaptureStreamivNV(int video_capture_slot, int stream, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureStreamivNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glGetVideoCaptureStreamivNV(int video_capture_slot, int stream, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureivNV}(GLuint video_capture_slot, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVideoCaptureivNV(int video_capture_slot, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVideoCaptureivNV}(GLuint video_capture_slot, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glGetVideoCaptureivNV(int video_capture_slot, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glHintPGI}(GLenum target, GLint mode); </code> <br>Part of <code>GL_PGI_misc_hints</code>   */
  public void glHintPGI(int target, int mode);

  /** Entry point to C language function: <code> void {@native glHistogram}(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glHistogram(int target, int width, int internalformat, boolean sink);

  /** Entry point to C language function: <code> void {@native glIndexFuncEXT}(GLenum func, GLclampf ref); </code> <br>Part of <code>GL_EXT_index_func</code>   */
  public void glIndexFuncEXT(int func, float ref);

  /** Entry point to C language function: <code> void {@native glIndexMask}(GLuint mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexMask(int mask);

  /** Entry point to C language function: <code> void {@native glIndexMaterialEXT}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_EXT_index_material</code>   */
  public void glIndexMaterialEXT(int face, int mode);

  /** Entry point to C language function: <code> void {@native glIndexPointer}(GLenum type, GLsizei stride, const GLvoid *  ptr); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param ptr a direct or array-backed {@link java.nio.Buffer}   */
  public void glIndexPointer(int type, int stride, Buffer ptr);

  /** Entry point to C language function: <code> void {@native glIndexd}(GLdouble c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexd(double c);

  /** Entry point to C language function: <code> void {@native glIndexdv}(const GLdouble *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param c a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glIndexdv(DoubleBuffer c);

  /** Entry point to C language function: <code> void {@native glIndexdv}(const GLdouble *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexdv(double[] c, int c_offset);

  /** Entry point to C language function: <code> void {@native glIndexf}(GLfloat c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexf(float c);

  /** Entry point to C language function: <code> void {@native glIndexfv}(const GLfloat *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param c a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glIndexfv(FloatBuffer c);

  /** Entry point to C language function: <code> void {@native glIndexfv}(const GLfloat *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexfv(float[] c, int c_offset);

  /** Entry point to C language function: <code> void {@native glIndexi}(GLint c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexi(int c);

  /** Entry point to C language function: <code> void {@native glIndexiv}(const GLint *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param c a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glIndexiv(IntBuffer c);

  /** Entry point to C language function: <code> void {@native glIndexiv}(const GLint *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexiv(int[] c, int c_offset);

  /** Entry point to C language function: <code> void {@native glIndexs}(GLshort c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexs(short c);

  /** Entry point to C language function: <code> void {@native glIndexsv}(const GLshort *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param c a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glIndexsv(ShortBuffer c);

  /** Entry point to C language function: <code> void {@native glIndexsv}(const GLshort *  c); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glIndexsv(short[] c, int c_offset);

  /** Entry point to C language function: <code> void {@native glIndexub}(GLubyte c); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glIndexub(byte c);

  /** Entry point to C language function: <code> void {@native glIndexubv}(const GLubyte *  c); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param c a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glIndexubv(ByteBuffer c);

  /** Entry point to C language function: <code> void {@native glIndexubv}(const GLubyte *  c); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glIndexubv(byte[] c, int c_offset);

  /** Entry point to C language function: <code> void {@native glInitNames}(void); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glInitNames();

  /** Entry point to C language function: <code> void {@native glInsertComponentEXT}(GLuint res, GLuint src, GLuint num); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glInsertComponentEXT(int res, int src, int num);

  /** Entry point to C language function: <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glInterleavedArrays(int format, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glInterleavedArrays(int format, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnabledIndexedEXT}(GLenum target, GLuint index); </code> <br>Part of <code>GL_EXT_draw_buffers2</code>   */
  public boolean glIsEnabledIndexed(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceAPPLE}(GLuint fence); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glIsFenceAPPLE(int fence);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceNV}(GLuint fence); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glIsFenceNV(int fence);

  /** Entry point to C language function: <code> GLboolean {@native glIsList}(GLuint list); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public boolean glIsList(int list);

  /** Entry point to C language function: <code> GLboolean {@native glIsNameAMD}(GLenum identifier, GLuint name); </code> <br>Part of <code>GL_AMD_name_gen_delete</code>   */
  public boolean glIsNameAMD(int identifier, int name);

  /** Entry point to C language function: <code> GLboolean {@native glIsOcclusionQueryNV}(GLuint id); </code> <br>Part of <code>GL_NV_occlusion_query</code>   */
  public boolean glIsOcclusionQueryNV(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgramARB}(GLuint program); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public boolean glIsProgramARB(int program);

  /** Entry point to C language function: <code> GLboolean {@native glIsTransformFeedbackNV}(GLuint id); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public boolean glIsTransformFeedbackNV(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsVariantEnabledEXT}(GLuint id, GLenum cap); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public boolean glIsVariantEnabledEXT(int id, int cap);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexAttribEnabledAPPLE}(GLuint index, GLenum pname); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public boolean glIsVertexAttribEnabledAPPLE(int index, int pname);

  /** Entry point to C language function: <code> void {@native glLightModeli}(GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLightModeli(int pname, int param);

  /** Entry point to C language function: <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glLightModeliv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLightModeliv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glLighti}(GLenum light, GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLighti(int light, int pname, int param);

  /** Entry point to C language function: <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glLightiv(int light, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLightiv(int light, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glLineStipple}(GLint factor, GLushort pattern); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLineStipple(int factor, short pattern);

  /** Entry point to C language function: <code> void {@native glLinkProgramARB}(GLhandleARB programObj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glLinkProgramARB(int programObj);

  /** Entry point to C language function: <code> void {@native glListBase}(GLuint base); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glListBase(int base);

  /** Entry point to C language function: <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glLoadMatrixd(DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLoadMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLoadName}(GLuint name); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLoadName(int name);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glLoadTransposeMatrixd(DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glLoadTransposeMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glLoadTransposeMatrixf(FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glLoadTransposeMatrixf(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLockArraysEXT}(GLint first, GLsizei count); </code> <br>Part of <code>GL_EXT_compiled_vertex_array</code>   */
  public void glLockArraysEXT(int first, int count);

  /** Entry point to C language function: <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param points a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMap1d(int target, double u1, double u2, int stride, int order, DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMap1d(int target, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param points a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMap1f(int target, float u1, float u2, int stride, int order, FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMap1f(int target, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param points a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param points a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *  points); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param points a direct or array-backed {@link java.nio.Buffer}   */
  public void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, boolean packed, Buffer points);

  /** Entry point to C language function: <code> void {@native glMapGrid1d}(GLint un, GLdouble u1, GLdouble u2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMapGrid1d(int un, double u1, double u2);

  /** Entry point to C language function: <code> void {@native glMapGrid1f}(GLint un, GLfloat u1, GLfloat u2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMapGrid1f(int un, float u1, float u2);

  /** Entry point to C language function: <code> void {@native glMapGrid2d}(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

  /** Entry point to C language function: <code> void {@native glMapGrid2f}(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

  /** Entry point to C language function: <code> GLvoid *  {@native glMapNamedBufferEXT}(GLuint buffer, GLenum access); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public ByteBuffer glMapNamedBufferEXT(int buffer, int access);

  /** Entry point to C language function: <code> GLvoid *  {@native glMapNamedBufferRangeEXT}(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public ByteBuffer glMapNamedBufferRangeEXT(int buffer, long offset, long length, int access);

  /** Entry point to C language function: <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMapParameterfvNV(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMapParameterivNV(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_evaluators</code>   */
  public void glMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>
      @param points a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>
      @param points a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>
      @param points a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, DoubleBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>
      @param points a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, FloatBuffer points);

  /** Entry point to C language function: <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code> <br>Part of <code>GL_APPLE_vertex_program_evaluators</code>   */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Entry point to C language function: <code> void {@native glMateriali}(GLenum face, GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMateriali(int face, int pname, int param);

  /** Entry point to C language function: <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMaterialiv(int face, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMatrixFrustumEXT}(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixFrustumEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

  /** Entry point to C language function: <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>
      @param indices a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glMatrixIndexubvARB(int size, ByteBuffer indices);

  /** Entry point to C language function: <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexubvARB(int size, byte[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glMatrixIndexuivARB}(GLint size, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>
      @param indices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMatrixIndexuivARB(int size, IntBuffer indices);

  /** Entry point to C language function: <code> void {@native glMatrixIndexuivARB}(GLint size, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexuivARB(int size, int[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>
      @param indices a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMatrixIndexusvARB(int size, ShortBuffer indices);

  /** Entry point to C language function: <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  indices); </code> <br>Part of <code>GL_ARB_matrix_palette</code>   */
  public void glMatrixIndexusvARB(int size, short[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadIdentityEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadIdentityEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposedEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMatrixLoadTransposedEXT(int mode, DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposedEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposedEXT(int mode, double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposefEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMatrixLoadTransposefEXT(int mode, FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixLoadTransposefEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadTransposefEXT(int mode, float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoaddEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMatrixLoaddEXT(int mode, DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixLoaddEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoaddEXT(int mode, double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixLoadfEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMatrixLoadfEXT(int mode, FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixLoadfEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixLoadfEXT(int mode, float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposedEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMatrixMultTransposedEXT(int mode, DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposedEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposedEXT(int mode, double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposefEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMatrixMultTransposefEXT(int mode, FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixMultTransposefEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultTransposefEXT(int mode, float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultdEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMatrixMultdEXT(int mode, DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixMultdEXT}(GLenum mode, const GLdouble *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultdEXT(int mode, double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixMultfEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMatrixMultfEXT(int mode, FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMatrixMultfEXT}(GLenum mode, const GLfloat *  m); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixMultfEXT(int mode, float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMatrixOrthoEXT}(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixOrthoEXT(int mode, double left, double right, double bottom, double top, double zNear, double zFar);

  /** Entry point to C language function: <code> void {@native glMatrixPopEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixPopEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixPushEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixPushEXT(int mode);

  /** Entry point to C language function: <code> void {@native glMatrixRotatedEXT}(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixRotatedEXT(int mode, double angle, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glMatrixRotatefEXT}(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixRotatefEXT(int mode, float angle, float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glMatrixScaledEXT}(GLenum mode, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixScaledEXT(int mode, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glMatrixScalefEXT}(GLenum mode, GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixScalefEXT(int mode, float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glMatrixTranslatedEXT}(GLenum mode, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixTranslatedEXT(int mode, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glMatrixTranslatefEXT}(GLenum mode, GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMatrixTranslatefEXT(int mode, float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glMinmax}(GLenum target, GLenum internalformat, GLboolean sink); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glMinmax(int target, int internalformat, boolean sink);

  /** Entry point to C language function: <code> void {@native glMultMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultMatrixd(DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMultMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glMultMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param m a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultTransposeMatrixd(DoubleBuffer m);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultTransposeMatrixd(double[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param m a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultTransposeMatrixf(FloatBuffer m);

  /** Entry point to C language function: <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultTransposeMatrixf(float[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexBufferEXT}(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexBufferEXT(int texunit, int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1d}(GLenum target, GLdouble s); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1d(int target, double s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultiTexCoord1dv(int target, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1f}(GLenum target, GLfloat s); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1f(int target, float s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexCoord1fv(int target, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hNV}(GLenum target, GLhalfNV s); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord1h(int target, short s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord1hv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord1hv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1i}(GLenum target, GLint s); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1i(int target, int s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoord1iv(int target, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1s}(GLenum target, GLshort s); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1s(int target, short s);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord1sv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord1sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2d}(GLenum target, GLdouble s, GLdouble t); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2d(int target, double s, double t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultiTexCoord2dv(int target, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2f}(GLenum target, GLfloat s, GLfloat t); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2f(int target, float s, float t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexCoord2fv(int target, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hNV}(GLenum target, GLhalfNV s, GLhalfNV t); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord2h(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord2hv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord2hv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2i}(GLenum target, GLint s, GLint t); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2i(int target, int s, int t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoord2iv(int target, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2s}(GLenum target, GLshort s, GLshort t); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2s(int target, short s, short t);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord2sv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord2sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3d}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3d(int target, double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultiTexCoord3dv(int target, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3f}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3f(int target, float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexCoord3fv(int target, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord3h(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord3hv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord3hv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3i}(GLenum target, GLint s, GLint t, GLint r); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3i(int target, int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoord3iv(int target, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3s}(GLenum target, GLshort s, GLshort t, GLshort r); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3s(int target, short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord3sv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord3sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4d}(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4d(int target, double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultiTexCoord4dv(int target, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4dv(int target, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexCoord4fv(int target, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4fv(int target, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord4h(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord4hv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4hvNV}(GLenum target, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glMultiTexCoord4hv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4i}(GLenum target, GLint s, GLint t, GLint r, GLint q); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4i(int target, int s, int t, int r, int q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoord4iv(int target, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4iv(int target, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4s}(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4s(int target, short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glMultiTexCoord4sv(int target, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_3_DEPRECATED</code>   */
  public void glMultiTexCoord4sv(int target, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordPointerEXT}(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexCoordPointerEXT(int texunit, int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvfEXT(int texunit, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfvEXT}(GLenum texunit, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexEnvfvEXT(int texunit, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvfvEXT}(GLenum texunit, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvfvEXT(int texunit, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexEnviEXT}(GLenum texunit, GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnviEXT(int texunit, int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexEnvivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexEnvivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexEnvivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGendEXT}(GLenum texunit, GLenum coord, GLenum pname, GLdouble param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGendEXT(int texunit, int coord, int pname, double param);

  /** Entry point to C language function: <code> void {@native glMultiTexGendvEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glMultiTexGendvEXT(int texunit, int coord, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexGendvEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGendvEXT(int texunit, int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfEXT}(GLenum texunit, GLenum coord, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenfEXT(int texunit, int coord, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfvEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexGenfvEXT(int texunit, int coord, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexGenfvEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenfvEXT(int texunit, int coord, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexGeniEXT}(GLenum texunit, GLenum coord, GLenum pname, GLint param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGeniEXT(int texunit, int coord, int pname, int param);

  /** Entry point to C language function: <code> void {@native glMultiTexGenivEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexGenivEXT(int texunit, int coord, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexGenivEXT}(GLenum texunit, GLenum coord, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexGenivEXT(int texunit, int coord, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexImage1DEXT(int texunit, int target, int level, int internalformat, int width, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexImage2DEXT(int texunit, int target, int level, int internalformat, int width, int height, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexImage3DEXT}(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexImage3DEXT(int texunit, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexParameterIivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIuivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexParameterIuivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterIuivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterIuivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfEXT}(GLenum texunit, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterfEXT(int texunit, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfvEXT}(GLenum texunit, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glMultiTexParameterfvEXT(int texunit, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterfvEXT}(GLenum texunit, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterfvEXT(int texunit, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexParameteriEXT}(GLenum texunit, GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameteriEXT(int texunit, int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexParameterivEXT(int texunit, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMultiTexParameterivEXT}(GLenum texunit, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexParameterivEXT(int texunit, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexRenderbufferEXT}(GLenum texunit, GLenum target, GLuint renderbuffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glMultiTexRenderbufferEXT(int texunit, int target, int renderbuffer);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage1DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexSubImage1DEXT(int texunit, int target, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage2DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexSubImage2DEXT(int texunit, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glMultiTexSubImage3DEXT}(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiTexSubImage3DEXT(int texunit, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glNamedBufferDataEXT}(GLuint buffer, GLsizeiptr size, const GLvoid *  data, GLenum usage); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedBufferDataEXT(int buffer, long size, Buffer data, int usage);

  /** Entry point to C language function: <code> void {@native glNamedBufferSubDataEXT}(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *  data); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedBufferSubDataEXT(int buffer, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glNamedCopyBufferSubDataEXT}(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedCopyBufferSubDataEXT(int readBuffer, int writeBuffer, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferRenderbufferEXT}(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferRenderbufferEXT(int framebuffer, int attachment, int renderbuffertarget, int renderbuffer);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture1DEXT}(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture1DEXT(int framebuffer, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture2DEXT}(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture2DEXT(int framebuffer, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTexture3DEXT}(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTexture3DEXT(int framebuffer, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureEXT}(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureEXT(int framebuffer, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureFaceEXT}(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureFaceEXT(int framebuffer, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glNamedFramebufferTextureLayerEXT}(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedFramebufferTextureLayerEXT(int framebuffer, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dEXT}(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4dEXT(int program, int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dvEXT}(GLuint program, GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glNamedProgramLocalParameter4dvEXT(int program, int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4dvEXT}(GLuint program, GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4dvEXT(int program, int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fEXT}(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4fEXT(int program, int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fvEXT}(GLuint program, GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glNamedProgramLocalParameter4fvEXT(int program, int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameter4fvEXT}(GLuint program, GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameter4fvEXT(int program, int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4iEXT}(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4iEXT(int program, int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4ivEXT}(GLuint program, GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNamedProgramLocalParameterI4ivEXT(int program, int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4ivEXT}(GLuint program, GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4ivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uiEXT}(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4uiEXT(int program, int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uivEXT}(GLuint program, GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNamedProgramLocalParameterI4uivEXT(int program, int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameterI4uivEXT}(GLuint program, GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameterI4uivEXT(int program, int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameters4fvEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glNamedProgramLocalParameters4fvEXT(int program, int target, int index, int count, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParameters4fvEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParameters4fvEXT(int program, int target, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4ivEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNamedProgramLocalParametersI4ivEXT(int program, int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4ivEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4ivEXT(int program, int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4uivEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNamedProgramLocalParametersI4uivEXT(int program, int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glNamedProgramLocalParametersI4uivEXT}(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedProgramLocalParametersI4uivEXT(int program, int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glNamedProgramStringEXT}(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *  string); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param string a direct or array-backed {@link java.nio.Buffer}   */
  public void glNamedProgramStringEXT(int program, int target, int format, int len, Buffer string);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageEXT}(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageEXT(int renderbuffer, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageMultisampleCoverageEXT}(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageMultisampleCoverageEXT(int renderbuffer, int coverageSamples, int colorSamples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNamedRenderbufferStorageMultisampleEXT}(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glNamedRenderbufferStorageMultisampleEXT(int renderbuffer, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glNewList}(GLuint list, GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNewList(int list, int mode);

  /** Entry point to C language function: <code> void {@native glNormal3b}(GLbyte nx, GLbyte ny, GLbyte nz); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3b(byte nx, byte ny, byte nz);

  /** Entry point to C language function: <code> void {@native glNormal3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glNormal3bv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3bv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3d}(GLdouble nx, GLdouble ny, GLdouble nz); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3d(double nx, double ny, double nz);

  /** Entry point to C language function: <code> void {@native glNormal3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glNormal3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glNormal3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3hNV}(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glNormal3h(short nx, short ny, short nz);

  /** Entry point to C language function: <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glNormal3hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glNormal3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3i}(GLint nx, GLint ny, GLint nz); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3i(int nx, int ny, int nz);

  /** Entry point to C language function: <code> void {@native glNormal3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNormal3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glNormal3s}(GLshort nx, GLshort ny, GLshort nz); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3s(short nx, short ny, short nz);

  /** Entry point to C language function: <code> void {@native glNormal3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glNormal3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glNormal3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glNormal3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> GLenum {@native glObjectPurgeableAPPLE}(GLenum objectType, GLuint name, GLenum option); </code> <br>Part of <code>GL_APPLE_object_purgeable</code>   */
  public int glObjectPurgeableAPPLE(int objectType, int name, int option);

  /** Entry point to C language function: <code> GLenum {@native glObjectUnpurgeableAPPLE}(GLenum objectType, GLuint name, GLenum option); </code> <br>Part of <code>GL_APPLE_object_purgeable</code>   */
  public int glObjectUnpurgeableAPPLE(int objectType, int name, int option);

  /** Entry point to C language function: <code> void {@native glPNTrianglesfATI}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_ATI_pn_triangles</code>   */
  public void glPNTrianglesfATI(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPNTrianglesiATI}(GLenum pname, GLint param); </code> <br>Part of <code>GL_ATI_pn_triangles</code>   */
  public void glPNTrianglesiATI(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPassThrough}(GLfloat token); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPassThrough(float token);

  /** Entry point to C language function: <code> void {@native glPauseTransformFeedbackNV}(void); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glPauseTransformFeedbackNV();

  /** Entry point to C language function: <code> void {@native glPixelDataRangeNV}(GLenum target, GLsizei length, GLvoid *  pointer); </code> <br>Part of <code>GL_NV_pixel_data_range</code>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public void glPixelDataRangeNV(int target, int length, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPixelMapfv(int map, int mapsize, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapfv(int map, int mapsize, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapfv(int map, int mapsize, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPixelMapuiv(int map, int mapsize, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapuiv(int map, int mapsize, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapuiv(int map, int mapsize, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param values a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glPixelMapusv(int map, int mapsize, ShortBuffer values);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapusv(int map, int mapsize, short[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelMapusv(int map, int mapsize, long values_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPixelTransferf}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelTransferf(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPixelTransferi}(GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelTransferi(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfEXT}(GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterfEXT(int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPixelTransformParameterfvEXT(int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterfvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameteriEXT}(GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameteriEXT(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPixelTransformParameterivEXT(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_pixel_transform</code>   */
  public void glPixelTransformParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPixelZoom}(GLfloat xfactor, GLfloat yfactor); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelZoom(float xfactor, float yfactor);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param mask a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glPolygonStipple(ByteBuffer mask);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonStipple(byte[] mask, int mask_offset);

  /** Entry point to C language function: <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonStipple(long mask_buffer_offset);

  /** Entry point to C language function: <code> void {@native glPopAttrib}(void); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPopAttrib();

  /** Entry point to C language function: <code> void {@native glPopClientAttrib}(void); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glPopClientAttrib();

  /** Entry point to C language function: <code> void {@native glPopName}(void); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPopName();

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartIndexNV}(GLuint index); </code> <br>Part of <code>GL_NV_primitive_restart</code>   */
  public void glPrimitiveRestartIndexNV(int index);

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartNV}(void); </code> <br>Part of <code>GL_NV_primitive_restart</code>   */
  public void glPrimitiveRestartNV();

  /** Entry point to C language function: <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}
      @param priorities a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPrioritizeTextures(int n, IntBuffer textures, FloatBuffer priorities);

  /** Entry point to C language function: <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glPrioritizeTextures(int n, int[] textures, int textures_offset, float[] priorities, int priorities_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_NV_parameter_buffer_object</code>   */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramEnvParameter4dvARB(int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramEnvParameter4fvARB(int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramEnvParameter4fvARB(int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramEnvParameterI4ivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramEnvParameterI4uivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramEnvParameters4fvEXT(int target, int index, int count, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramEnvParameters4fvEXT(int target, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramLocalParameter4dvARB(int target, int index, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramLocalParameter4fvARB(int target, int index, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint index, const GLfloat *  params); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramLocalParameter4fvARB(int target, int index, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramLocalParameterI4ivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramLocalParameterI4uivNV(int target, int index, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramLocalParameters4fvEXT(int target, int index, int count, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint index, GLsizei count, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_gpu_program_parameters</code>   */
  public void glProgramLocalParameters4fvEXT(int target, int index, int count, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program4</code>   */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramStringARB}(GLenum target, GLenum format, GLsizei len, const GLvoid *  string); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glProgramStringARB(int target, int format, int len, String string);

  /** Entry point to C language function: <code> void {@native glProgramSubroutineParametersuivNV}(GLenum target, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program5</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramSubroutineParametersuivNV(int target, int count, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glProgramSubroutineParametersuivNV}(GLenum target, GLsizei count, const GLuint *  params); </code> <br>Part of <code>GL_NV_gpu_program5</code>   */
  public void glProgramSubroutineParametersuivNV(int target, int count, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dEXT}(GLuint program, GLint location, GLdouble x); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1dEXT(int program, int location, double x);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform1dvEXT(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1dvEXT(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fEXT}(GLuint program, GLint location, GLfloat v0); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1fEXT(int program, int location, float v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform1fvEXT(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iEXT}(GLuint program, GLint location, GLint v0); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1iEXT(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1ivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiEXT}(GLuint program, GLint location, GLuint v0); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1uiEXT(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1uivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform1uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dEXT}(GLuint program, GLint location, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2dEXT(int program, int location, double x, double y);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform2dvEXT(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2dvEXT(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2fEXT(int program, int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform2fvEXT(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iEXT}(GLuint program, GLint location, GLint v0, GLint v1); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2iEXT(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2ivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2uiEXT(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2uivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform2uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dEXT}(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3dEXT(int program, int location, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform3dvEXT(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3dvEXT(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3fEXT(int program, int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform3fvEXT(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iEXT}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3iEXT(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3ivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3uiEXT(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3uivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform3uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dEXT}(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4dEXT(int program, int location, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform4dvEXT(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dvEXT}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4dvEXT(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fEXT}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4fEXT(int program, int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform4fvEXT(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fvEXT}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4fvEXT(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iEXT}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4iEXT(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4ivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ivEXT}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4ivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiEXT}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4uiEXT(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4uivEXT(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uivEXT}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniform4uivEXT(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x3dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x3dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x3fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x4dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x4dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x4fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix2x4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x2dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x2dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x2fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x4dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x4dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x4fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix3x4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x2dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x2dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x2fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x2fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x3dvEXT(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x3dvEXT(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x3fvEXT(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fvEXT}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glProgramUniformMatrix4x3fvEXT(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramVertexLimitNV}(GLenum target, GLint limit); </code> <br>Part of <code>GL_NV_geometry_program4</code>   */
  public void glProgramVertexLimitNV(int target, int limit);

  /** Entry point to C language function: <code> void {@native glProvokingVertexEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_provoking_vertex</code>   */
  public void glProvokingVertexEXT(int mode);

  /** Entry point to C language function: <code> void {@native glPushAttrib}(GLbitfield mask); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPushAttrib(int mask);

  /** Entry point to C language function: <code> void {@native glPushClientAttrib}(GLbitfield mask); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glPushClientAttrib(int mask);

  /** Entry point to C language function: <code> void {@native glPushClientAttribDefaultEXT}(GLbitfield mask); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glPushClientAttribDefaultEXT(int mask);

  /** Entry point to C language function: <code> void {@native glPushName}(GLuint name); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPushName(int name);

  /** Entry point to C language function: <code> void {@native glRasterPos2d}(GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2d(double x, double y);

  /** Entry point to C language function: <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glRasterPos2dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos2f}(GLfloat x, GLfloat y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2f(float x, float y);

  /** Entry point to C language function: <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glRasterPos2fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos2i}(GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2i(int x, int y);

  /** Entry point to C language function: <code> void {@native glRasterPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glRasterPos2iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos2s}(GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2s(short x, short y);

  /** Entry point to C language function: <code> void {@native glRasterPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glRasterPos2sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos2sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos3d}(GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3d(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glRasterPos3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos3f}(GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3f(float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glRasterPos3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos3i}(GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3i(int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glRasterPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glRasterPos3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos3s}(GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3s(short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glRasterPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glRasterPos3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4d(double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glRasterPos4dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4f(float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glRasterPos4fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos4i}(GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4i(int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glRasterPos4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glRasterPos4iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRasterPos4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4s(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glRasterPos4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glRasterPos4sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glRasterPos4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRasterPos4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glRectd}(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectd(double x1, double y1, double x2, double y2);

  /** Entry point to C language function: <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v1 a direct or array-backed {@link java.nio.DoubleBuffer}
      @param v2 a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glRectdv(DoubleBuffer v1, DoubleBuffer v2);

  /** Entry point to C language function: <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectdv(double[] v1, int v1_offset, double[] v2, int v2_offset);

  /** Entry point to C language function: <code> void {@native glRectf}(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectf(float x1, float y1, float x2, float y2);

  /** Entry point to C language function: <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v1 a direct or array-backed {@link java.nio.FloatBuffer}
      @param v2 a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glRectfv(FloatBuffer v1, FloatBuffer v2);

  /** Entry point to C language function: <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectfv(float[] v1, int v1_offset, float[] v2, int v2_offset);

  /** Entry point to C language function: <code> void {@native glRecti}(GLint x1, GLint y1, GLint x2, GLint y2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRecti(int x1, int y1, int x2, int y2);

  /** Entry point to C language function: <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v1 a direct or array-backed {@link java.nio.IntBuffer}
      @param v2 a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glRectiv(IntBuffer v1, IntBuffer v2);

  /** Entry point to C language function: <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectiv(int[] v1, int v1_offset, int[] v2, int v2_offset);

  /** Entry point to C language function: <code> void {@native glRects}(GLshort x1, GLshort y1, GLshort x2, GLshort y2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRects(short x1, short y1, short x2, short y2);

  /** Entry point to C language function: <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v1 a direct or array-backed {@link java.nio.ShortBuffer}
      @param v2 a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glRectsv(ShortBuffer v1, ShortBuffer v2);

  /** Entry point to C language function: <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRectsv(short[] v1, int v1_offset, short[] v2, int v2_offset);

  /** Entry point to C language function: <code> GLint {@native glRenderMode}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public int glRenderMode(int mode);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_NV_framebuffer_multisample_coverage</code>   */
  public void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glResetHistogram}(GLenum target); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glResetHistogram(int target);

  /** Entry point to C language function: <code> void {@native glResetMinmax}(GLenum target); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glResetMinmax(int target);

  /** Entry point to C language function: <code> void {@native glResumeTransformFeedbackNV}(void); </code> <br>Part of <code>GL_NV_transform_feedback2</code>   */
  public void glResumeTransformFeedbackNV();

  /** Entry point to C language function: <code> void {@native glRotated}(GLdouble angle, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glRotated(double angle, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glSampleMaskIndexedNV}(GLuint index, GLbitfield mask); </code> <br>Part of <code>GL_NV_explicit_multisample</code>   */
  public void glSampleMaskIndexedNV(int index, int mask);

  /** Entry point to C language function: <code> void {@native glScaled}(GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glScaled(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3b(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glSecondaryColor3bv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3bv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3d(double red, double green, double blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glSecondaryColor3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3f(float red, float green, float blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glSecondaryColor3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glSecondaryColor3h(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glSecondaryColor3hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glSecondaryColor3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3i}(GLint red, GLint green, GLint blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3i(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSecondaryColor3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3s}(GLshort red, GLshort green, GLshort blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3s(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glSecondaryColor3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3ub(byte red, byte green, byte blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glSecondaryColor3ubv(ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3ubv(byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3ui}(GLuint red, GLuint green, GLuint blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3ui(int red, int green, int blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSecondaryColor3uiv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3uiv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3us}(GLushort red, GLushort green, GLushort blue); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3us(short red, short green, short blue);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glSecondaryColor3usv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColor3usv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glSecondaryColorPointer(int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glSecondaryColorPointer(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glSelectBuffer}(GLsizei size, GLuint *  buffer); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param buffer a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSelectBuffer(int size, IntBuffer buffer);

  /** Entry point to C language function: <code> void {@native glSelectBuffer}(GLsizei size, GLuint *  buffer); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glSelectBuffer(int size, int[] buffer, int buffer_offset);

  /** Entry point to C language function: <code> void {@native glSelectPerfMonitorCountersAMD}(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *  counterList); </code> <br>Part of <code>GL_AMD_performance_monitor</code>
      @param counterList a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSelectPerfMonitorCountersAMD(int monitor, boolean enable, int group, int numCounters, IntBuffer counterList);

  /** Entry point to C language function: <code> void {@native glSelectPerfMonitorCountersAMD}(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *  counterList); </code> <br>Part of <code>GL_AMD_performance_monitor</code>   */
  public void glSelectPerfMonitorCountersAMD(int monitor, boolean enable, int group, int numCounters, int[] counterList, int counterList_offset);

  /** Entry point to C language function: <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>
      @param row a direct or array-backed {@link java.nio.Buffer}
      @param column a direct or array-backed {@link java.nio.Buffer}   */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, Buffer row, Buffer column);

  /** Entry point to C language function: <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code> <br>Part of <code>GL_VERSION_1_2_DEPRECATED</code>   */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, long row_buffer_offset, long column_buffer_offset);

  /** Entry point to C language function: <code> void {@native glSetFenceAPPLE}(GLuint fence); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public void glSetFenceAPPLE(int fence);

  /** Entry point to C language function: <code> void {@native glSetFenceNV}(GLuint fence, GLenum condition); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glSetFenceNV(int fence, int condition);

  /** Entry point to C language function: <code> void {@native glSetInvariantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.Buffer}   */
  public void glSetInvariantEXT(int id, int type, Buffer addr);

  /** Entry point to C language function: <code> void {@native glSetLocalConstantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.Buffer}   */
  public void glSetLocalConstantEXT(int id, int type, Buffer addr);

  /** Entry point to C language function: <code> void {@native glShaderOp1EXT}(GLenum op, GLuint res, GLuint arg1); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp1EXT(int op, int res, int arg1);

  /** Entry point to C language function: <code> void {@native glShaderOp2EXT}(GLenum op, GLuint res, GLuint arg1, GLuint arg2); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp2EXT(int op, int res, int arg1, int arg2);

  /** Entry point to C language function: <code> void {@native glShaderOp3EXT}(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glShaderOp3EXT(int op, int res, int arg1, int arg2, int arg3);

  /** Entry point to C language function: <code> void {@native glShaderSourceARB}(GLhandleARB shaderObj, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glShaderSourceARB(int shaderObj, int count, String[] string, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glShaderSourceARB}(GLhandleARB shaderObj, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glShaderSourceARB(int shaderObj, int count, String[] string, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glStencilClearTagEXT}(GLsizei stencilTagBits, GLuint stencilClearTag); </code> <br>Part of <code>GL_EXT_stencil_clear_tag</code>   */
  public void glStencilClearTagEXT(int stencilTagBits, int stencilClearTag);

  /** Entry point to C language function: <code> void {@native glStringMarkerGREMEDY}(GLsizei len, const GLvoid *  string); </code> <br>Part of <code>GL_GREMEDY_string_marker</code>
      @param string a direct or array-backed {@link java.nio.Buffer}   */
  public void glStringMarkerGREMEDY(int len, Buffer string);

  /** Entry point to C language function: <code> void {@native glSwapAPPLE}(void); </code> <br>Part of <code>GL_APPLE_flush_render</code>   */
  public void glSwapAPPLE();

  /** Entry point to C language function: <code> void {@native glSwizzleEXT}(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glSwizzleEXT(int res, int in, int outX, int outY, int outZ, int outW);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceAPPLE}(GLuint fence); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glTestFenceAPPLE(int fence);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceNV}(GLuint fence); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glTestFenceNV(int fence);

  /** Entry point to C language function: <code> GLboolean {@native glTestObjectAPPLE}(GLenum object, GLuint name); </code> <br>Part of <code>GL_APPLE_fence</code>   */
  public boolean glTestObjectAPPLE(int object, int name);

  /** Entry point to C language function: <code> void {@native glTexCoord1d}(GLdouble s); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1d(double s);

  /** Entry point to C language function: <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glTexCoord1dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord1f}(GLfloat s); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1f(float s);

  /** Entry point to C language function: <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTexCoord1fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord1hNV}(GLhalfNV s); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord1h(short s);

  /** Entry point to C language function: <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord1hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord1hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord1i}(GLint s); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1i(int s);

  /** Entry point to C language function: <code> void {@native glTexCoord1iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoord1iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord1s}(GLshort s); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1s(short s);

  /** Entry point to C language function: <code> void {@native glTexCoord1sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord1sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord1sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord1sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2d}(GLdouble s, GLdouble t); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2d(double s, double t);

  /** Entry point to C language function: <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glTexCoord2dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2f}(GLfloat s, GLfloat t); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2f(float s, float t);

  /** Entry point to C language function: <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTexCoord2fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2hNV}(GLhalfNV s, GLhalfNV t); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord2h(short s, short t);

  /** Entry point to C language function: <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord2hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord2hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2i}(GLint s, GLint t); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2i(int s, int t);

  /** Entry point to C language function: <code> void {@native glTexCoord2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoord2iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord2s}(GLshort s, GLshort t); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2s(short s, short t);

  /** Entry point to C language function: <code> void {@native glTexCoord2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord2sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord2sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3d}(GLdouble s, GLdouble t, GLdouble r); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3d(double s, double t, double r);

  /** Entry point to C language function: <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glTexCoord3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3f}(GLfloat s, GLfloat t, GLfloat r); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3f(float s, float t, float r);

  /** Entry point to C language function: <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTexCoord3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3hNV}(GLhalfNV s, GLhalfNV t, GLhalfNV r); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord3h(short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord3hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3i}(GLint s, GLint t, GLint r); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3i(int s, int t, int r);

  /** Entry point to C language function: <code> void {@native glTexCoord3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoord3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord3s}(GLshort s, GLshort t, GLshort r); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3s(short s, short t, short r);

  /** Entry point to C language function: <code> void {@native glTexCoord3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4d}(GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4d(double s, double t, double r, double q);

  /** Entry point to C language function: <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glTexCoord4dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4f}(GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4f(float s, float t, float r, float q);

  /** Entry point to C language function: <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTexCoord4fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4hNV}(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord4h(short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord4hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glTexCoord4hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4i}(GLint s, GLint t, GLint r, GLint q); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4i(int s, int t, int r, int q);

  /** Entry point to C language function: <code> void {@native glTexCoord4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoord4iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexCoord4s}(GLshort s, GLshort t, GLshort r, GLshort q); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4s(short s, short t, short r, short q);

  /** Entry point to C language function: <code> void {@native glTexCoord4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glTexCoord4sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glTexCoord4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexCoord4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glTexGend}(GLenum coord, GLenum pname, GLdouble param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexGend(int coord, int pname, double param);

  /** Entry point to C language function: <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glTexGendv(int coord, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexRenderbufferNV}(GLenum target, GLuint renderbuffer); </code> <br>Part of <code>GL_NV_explicit_multisample</code>   */
  public void glTexRenderbufferNV(int target, int renderbuffer);

  /** Entry point to C language function: <code> void {@native glTextureBarrierNV}(void); </code> <br>Part of <code>GL_NV_texture_barrier</code>   */
  public void glTextureBarrierNV();

  /** Entry point to C language function: <code> void {@native glTextureBufferEXT}(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureBufferEXT(int texture, int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTextureImage1DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureImage1DEXT(int texture, int target, int level, int internalformat, int width, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureImage2DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureImage2DEXT(int texture, int target, int level, int internalformat, int width, int height, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureImage3DEXT}(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureImage3DEXT(int texture, int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureLightEXT}(GLenum pname); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glTextureLightEXT(int pname);

  /** Entry point to C language function: <code> void {@native glTextureMaterialEXT}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_EXT_light_texture</code>   */
  public void glTextureMaterialEXT(int face, int mode);

  /** Entry point to C language function: <code> void {@native glTextureNormalEXT}(GLenum mode); </code> <br>Part of <code>GL_EXT_texture_perturb_normal</code>   */
  public void glTextureNormalEXT(int mode);

  /** Entry point to C language function: <code> void {@native glTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameterIivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuivEXT}(GLuint texture, GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameterIuivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterIuivEXT}(GLuint texture, GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterIuivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameterfEXT}(GLuint texture, GLenum target, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterfEXT(int texture, int target, int pname, float param);

  /** Entry point to C language function: <code> void {@native glTextureParameterfvEXT}(GLuint texture, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glTextureParameterfvEXT(int texture, int target, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterfvEXT}(GLuint texture, GLenum target, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterfvEXT(int texture, int target, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureParameteriEXT}(GLuint texture, GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameteriEXT(int texture, int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTextureParameterivEXT(int texture, int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTextureParameterivEXT}(GLuint texture, GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureParameterivEXT(int texture, int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTextureRangeAPPLE}(GLenum target, GLsizei length, const GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_texture_range</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureRangeAPPLE(int target, int length, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glTextureRenderbufferEXT}(GLuint texture, GLenum target, GLuint renderbuffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public void glTextureRenderbufferEXT(int texture, int target, int renderbuffer);

  /** Entry point to C language function: <code> void {@native glTextureSubImage1DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage1DEXT(int texture, int target, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage2DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage2DEXT(int texture, int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTextureSubImage3DEXT}(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_EXT_direct_state_access</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTextureSubImage3DEXT(int texture, int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTranslated}(GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTranslated(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glUniform1fARB}(GLint location, GLfloat v0); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1fARB(int location, float v0);

  /** Entry point to C language function: <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform1fvARB(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform1iARB}(GLint location, GLint v0); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1iARB(int location, int v0);

  /** Entry point to C language function: <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform1ivARB(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform1ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2fARB}(GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2fARB(int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform2fvARB(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2iARB}(GLint location, GLint v0, GLint v1); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2iARB(int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform2ivARB(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform2ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3fARB(int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform3fvARB(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3iARB}(GLint location, GLint v0, GLint v1, GLint v2); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3iARB(int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform3ivARB(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform3ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4fARB(int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniform4fvARB(int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4iARB}(GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4iARB(int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform4ivARB(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniform4ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformBufferEXT}(GLuint program, GLint location, GLuint buffer); </code> <br>Part of <code>GL_EXT_bindable_uniform</code>   */
  public void glUniformBufferEXT(int program, int location, int buffer);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUnlockArraysEXT}(void); </code> <br>Part of <code>GL_EXT_compiled_vertex_array</code>   */
  public void glUnlockArraysEXT();

  /** Entry point to C language function: <code> GLboolean {@native glUnmapNamedBufferEXT}(GLuint buffer); </code> <br>Part of <code>GL_EXT_direct_state_access</code>   */
  public boolean glUnmapNamedBufferEXT(int buffer);

  /** Entry point to C language function: <code> void {@native glUseProgramObjectARB}(GLhandleARB programObj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glUseProgramObjectARB(int programObj);

  /** Entry point to C language function: <code> void {@native glVDPAUFiniNV}(void); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUFiniNV();

  /** Entry point to C language function: <code> void {@native glVDPAUGetSurfaceivNV}(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVDPAUGetSurfaceivNV(long surface, int pname, int bufSize, IntBuffer length, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glVDPAUGetSurfaceivNV}(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUGetSurfaceivNV(long surface, int pname, int bufSize, int[] length, int length_offset, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glVDPAUInitNV}(const GLvoid *  vdpDevice, const GLvoid *  getProcAddress); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param vdpDevice a direct or array-backed {@link java.nio.Buffer}
      @param getProcAddress a direct or array-backed {@link java.nio.Buffer}   */
  public void glVDPAUInitNV(Buffer vdpDevice, Buffer getProcAddress);

  /** Entry point to C language function: <code> void {@native glVDPAUIsSurfaceNV}(GLvdpauSurfaceNV surface); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUIsSurfaceNV(long surface);

  /** Entry point to C language function: <code> void {@native glVDPAUMapSurfacesNV}(GLsizei numSurfaces, const GLvdpauSurfaceNV *  surfaces); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param surfaces a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVDPAUMapSurfacesNV(int numSurfaces, LongBuffer surfaces);

  /** Entry point to C language function: <code> void {@native glVDPAUMapSurfacesNV}(GLsizei numSurfaces, const GLvdpauSurfaceNV *  surfaces); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUMapSurfacesNV(int numSurfaces, long[] surfaces, int surfaces_offset);

  /** Entry point to C language function: <code> GLvdpauSurfaceNV {@native glVDPAURegisterOutputSurfaceNV}(GLvoid *  vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *  textureNames); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param vdpSurface a direct or array-backed {@link java.nio.Buffer}
      @param textureNames a direct or array-backed {@link java.nio.IntBuffer}   */
  public long glVDPAURegisterOutputSurfaceNV(Buffer vdpSurface, int target, int numTextureNames, IntBuffer textureNames);

  /** Entry point to C language function: <code> GLvdpauSurfaceNV {@native glVDPAURegisterOutputSurfaceNV}(GLvoid *  vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *  textureNames); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param vdpSurface a direct or array-backed {@link java.nio.Buffer}   */
  public long glVDPAURegisterOutputSurfaceNV(Buffer vdpSurface, int target, int numTextureNames, int[] textureNames, int textureNames_offset);

  /** Entry point to C language function: <code> GLvdpauSurfaceNV {@native glVDPAURegisterVideoSurfaceNV}(GLvoid *  vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *  textureNames); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param vdpSurface a direct or array-backed {@link java.nio.Buffer}
      @param textureNames a direct or array-backed {@link java.nio.IntBuffer}   */
  public long glVDPAURegisterVideoSurfaceNV(Buffer vdpSurface, int target, int numTextureNames, IntBuffer textureNames);

  /** Entry point to C language function: <code> GLvdpauSurfaceNV {@native glVDPAURegisterVideoSurfaceNV}(GLvoid *  vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *  textureNames); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param vdpSurface a direct or array-backed {@link java.nio.Buffer}   */
  public long glVDPAURegisterVideoSurfaceNV(Buffer vdpSurface, int target, int numTextureNames, int[] textureNames, int textureNames_offset);

  /** Entry point to C language function: <code> void {@native glVDPAUSurfaceAccessNV}(GLvdpauSurfaceNV surface, GLenum access); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUSurfaceAccessNV(long surface, int access);

  /** Entry point to C language function: <code> void {@native glVDPAUUnmapSurfacesNV}(GLsizei numSurface, const GLvdpauSurfaceNV *  surfaces); </code> <br>Part of <code>GL_NV_vdpau_interop</code>
      @param surfaces a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVDPAUUnmapSurfacesNV(int numSurface, LongBuffer surfaces);

  /** Entry point to C language function: <code> void {@native glVDPAUUnmapSurfacesNV}(GLsizei numSurface, const GLvdpauSurfaceNV *  surfaces); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUUnmapSurfacesNV(int numSurface, long[] surfaces, int surfaces_offset);

  /** Entry point to C language function: <code> void {@native glVDPAUUnregisterSurfaceNV}(GLvdpauSurfaceNV surface); </code> <br>Part of <code>GL_NV_vdpau_interop</code>   */
  public void glVDPAUUnregisterSurfaceNV(long surface);

  /** Entry point to C language function: <code> void {@native glValidateProgramARB}(GLhandleARB programObj); </code> <br>Part of <code>GL_ARB_shader_objects</code>   */
  public void glValidateProgramARB(int programObj);

  /** Entry point to C language function: <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.Buffer}   */
  public void glVariantPointerEXT(int id, int type, int stride, Buffer addr);

  /** Entry point to C language function: <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantPointerEXT(int id, int type, int stride, long addr_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVariantbvEXT}(GLuint id, const GLbyte *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVariantbvEXT(int id, ByteBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantbvEXT}(GLuint id, const GLbyte *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantbvEXT(int id, byte[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantdvEXT}(GLuint id, const GLdouble *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVariantdvEXT(int id, DoubleBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantdvEXT}(GLuint id, const GLdouble *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantdvEXT(int id, double[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantfvEXT}(GLuint id, const GLfloat *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVariantfvEXT(int id, FloatBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantfvEXT}(GLuint id, const GLfloat *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantfvEXT(int id, float[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantivEXT}(GLuint id, const GLint *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVariantivEXT(int id, IntBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantivEXT}(GLuint id, const GLint *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantivEXT(int id, int[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantsvEXT}(GLuint id, const GLshort *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVariantsvEXT(int id, ShortBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantsvEXT}(GLuint id, const GLshort *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantsvEXT(int id, short[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantubvEXT}(GLuint id, const GLubyte *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVariantubvEXT(int id, ByteBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantubvEXT}(GLuint id, const GLubyte *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantubvEXT(int id, byte[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantuivEXT}(GLuint id, const GLuint *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVariantuivEXT(int id, IntBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantuivEXT}(GLuint id, const GLuint *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantuivEXT(int id, int[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVariantusvEXT}(GLuint id, const GLushort *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>
      @param addr a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVariantusvEXT(int id, ShortBuffer addr);

  /** Entry point to C language function: <code> void {@native glVariantusvEXT}(GLuint id, const GLushort *  addr); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glVariantusvEXT(int id, short[] addr, int addr_offset);

  /** Entry point to C language function: <code> void {@native glVertex2d}(GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2d(double x, double y);

  /** Entry point to C language function: <code> void {@native glVertex2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertex2dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex2f}(GLfloat x, GLfloat y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2f(float x, float y);

  /** Entry point to C language function: <code> void {@native glVertex2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertex2fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex2hNV}(GLhalfNV x, GLhalfNV y); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex2h(short x, short y);

  /** Entry point to C language function: <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex2hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex2hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex2i}(GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2i(int x, int y);

  /** Entry point to C language function: <code> void {@native glVertex2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertex2iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex2s}(GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2s(short x, short y);

  /** Entry point to C language function: <code> void {@native glVertex2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex2sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex2sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3d}(GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3d(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertex3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertex3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3f}(GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3f(float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glVertex3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertex3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex3h(short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex3hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex3hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3i}(GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3i(int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertex3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertex3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex3s}(GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3s(short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertex3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4d(double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertex4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertex4dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4f(float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glVertex4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertex4fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex4h(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex4hv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertex4hv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4i}(GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4i(int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertex4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertex4iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertex4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4s(short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertex4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertex4sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertex4sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glVertex4sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexArrayParameteriAPPLE}(GLenum pname, GLint param); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>   */
  public void glVertexArrayParameteriAPPLE(int pname, int param);

  /** Entry point to C language function: <code> void {@native glVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code> <br>Part of <code>GL_APPLE_vertex_array_range</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexArrayRangeAPPLE(int length, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexArrayRangeNV}(GLsizei length, const GLvoid *  pointer); </code> <br>Part of <code>GL_NV_vertex_array_range</code>
      @param pointer a direct only {@link java.nio.Buffer}   */
  public void glVertexArrayRangeNV(int length, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dARB}(GLuint index, GLdouble x); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1dARB(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib1dvARB(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1dvARB(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fARB}(GLuint index, GLfloat x); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1fARB(int index, float x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib1fvARB(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1fvARB(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hNV}(GLuint index, GLhalfNV x); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib1h(int index, short x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib1hv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib1hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sARB}(GLuint index, GLshort x); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1sARB(int index, short x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib1svARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib1svARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dARB}(GLuint index, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2dARB(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib2dvARB(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2dvARB(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fARB}(GLuint index, GLfloat x, GLfloat y); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2fARB(int index, float x, float y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib2fvARB(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2fvARB(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hNV}(GLuint index, GLhalfNV x, GLhalfNV y); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib2h(int index, short x, short y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib2hv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib2hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sARB}(GLuint index, GLshort x, GLshort y); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2sARB(int index, short x, short y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib2svARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib2svARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dARB}(GLuint index, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3dARB(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib3dvARB(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3dvARB(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fARB}(GLuint index, GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3fARB(int index, float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib3fvARB(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3fvARB(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hNV}(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib3h(int index, short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib3hv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib3hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sARB}(GLuint index, GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3sARB(int index, short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib3svARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib3svARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4NbvARB(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NbvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NivARB}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4NivARB(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NivARB}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NsvARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4NsvARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NsvARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NsvARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubARB}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NubARB(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4NubvARB(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NubvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4NuivARB(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NuivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4NusvARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4NusvARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4bvARB(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4bvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dARB}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4dARB(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib4dvARB(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dvARB}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4dvARB(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fARB}(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4fARB(int index, float x, float y, float z, float w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexAttrib4fvARB(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4fvARB}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4fvARB(int index, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hNV}(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib4h(int index, short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4hv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttrib4hv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ivARB}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4ivARB(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ivARB}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sARB}(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4sARB(int index, short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4svARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4svARB}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4svARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4ubvARB(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4ubvARB(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4uivARB(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4uivARB(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4usvARB(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttrib4usvARB(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iEXT}(GLuint index, GLint x); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI1iEXT(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1ivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI1ivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiEXT}(GLuint index, GLuint x); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI1uiEXT(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1uivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI1uivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iEXT}(GLuint index, GLint x, GLint y); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI2iEXT(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2ivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI2ivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiEXT}(GLuint index, GLuint x, GLuint y); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI2uiEXT(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2uivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI2uivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iEXT}(GLuint index, GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI3iEXT(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3ivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI3ivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiEXT}(GLuint index, GLuint x, GLuint y, GLuint z); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI3uiEXT(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3uivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI3uivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bvEXT}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4bvEXT(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bvEXT}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4bvEXT(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4iEXT}(GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4iEXT(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI4ivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ivEXT}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4ivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4svEXT}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4svEXT(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4svEXT}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4svEXT(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubvEXT}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4ubvEXT(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubvEXT}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4ubvEXT(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uiEXT}(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4uiEXT(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI4uivEXT(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uivEXT}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4uivEXT(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usvEXT}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4usvEXT(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usvEXT}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_NV_vertex_program4</code>   */
  public void glVertexAttribI4usvEXT(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribIPointerEXT}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_NV_vertex_program4</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexAttribIPointerEXT(int index, int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1i64NV}(GLuint index, GLint64EXT x); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL1i64NV(int index, long x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL1i64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL1i64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64NV}(GLuint index, GLuint64EXT x); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL1ui64NV(int index, long x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL1ui64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL1ui64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2i64NV}(GLuint index, GLint64EXT x, GLint64EXT y); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL2i64NV(int index, long x, long y);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL2i64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL2i64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2ui64NV}(GLuint index, GLuint64EXT x, GLuint64EXT y); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL2ui64NV(int index, long x, long y);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL2ui64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL2ui64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3i64NV}(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL3i64NV(int index, long x, long y, long z);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL3i64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL3i64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3ui64NV}(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL3ui64NV(int index, long x, long y, long z);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL3ui64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL3ui64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4i64NV}(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL4i64NV(int index, long x, long y, long z, long w);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL4i64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4i64vNV}(GLuint index, const GLint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL4i64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4ui64NV}(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL4ui64NV(int index, long x, long y, long z, long w);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>
      @param v a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glVertexAttribL4ui64vNV(int index, LongBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4ui64vNV}(GLuint index, const GLuint64EXT *  v); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribL4ui64vNV(int index, long[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribLFormatNV}(GLuint index, GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_attrib_integer_64bit</code>   */
  public void glVertexAttribLFormatNV(int index, int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_ARB_vertex_program</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_ARB_vertex_program</code>   */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribs1hv(int index, int n, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs1hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribs2hv(int index, int n, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs2hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribs3hv(int index, int n, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs3hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribs4hv(int index, int n, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexAttribs4hv(int index, int n, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexBlendARB}(GLint count); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glVertexBlendARB(int count);

  /** Entry point to C language function: <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexWeightPointerEXT(int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightPointerEXT(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point to C language function: <code> void {@native glVertexWeightfEXT}(GLfloat weight); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightfEXT(float weight);

  /** Entry point to C language function: <code> void {@native glVertexWeightfvEXT}(const GLfloat *  weight); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>
      @param weight a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVertexWeightfvEXT(FloatBuffer weight);

  /** Entry point to C language function: <code> void {@native glVertexWeightfvEXT}(const GLfloat *  weight); </code> <br>Part of <code>GL_EXT_vertex_weighting</code>   */
  public void glVertexWeightfvEXT(float[] weight, int weight_offset);

  /** Entry point to C language function: <code> void {@native glVertexWeighthNV}(GLhalfNV weight); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexWeighth(short weight);

  /** Entry point to C language function: <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  weight); </code> <br>Part of <code>GL_NV_half_float</code>
      @param weight a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexWeighthv(ShortBuffer weight);

  /** Entry point to C language function: <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  weight); </code> <br>Part of <code>GL_NV_half_float</code>   */
  public void glVertexWeighthv(short[] weight, int weight_offset);

  /** Entry point to C language function: <code> GLenum {@native glVideoCaptureNV}(GLuint video_capture_slot, GLuint *  sequence_num, GLuint64EXT *  capture_time); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param sequence_num a direct or array-backed {@link java.nio.IntBuffer}
      @param capture_time a direct or array-backed {@link java.nio.LongBuffer}   */
  public int glVideoCaptureNV(int video_capture_slot, IntBuffer sequence_num, LongBuffer capture_time);

  /** Entry point to C language function: <code> GLenum {@native glVideoCaptureNV}(GLuint video_capture_slot, GLuint *  sequence_num, GLuint64EXT *  capture_time); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public int glVideoCaptureNV(int video_capture_slot, int[] sequence_num, int sequence_num_offset, long[] capture_time, int capture_time_offset);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterdvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVideoCaptureStreamParameterdvNV(int video_capture_slot, int stream, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterdvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glVideoCaptureStreamParameterdvNV(int video_capture_slot, int stream, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterfvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glVideoCaptureStreamParameterfvNV(int video_capture_slot, int stream, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterfvNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glVideoCaptureStreamParameterfvNV(int video_capture_slot, int stream, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterivNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVideoCaptureStreamParameterivNV(int video_capture_slot, int stream, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glVideoCaptureStreamParameterivNV}(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_NV_video_capture</code>   */
  public void glVideoCaptureStreamParameterivNV(int video_capture_slot, int stream, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glWeightbvARB(int size, ByteBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightbvARB(int size, byte[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glWeightdvARB(int size, DoubleBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightdvARB(int size, double[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glWeightfvARB(int size, FloatBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightfvARB(int size, float[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glWeightivARB(int size, IntBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightivARB(int size, int[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glWeightsvARB(int size, ShortBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightsvARB(int size, short[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glWeightubvARB(int size, ByteBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightubvARB(int size, byte[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightuivARB}(GLint size, const GLuint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glWeightuivARB(int size, IntBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightuivARB}(GLint size, const GLuint *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightuivARB(int size, int[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>
      @param weights a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glWeightusvARB(int size, ShortBuffer weights);

  /** Entry point to C language function: <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code> <br>Part of <code>GL_ARB_vertex_blend</code>   */
  public void glWeightusvARB(int size, short[] weights, int weights_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2d}(GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2d(double x, double y);

  /** Entry point to C language function: <code> void {@native glWindowPos2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glWindowPos2dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2f}(GLfloat x, GLfloat y); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2f(float x, float y);

  /** Entry point to C language function: <code> void {@native glWindowPos2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glWindowPos2fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2i}(GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2i(int x, int y);

  /** Entry point to C language function: <code> void {@native glWindowPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glWindowPos2iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos2s}(GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2s(short x, short y);

  /** Entry point to C language function: <code> void {@native glWindowPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glWindowPos2sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos2sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos2sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3d}(GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3d(double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glWindowPos3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glWindowPos3dv(DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3dv}(const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3dv(double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3f}(GLfloat x, GLfloat y, GLfloat z); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3f(float x, float y, float z);

  /** Entry point to C language function: <code> void {@native glWindowPos3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glWindowPos3fv(FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3fv}(const GLfloat *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3fv(float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3i}(GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3i(int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glWindowPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glWindowPos3iv(IntBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3iv}(const GLint *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3iv(int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWindowPos3s}(GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3s(short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glWindowPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glWindowPos3sv(ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glWindowPos3sv}(const GLshort *  v); </code> <br>Part of <code>GL_VERSION_1_4_DEPRECATED</code>   */
  public void glWindowPos3sv(short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glWriteMaskEXT}(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW); </code> <br>Part of <code>GL_EXT_vertex_shader</code>   */
  public void glWriteMaskEXT(int res, int in, int outX, int outY, int outZ, int outW);


  // --- Begin CustomJavaCode .cfg declarations
     public boolean glIsPBOPackEnabled();
     public boolean glIsPBOUnpackEnabled();
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2
