/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:28:23 CEST 2012 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import javax.media.opengl.GLES1;
import javax.media.opengl.GLES2;
import javax.media.opengl.GL2;
import com.jogamp.common.nio.Buffers;
import com.jogamp.opengl.util.GLBuffers;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <P> 
  * This interface contains all core embedded OpenGL methods of ES 1.x, with x >= 0,
  * inclusive, as well as most of it's extensions defined at the
  * time of this specification.
  * </P>
  */
public interface GLES1 extends GL2ES1{

  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGB8_OES = 0x8B90;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGBA8_OES = 0x8B91;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGBA4_OES = 0x8B93;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE4_RGB5_A1_OES = 0x8B94;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGB8_OES = 0x8B95;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGBA8_OES = 0x8B96;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGBA4_OES = 0x8B98;
  /** Part of <code>GL_OES_compressed_paletted_texture</code> */
  public static final int GL_PALETTE8_RGB5_A1_OES = 0x8B99;
  /** Part of <code>GL_OES_point_size_array</code> */
  public static final int GL_POINT_SIZE_ARRAY_OES = 0x8B9C;
  /** Part of <code>GL_OES_point_size_array</code> */
  public static final int GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
  /** Part of <code>GL_OES_point_size_array</code> */
  public static final int GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
  /** Part of <code>GL_OES_point_size_array</code> */
  public static final int GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
  /** Part of <code>GL_OES_point_size_array</code> */
  public static final int GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;
  /** Part of <code>GL_OES_compressed_ETC1_RGB8_texture</code> */
  public static final int GL_ETC1_RGB8_OES = 0x8D64;
  /** Part of <code>GL_OES_draw_texture</code> */
  public static final int GL_TEXTURE_CROP_RECT_OES = 0x8B9D;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
  /** Part of <code>GL_OES_EGL_image_external</code> */
  public static final int GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
  /** Part of <code>GL_OES_matrix_get</code> */
  public static final int GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
  /** Part of <code>GL_OES_matrix_get</code> */
  public static final int GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
  /** Part of <code>GL_OES_matrix_get</code> */
  public static final int GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;
  /** Part of <code>GL_OES_matrix_palette</code> */
  public static final int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
  /** Part of <code>GL_OES_vertex_array_object</code> */
  public static final int GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;
  /** Part of <code>GL_AMD_compressed_3DC_texture</code> */
  public static final int GL_3DC_X_AMD = 0x87F9;
  /** Part of <code>GL_AMD_compressed_3DC_texture</code> */
  public static final int GL_3DC_XY_AMD = 0x87FA;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGB_AMD = 0x8C92;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
  /** Part of <code>GL_AMD_compressed_ATC_texture</code> */
  public static final int GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_MAX_SAMPLES_APPLE = 0x8D57;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
  /** Part of <code>GL_APPLE_framebuffer_multisample</code> */
  public static final int GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
  /** Part of <code>GL_APPLE_texture_max_level</code> */
  public static final int GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_COLOR_EXT = 0x1800;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_DEPTH_EXT = 0x1801;
  /** Part of <code>GL_EXT_discard_framebuffer</code> */
  public static final int GL_STENCIL_EXT = 0x1802;
  /** Part of <code>GL_EXT_multisampled_render_to_texture</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
  /** Part of <code>GL_IMG_read_format</code> */
  public static final int GL_BGRA_IMG = 0x80E1;
  /** Part of <code>GL_IMG_read_format</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
  /** Part of <code>GL_IMG_texture_compression_pvrtc</code> */
  public static final int GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_MODULATE_COLOR_IMG = 0x8C04;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_ADD_BLEND_IMG = 0x8C09;
  /** Part of <code>GL_IMG_texture_env_enhanced_fixed_function</code> */
  public static final int GL_DOT3_RGBA_IMG = 0x86AF;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE0_IMG = 0x3000;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE1_IMG = 0x3001;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE2_IMG = 0x3002;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE3_IMG = 0x3003;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE4_IMG = 0x3004;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_CLIP_PLANE5_IMG = 0x3005;
  /** Part of <code>GL_IMG_user_clip_plane</code> */
  public static final int GL_MAX_CLIP_PLANES_IMG = 0x0D32;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_MAX_SAMPLES_IMG = 0x9135;
  /** Part of <code>GL_IMG_multisampled_render_to_texture</code> */
  public static final int GL_TEXTURE_SAMPLES_IMG = 0x9136;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_ALL_COMPLETED_NV = 0x84F2;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_STATUS_NV = 0x84F3;
  /** Part of <code>GL_NV_fence</code> */
  public static final int GL_FENCE_CONDITION_NV = 0x84F4;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_TYPE_QCOM = 0x8BD7;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_TARGET_QCOM = 0x8BDA;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
  /** Part of <code>GL_QCOM_extended_get</code> */
  public static final int GL_STATE_RESTORE = 0x8BDC;
  /** Part of <code>GL_QCOM_perfmon_global_mode</code> */
  public static final int GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
  /** Part of <code>GL_QCOM_writeonly_rendering</code> */
  public static final int GL_WRITEONLY_RENDERING_QCOM = 0x8823;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final int GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
  /** Part of <code>GL_QCOM_tiled_rendering</code> */
  public static final long GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;

  /** Entry point to C language function: <code> void {@native glAlphaFuncx}(GLenum func, GLclampx ref); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glAlphaFuncx(int func, int ref);

  /** Entry point to C language function: <code> void {@native glBindVertexArrayOES}(GLuint array); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glBindVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glClearColorx}(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glClearColorx(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glClearDepthx}(GLclampx depth); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glClearDepthx(int depth);

  /** Entry point to C language function: <code> void {@native glClipPlanef}(GLenum plane, const GLfloat *  equation); </code> <br>Part of <code>GL_VERSION_ES_CM</code>
      @param equation a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glClipPlanef(int plane, FloatBuffer equation);

  /** Entry point to C language function: <code> void {@native glClipPlanef}(GLenum plane, const GLfloat *  equation); </code> <br>Part of <code>GL_VERSION_ES_CM</code>   */
  public void glClipPlanef(int plane, float[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glClipPlanefIMG}(GLenum plane, const GLfloat *  equation); </code> <br>Part of <code>GL_IMG_user_clip_plane</code>
      @param equation a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glClipPlanefIMG(int plane, FloatBuffer equation);

  /** Entry point to C language function: <code> void {@native glClipPlanefIMG}(GLenum plane, const GLfloat *  equation); </code> <br>Part of <code>GL_IMG_user_clip_plane</code>   */
  public void glClipPlanefIMG(int plane, float[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glClipPlanex}(GLenum plane, const GLfixed *  equation); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param equation a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClipPlanex(int plane, IntBuffer equation);

  /** Entry point to C language function: <code> void {@native glClipPlanex}(GLenum plane, const GLfixed *  equation); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glClipPlanex(int plane, int[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glClipPlanexIMG}(GLenum plane, const GLfixed *  equation); </code> <br>Part of <code>GL_IMG_user_clip_plane</code>
      @param equation a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClipPlanexIMG(int plane, IntBuffer equation);

  /** Entry point to C language function: <code> void {@native glClipPlanexIMG}(GLenum plane, const GLfixed *  equation); </code> <br>Part of <code>GL_IMG_user_clip_plane</code>   */
  public void glClipPlanexIMG(int plane, int[] equation, int equation_offset);

  /** Entry point to C language function: <code> void {@native glColor4x}(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glColor4x(int red, int green, int blue, int alpha);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  renderbuffers); </code> <br>Part of <code>GL_NV_fence</code>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteFencesNV(int n, IntBuffer renderbuffers);

  /** Entry point to C language function: <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  renderbuffers); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glDeleteFencesNV(int n, int[] renderbuffers, int renderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArraysOES}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glDeleteVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangex}(GLclampx zNear, GLclampx zFar); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glDepthRangex(int zNear, int zFar);

  /** Entry point to C language function: <code> void {@native glDisableDriverControlQCOM}(GLuint driverControl); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glDisableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments); </code> <br>Part of <code>GL_EXT_discard_framebuffer</code>
      @param attachments a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, IntBuffer attachments);

  /** Entry point to C language function: <code> void {@native glDiscardFramebufferEXT}(GLenum target, GLsizei numAttachments, const GLenum *  attachments); </code> <br>Part of <code>GL_EXT_discard_framebuffer</code>   */
  public void glDiscardFramebufferEXT(int target, int numAttachments, int[] attachments, int attachments_offset);

  /** Entry point to C language function: <code> void {@native glDrawTexfOES}(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexfOES(float x, float y, float z, float width, float height);

  /** Entry point to C language function: <code> void {@native glDrawTexfvOES}(const GLfloat *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>
      @param coords a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glDrawTexfvOES(FloatBuffer coords);

  /** Entry point to C language function: <code> void {@native glDrawTexfvOES}(const GLfloat *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexfvOES(float[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glDrawTexiOES}(GLint x, GLint y, GLint z, GLint width, GLint height); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexiOES(int x, int y, int z, int width, int height);

  /** Entry point to C language function: <code> void {@native glDrawTexivOES}(const GLint *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawTexivOES(IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glDrawTexivOES}(const GLint *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexivOES(int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glDrawTexsOES}(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexsOES(short x, short y, short z, short width, short height);

  /** Entry point to C language function: <code> void {@native glDrawTexsvOES}(const GLshort *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>
      @param coords a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glDrawTexsvOES(ShortBuffer coords);

  /** Entry point to C language function: <code> void {@native glDrawTexsvOES}(const GLshort *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexsvOES(short[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glDrawTexxOES}(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexxOES(int x, int y, int z, int width, int height);

  /** Entry point to C language function: <code> void {@native glDrawTexxvOES}(const GLfixed *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawTexxvOES(IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glDrawTexxvOES}(const GLfixed *  coords); </code> <br>Part of <code>GL_OES_draw_texture</code>   */
  public void glDrawTexxvOES(int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetRenderbufferStorageOES}(GLenum target, GLeglImageOES image); </code> <br>Part of <code>GL_OES_EGL_image</code>   */
  public void glEGLImageTargetRenderbufferStorageOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEGLImageTargetTexture2DOES}(GLenum target, GLeglImageOES image); </code> <br>Part of <code>GL_OES_EGL_image</code>   */
  public void glEGLImageTargetTexture2DOES(int target, long image);

  /** Entry point to C language function: <code> void {@native glEnableDriverControlQCOM}(GLuint driverControl); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glEnableDriverControlQCOM(int driverControl);

  /** Entry point to C language function: <code> void {@native glEndTilingQCOM}(GLbitfield preserveMask); </code> <br>Part of <code>GL_QCOM_tiled_rendering</code>   */
  public void glEndTilingQCOM(int preserveMask);

  /** Entry point to C language function: <code> void {@native glExtGetBufferPointervQCOM}(GLenum target, GLvoid *  *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param params a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glExtGetBufferPointervQCOM(int target, PointerBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param buffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numBuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetBuffersQCOM(IntBuffer buffers, int maxBuffers, IntBuffer numBuffers);

  /** Entry point to C language function: <code> void {@native glExtGetBuffersQCOM}(GLuint *  buffers, GLint maxBuffers, GLint *  numBuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetBuffersQCOM(int[] buffers, int buffers_offset, int maxBuffers, int[] numBuffers, int numBuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param framebuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numFramebuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetFramebuffersQCOM(IntBuffer framebuffers, int maxFramebuffers, IntBuffer numFramebuffers);

  /** Entry point to C language function: <code> void {@native glExtGetFramebuffersQCOM}(GLuint *  framebuffers, GLint maxFramebuffers, GLint *  numFramebuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetFramebuffersQCOM(int[] framebuffers, int framebuffers_offset, int maxFramebuffers, int[] numFramebuffers, int numFramebuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param source a direct or array-backed {@link java.nio.ByteBuffer}
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, ByteBuffer source, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glExtGetProgramBinarySourceQCOM}(GLuint program, GLenum shadertype, GLchar *  source, GLint *  length); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetProgramBinarySourceQCOM(int program, int shadertype, byte[] source, int source_offset, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param programs a direct or array-backed {@link java.nio.IntBuffer}
      @param numPrograms a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetProgramsQCOM(IntBuffer programs, int maxPrograms, IntBuffer numPrograms);

  /** Entry point to C language function: <code> void {@native glExtGetProgramsQCOM}(GLuint *  programs, GLint maxPrograms, GLint *  numPrograms); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetProgramsQCOM(int[] programs, int programs_offset, int maxPrograms, int[] numPrograms, int numPrograms_offset);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}
      @param numRenderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetRenderbuffersQCOM(IntBuffer renderbuffers, int maxRenderbuffers, IntBuffer numRenderbuffers);

  /** Entry point to C language function: <code> void {@native glExtGetRenderbuffersQCOM}(GLuint *  renderbuffers, GLint maxRenderbuffers, GLint *  numRenderbuffers); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetRenderbuffersQCOM(int[] renderbuffers, int renderbuffers_offset, int maxRenderbuffers, int[] numRenderbuffers, int numRenderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders); </code> <br>Part of <code>GL_QCOM_extended_get2</code>
      @param shaders a direct or array-backed {@link java.nio.IntBuffer}
      @param numShaders a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetShadersQCOM(IntBuffer shaders, int maxShaders, IntBuffer numShaders);

  /** Entry point to C language function: <code> void {@native glExtGetShadersQCOM}(GLuint *  shaders, GLint maxShaders, GLint *  numShaders); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public void glExtGetShadersQCOM(int[] shaders, int shaders_offset, int maxShaders, int[] numShaders, int numShaders_offset);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glExtGetTexLevelParameterivQCOM}(GLuint texture, GLenum face, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetTexLevelParameterivQCOM(int texture, int face, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glExtGetTexSubImageQCOM}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *  texels); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param texels a direct or array-backed {@link java.nio.Buffer}   */
  public void glExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, Buffer texels);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures); </code> <br>Part of <code>GL_QCOM_extended_get</code>
      @param textures a direct or array-backed {@link java.nio.IntBuffer}
      @param numTextures a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glExtGetTexturesQCOM(IntBuffer textures, int maxTextures, IntBuffer numTextures);

  /** Entry point to C language function: <code> void {@native glExtGetTexturesQCOM}(GLuint *  textures, GLint maxTextures, GLint *  numTextures); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtGetTexturesQCOM(int[] textures, int textures_offset, int maxTextures, int[] numTextures, int numTextures_offset);

  /** Entry point to C language function: <code> GLboolean {@native glExtIsProgramBinaryQCOM}(GLuint program); </code> <br>Part of <code>GL_QCOM_extended_get2</code>   */
  public boolean glExtIsProgramBinaryQCOM(int program);

  /** Entry point to C language function: <code> void {@native glExtTexObjectStateOverrideiQCOM}(GLenum target, GLenum pname, GLint param); </code> <br>Part of <code>GL_QCOM_extended_get</code>   */
  public void glExtTexObjectStateOverrideiQCOM(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glFinishFenceNV}(GLuint mode); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glFinishFenceNV(int mode);

  /** Entry point to C language function: <code> void {@native glFogx}(GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glFogx(int pname, int param);

  /** Entry point to C language function: <code> void {@native glFogxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glFogxv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glFogxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glFogxv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples); </code> <br>Part of <code>GL_EXT_multisampled_render_to_texture</code>   */
  public void glFramebufferTexture2DMultisampleEXT(int target, int attachment, int textarget, int texture, int level, int samples);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture2DMultisampleIMG}(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei); </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code>   */
  public void glFramebufferTexture2DMultisampleIMG(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);

  /** Entry point to C language function: <code> void {@native glFrustumx}(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glFrustumx(int left, int right, int bottom, int top, int zNear, int zFar);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  renderbuffers); </code> <br>Part of <code>GL_NV_fence</code>
      @param renderbuffers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenFencesNV(int n, IntBuffer renderbuffers);

  /** Entry point to C language function: <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  renderbuffers); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGenFencesNV(int n, int[] renderbuffers, int renderbuffers_offset);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenVertexArraysOES(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glGenVertexArraysOES}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public void glGenVertexArraysOES(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glGetClipPlanef}(GLenum pname, const GLfloat *  eqn); </code> <br>Part of <code>GL_VERSION_ES_CM</code>
      @param eqn a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetClipPlanef(int pname, FloatBuffer eqn);

  /** Entry point to C language function: <code> void {@native glGetClipPlanef}(GLenum pname, const GLfloat *  eqn); </code> <br>Part of <code>GL_VERSION_ES_CM</code>   */
  public void glGetClipPlanef(int pname, float[] eqn, int eqn_offset);

  /** Entry point to C language function: <code> void {@native glGetClipPlanex}(GLenum pname, GLfixed *  eqn); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param eqn a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetClipPlanex(int pname, IntBuffer eqn);

  /** Entry point to C language function: <code> void {@native glGetClipPlanex}(GLenum pname, GLfixed *  eqn); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetClipPlanex(int pname, int[] eqn, int eqn_offset);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString); </code> <br>Part of <code>GL_QCOM_driver_control</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControlString a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, IntBuffer length, ByteBuffer driverControlString);

  /** Entry point to C language function: <code> void {@native glGetDriverControlStringQCOM}(GLuint driverControl, GLsizei bufSize, GLsizei *  length, GLchar *  driverControlString); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glGetDriverControlStringQCOM(int driverControl, int bufSize, int[] length, int length_offset, byte[] driverControlString, int driverControlString_offset);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls); </code> <br>Part of <code>GL_QCOM_driver_control</code>
      @param num a direct or array-backed {@link java.nio.IntBuffer}
      @param driverControls a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetDriverControlsQCOM(IntBuffer num, int size, IntBuffer driverControls);

  /** Entry point to C language function: <code> void {@native glGetDriverControlsQCOM}(GLint *  num, GLsizei size, GLuint *  driverControls); </code> <br>Part of <code>GL_QCOM_driver_control</code>   */
  public void glGetDriverControlsQCOM(int[] num, int num_offset, int size, int[] driverControls, int driverControls_offset);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFenceivNV(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glGetFenceivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFixedv}(GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetFixedv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetFixedv}(GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetFixedv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetLightxv}(GLenum light, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetLightxv(int light, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetLightxv}(GLenum light, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetLightxv(int light, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMaterialxv}(GLenum face, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetMaterialxv(int face, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetMaterialxv}(GLenum face, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetMaterialxv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexEnvxv}(GLenum tenv, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexEnvxv(int tenv, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexEnvxv}(GLenum tenv, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetTexEnvxv(int tenv, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexGenxvOES}(GLenum coord, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_OES_texture_cube_map</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexGenxv(int coord, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexGenxvOES}(GLenum coord, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_OES_texture_cube_map</code>   */
  public void glGetTexGenxv(int coord, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterxv}(GLenum target, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterxv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterxv}(GLenum target, GLenum pname, GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glGetTexParameterxv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsFenceNV}(GLuint renderbuffer); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glIsFenceNV(int renderbuffer);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexArrayOES}(GLuint array); </code> <br>Part of <code>GL_OES_vertex_array_object</code>   */
  public boolean glIsVertexArrayOES(int array);

  /** Entry point to C language function: <code> void {@native glLightModelx}(GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLightModelx(int pname, int param);

  /** Entry point to C language function: <code> void {@native glLightModelxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glLightModelxv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glLightModelxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLightModelxv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glLightx}(GLenum light, GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLightx(int light, int pname, int param);

  /** Entry point to C language function: <code> void {@native glLightxv}(GLenum light, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glLightxv(int light, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glLightxv}(GLenum light, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLightxv(int light, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glLineWidthx}(GLfixed width); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLineWidthx(int width);

  /** Entry point to C language function: <code> void {@native glLoadMatrixx}(const GLfixed *  m); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param m a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glLoadMatrixx(IntBuffer m);

  /** Entry point to C language function: <code> void {@native glLoadMatrixx}(const GLfixed *  m); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glLoadMatrixx(int[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glLoadPaletteFromModelViewMatrixOES}(void); </code> <br>Part of <code>GL_OES_matrix_palette</code>   */
  public void glLoadPaletteFromModelViewMatrixOES();

  /** Entry point to C language function: <code> void {@native glMaterialx}(GLenum face, GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glMaterialx(int face, int pname, int param);

  /** Entry point to C language function: <code> void {@native glMaterialxv}(GLenum face, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMaterialxv(int face, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glMaterialxv}(GLenum face, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glMaterialxv(int face, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glMultMatrixx}(const GLfixed *  m); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param m a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultMatrixx(IntBuffer m);

  /** Entry point to C language function: <code> void {@native glMultMatrixx}(const GLfixed *  m); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glMultMatrixx(int[] m, int m_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoord4x}(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glMultiTexCoord4x(int target, int s, int t, int r, int q);

  /** Entry point to C language function: <code> void {@native glNormal3x}(GLfixed nx, GLfixed ny, GLfixed nz); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glNormal3x(int nx, int ny, int nz);

  /** Entry point to C language function: <code> void {@native glOrthox}(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glOrthox(int left, int right, int bottom, int top, int zNear, int zFar);

  /** Entry point to C language function: <code> void {@native glPointParameterx}(GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glPointParameterx(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPointParameterxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPointParameterxv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameterxv}(GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glPointParameterxv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointSizePointerOES}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_OES_point_size_array</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glPointSizePointerOES(int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glPointSizex}(GLfixed size); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glPointSizex(int size);

  /** Entry point to C language function: <code> void {@native glPolygonOffsetx}(GLfixed factor, GLfixed units); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glPolygonOffsetx(int factor, int units);

  /** Entry point to C language function: <code> GLbitfield {@native glQueryMatrixxOES}(GLfixed *  mantissa, GLint *  exponent); </code> <br>Part of <code>GL_OES_query_matrix</code>
      @param mantissa a direct or array-backed {@link java.nio.IntBuffer}
      @param exponent a direct or array-backed {@link java.nio.IntBuffer}   */
  public int glQueryMatrixxOES(IntBuffer mantissa, IntBuffer exponent);

  /** Entry point to C language function: <code> GLbitfield {@native glQueryMatrixxOES}(GLfixed *  mantissa, GLint *  exponent); </code> <br>Part of <code>GL_OES_query_matrix</code>   */
  public int glQueryMatrixxOES(int[] mantissa, int mantissa_offset, int[] exponent, int exponent_offset);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleAPPLE}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_APPLE_framebuffer_multisample</code>   */
  public void glRenderbufferStorageMultisampleAPPLE(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisampleIMG}(GLenum, GLsizei, GLenum, GLsizei, GLsizei); </code> <br>Part of <code>GL_IMG_multisampled_render_to_texture</code>   */
  public void glRenderbufferStorageMultisampleIMG(int arg0, int arg1, int arg2, int arg3, int arg4);

  /** Entry point to C language function: <code> void {@native glResolveMultisampleFramebufferAPPLE}(void); </code> <br>Part of <code>GL_APPLE_framebuffer_multisample</code>   */
  public void glResolveMultisampleFramebufferAPPLE();

  /** Entry point to C language function: <code> void {@native glRotatex}(GLfixed angle, GLfixed x, GLfixed y, GLfixed z); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glRotatex(int angle, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glSampleCoveragex}(GLclampx value, GLboolean invert); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glSampleCoveragex(int value, boolean invert);

  /** Entry point to C language function: <code> void {@native glScalex}(GLfixed x, GLfixed y, GLfixed z); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glScalex(int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glSetFenceNV}(GLuint modeRGB, GLenum modeAlpha); </code> <br>Part of <code>GL_NV_fence</code>   */
  public void glSetFenceNV(int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glStartTilingQCOM}(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask); </code> <br>Part of <code>GL_QCOM_tiled_rendering</code>   */
  public void glStartTilingQCOM(int x, int y, int width, int height, int preserveMask);

  /** Entry point to C language function: <code> GLboolean {@native glTestFenceNV}(GLuint renderbuffer); </code> <br>Part of <code>GL_NV_fence</code>   */
  public boolean glTestFenceNV(int renderbuffer);

  /** Entry point to C language function: <code> void {@native glTexEnvx}(GLenum target, GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glTexEnvx(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glTexEnvxv}(GLenum target, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexEnvxv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexEnvxv}(GLenum target, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glTexEnvxv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexGenxOES}(GLenum coord, GLenum pname, GLfixed param); </code> <br>Part of <code>GL_OES_texture_cube_map</code>   */
  public void glTexGenx(int coord, int pname, int param);

  /** Entry point to C language function: <code> void {@native glTexGenxvOES}(GLenum coord, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_OES_texture_cube_map</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexGenxv(int coord, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexGenxvOES}(GLenum coord, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_OES_texture_cube_map</code>   */
  public void glTexGenxv(int coord, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterx}(GLenum target, GLenum pname, GLfixed param); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glTexParameterx(int target, int pname, int param);

  /** Entry point to C language function: <code> void {@native glTexParameterxv}(GLenum target, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterxv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterxv}(GLenum target, GLenum pname, const GLfixed *  params); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glTexParameterxv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTranslatex}(GLfixed x, GLfixed y, GLfixed z); </code> <br>Part of <code>GL_VERSION_ES_CL_CM</code>   */
  public void glTranslatex(int x, int y, int z);


} // end of class GLES1
