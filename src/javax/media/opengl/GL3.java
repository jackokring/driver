/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:27:40 CEST 2012 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <P> 
  * This interface contains all core, forward compatible, OpenGL methods starting from 3.1,
  * inclusive, as well as most of it's extensions defined at the time of this specification.<br>
  * Note: OpenGL 3.0 forward compatible, non deprecated functionality is included in the 
  * 3.1 specification, hence the {@link GL2GL3} implemented interface.<br>
  * Note: OpenGL 3.1 forward compatible no more includes fixed point functionality.
  * </P>
  */
public interface GL3 extends GL2GL3{

  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_LINES_ADJACENCY = 0x000A;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_LINE_STRIP_ADJACENCY = 0x000B;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_TRIANGLES_ADJACENCY = 0x000C;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_PROGRAM_POINT_SIZE = 0x8642;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_GEOMETRY_SHADER = 0x8DD9;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_GEOMETRY_VERTICES_OUT = 0x8916;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_GEOMETRY_INPUT_TYPE = 0x8917;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
  /** Part of <code>GL_VERSION_3_2</code> */
  public static final int GL_CONTEXT_PROFILE_MASK = 0x9126;
  /** Part of <code>GL_VERSION_3_3</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_OBJECT_TYPE = 0x9112;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_CONDITION = 0x9113;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_STATUS = 0x9114;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FLAGS = 0x9115;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FENCE = 0x9116;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_UNSIGNALED = 0x9118;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SIGNALED = 0x9119;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_ALREADY_SIGNALED = 0x911A;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_TIMEOUT_EXPIRED = 0x911B;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_CONDITION_SATISFIED = 0x911C;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_WAIT_FAILED = 0x911D;
  /** Part of <code>GL_ARB_sync</code> */
  public static final int GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
  /** Part of <code>GL_ARB_texture_compression_bptc</code> */
  public static final int GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
  /** Part of <code>GL_ARB_texture_compression_bptc</code> */
  public static final int GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
  /** Part of <code>GL_ARB_texture_compression_bptc</code> */
  public static final int GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
  /** Part of <code>GL_ARB_texture_compression_bptc</code> */
  public static final int GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
  /** Part of <code>GL_ARB_draw_indirect</code> */
  public static final int GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
  /** Part of <code>GL_ARB_draw_indirect</code> */
  public static final int GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
  /** Part of <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
  /** Part of <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
  /** Part of <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
  /** Part of <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
  /** Part of <code>GL_ARB_gpu_shader5</code> */
  public static final int GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC2 = 0x8FFC;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC3 = 0x8FFD;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_VEC4 = 0x8FFE;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2 = 0x8F46;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3 = 0x8F47;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4 = 0x8F48;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2x3 = 0x8F49;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT2x4 = 0x8F4A;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3x2 = 0x8F4B;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT3x4 = 0x8F4C;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4x2 = 0x8F4D;
  /** Part of <code>GL_ARB_gpu_shader_fp64</code> */
  public static final int GL_DOUBLE_MAT4x3 = 0x8F4E;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCHES = 0x000E;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_VERTICES = 0x8E72;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_MODE = 0x8E76;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_SPACING = 0x8E77;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_GEN_POINT_MODE = 0x8E79;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_ISOLINES = 0x8E7A;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_FRACTIONAL_ODD = 0x8E7B;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_FRACTIONAL_EVEN = 0x8E7C;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_PATCH_VERTICES = 0x8E7D;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_EVALUATION_SHADER = 0x8E87;
  /** Part of <code>GL_ARB_tessellation_shader</code> */
  public static final int GL_TESS_CONTROL_SHADER = 0x8E88;

  /** Entry point to C language function: <code> GLenum {@native glClientWaitSync}(GLsync sync, GLbitfield flags, GLuint64 timeout); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public int glClientWaitSync(long sync, int flags, long timeout);

  /** Entry point to C language function: <code> void {@native glDeleteSync}(GLsync sync); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glDeleteSync(long sync);

  /** Entry point to C language function: <code> void {@native glDrawArraysIndirect}(GLenum mode, const GLvoid *  indirect); </code> <br>Part of <code>GL_ARB_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawArraysIndirect(int mode, Buffer indirect);

  /** Entry point to C language function: <code> void {@native glDrawElementsIndirect}(GLenum mode, GLenum type, const GLvoid *  indirect); </code> <br>Part of <code>GL_ARB_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsIndirect(int mode, int type, Buffer indirect);

  /** Entry point to C language function: <code> GLsync {@native glFenceSync}(GLenum condition, GLbitfield flags); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public long glFenceSync(int condition, int flags);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_VERSION_3_2</code>   */
  public void glFramebufferTexture(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glGetBufferParameteri64v}(GLenum target, GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_VERSION_3_2</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetBufferParameteri64v(int target, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetBufferParameteri64v}(GLenum target, GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_VERSION_3_2</code>   */
  public void glGetBufferParameteri64v(int target, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetInteger64i_v}(GLenum target, GLuint index, GLint64 *  data); </code> <br>Part of <code>GL_VERSION_3_2</code>
      @param data a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetInteger64i_v(int target, int index, LongBuffer data);

  /** Entry point to C language function: <code> void {@native glGetInteger64i_v}(GLenum target, GLuint index, GLint64 *  data); </code> <br>Part of <code>GL_VERSION_3_2</code>   */
  public void glGetInteger64i_v(int target, int index, long[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetInteger64v}(GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_ARB_sync</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetInteger64v(int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInteger64v}(GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetInteger64v(int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSynciv}(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_ARB_sync</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSynciv(long sync, int pname, int bufSize, IntBuffer length, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetSynciv}(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *  length, GLint *  values); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glGetSynciv(long sync, int pname, int bufSize, int[] length, int length_offset, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetUniformdv(int program, int location, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformdv}(GLuint program, GLint location, GLdouble *  params); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glGetUniformdv(int program, int location, double[] params, int params_offset);

  /** Entry point to C language function: <code> GLboolean {@native glIsSync}(GLsync sync); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public boolean glIsSync(long sync);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values); </code> <br>Part of <code>GL_ARB_tessellation_shader</code>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPatchParameterfv(int pname, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glPatchParameterfv}(GLenum pname, const GLfloat *  values); </code> <br>Part of <code>GL_ARB_tessellation_shader</code>   */
  public void glPatchParameterfv(int pname, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glPatchParameteri}(GLenum pname, GLint value); </code> <br>Part of <code>GL_ARB_tessellation_shader</code>   */
  public void glPatchParameteri(int pname, int value);

  /** Entry point to C language function: <code> void {@native glUniform1d}(GLint location, GLdouble x); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform1d(int location, double x);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform1dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform1dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2d}(GLint location, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform2d(int location, double x, double y);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform2dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform2dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3d}(GLint location, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform3d(int location, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform3dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform3dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4d}(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform4d(int location, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniform4dv(int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4dv}(GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniform4dv(int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix2x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix3x4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4x2dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3dv}(GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_gpu_shader_fp64</code>   */
  public void glUniformMatrix4x3dv(int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribDivisor}(GLuint index, GLuint divisor); </code> <br>Part of <code>GL_VERSION_3_3</code>   */
  public void glVertexAttribDivisor(int index, int divisor);

  /** Entry point to C language function: <code> void {@native glWaitSync}(GLsync sync, GLbitfield flags, GLuint64 timeout); </code> <br>Part of <code>GL_ARB_sync</code>   */
  public void glWaitSync(long sync, int flags, long timeout);


} // end of class GL3
