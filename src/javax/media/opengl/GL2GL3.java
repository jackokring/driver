/* !---- DO NOT EDIT: This file autogenerated by com/jogamp/gluegen/opengl/GLEmitter.java on Fri Aug 03 06:27:18 CEST 2012 ----! */

package javax.media.opengl;

import java.util.*;
import javax.media.opengl.*;
import javax.media.opengl.fixedfunc.*;
import jogamp.opengl.*;
import java.io.PrintStream;
import com.jogamp.gluegen.runtime.*;
import com.jogamp.common.os.*;
import com.jogamp.common.nio.*;
import java.nio.*;

 /**
  * <P> 
  * Interface containing the common subset of core GL3 (OpenGL 3.1+) and GL2 (OpenGL 3.0), 
  * also known as the OpenGL 3.0 forward compatible, non deprecated subset.<br>
  * This interface reflects only the programmable shader functionality of desktop OpenGL<br>
  * </P>
  */
public interface GL2GL3 extends GL2ES2{

  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLE = 0x140A;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT_SIZE_RANGE = 0x0B12;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE_WIDTH_RANGE = 0x0B22;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POINT = 0x1B00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LINE = 0x1B01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FILL = 0x1B02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH = 0x0B41;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_POINT = 0x2A01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_OFFSET_LINE = 0x2A02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_LEFT = 0x0406;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_RIGHT = 0x0407;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_LEFT = 0x0400;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_FRONT_RIGHT = 0x0401;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_LEFT = 0x0402;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BACK_RIGHT = 0x0403;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_GREEN = 0x1904;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_BLUE = 0x1905;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_READ_BUFFER = 0x0C02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DRAW_BUFFER = 0x0C01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DOUBLEBUFFER = 0x0C32;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STEREO = 0x0C33;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_COLOR = 0x1800;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_DEPTH = 0x1801;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_STENCIL = 0x1802;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_POLYGON_SMOOTH_HINT = 0x0C53;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_LSB_FIRST = 0x0D01;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_ROW_LENGTH = 0x0D02;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SKIP_PIXELS = 0x0D04;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SKIP_ROWS = 0x0D03;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_PACK_SWAP_BYTES = 0x0D00;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_LSB_FIRST = 0x0CF1;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_UNPACK_SWAP_BYTES = 0x0CF0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_1D = 0x0DE0;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_WIDTH = 0x1000;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_HEIGHT = 0x1001;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_RED_SIZE = 0x805C;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_GREEN_SIZE = 0x805D;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_BLUE_SIZE = 0x805E;
  /** Part of <code>GL_VERSION_1_0</code> */
  public static final int GL_TEXTURE_ALPHA_SIZE = 0x805F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_1D = 0x8063;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_PROXY_TEXTURE_2D = 0x8064;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_BINDING_1D = 0x8068;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_R3_G3_B2 = 0x2A10;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB4 = 0x804F;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB5 = 0x8050;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB12 = 0x8053;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGB16 = 0x8054;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA2 = 0x8055;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA12 = 0x805A;
  /** Part of <code>GL_VERSION_1_1</code> */
  public static final int GL_RGBA16 = 0x805B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_SKIP_IMAGES = 0x806B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PACK_IMAGE_HEIGHT = 0x806C;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNPACK_SKIP_IMAGES = 0x806D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_PROXY_TEXTURE_3D = 0x8070;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_DEPTH = 0x8071;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_BGR = 0x80E0;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_MAX_ELEMENTS_INDICES = 0x80E9;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MIN_LOD = 0x813A;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MAX_LOD = 0x813B;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
  /** Part of <code>GL_VERSION_1_2</code> */
  public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MIN = 0x8007;
  /** Part of <code>GL_ARB_imaging</code> */
  public static final int GL_MAX = 0x8008;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGB = 0x84ED;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_COMPRESSED_RGBA = 0x84EE;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_TEXTURE_COMPRESSED = 0x86A1;
  /** Part of <code>GL_VERSION_1_3</code> */
  public static final int GL_CLAMP_TO_BORDER = 0x812D;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
  /** Part of <code>GL_VERSION_1_4</code> */
  public static final int GL_TEXTURE_DEPTH_SIZE = 0x884A;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_QUERY_COUNTER_BITS = 0x8864;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_ONLY = 0x88B8;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_READ_WRITE = 0x88BA;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STREAM_READ = 0x88E1;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STREAM_COPY = 0x88E2;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STATIC_READ = 0x88E5;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_STATIC_COPY = 0x88E6;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_DYNAMIC_READ = 0x88E9;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_DYNAMIC_COPY = 0x88EA;
  /** Part of <code>GL_VERSION_1_5</code> */
  public static final int GL_SAMPLES_PASSED = 0x8914;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_MAX_VARYING_FLOATS = 0x8B4B;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D = 0x8B5D;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_SAMPLER_1D_SHADOW = 0x8B61;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_LOWER_LEFT = 0x8CA1;
  /** Part of <code>GL_VERSION_2_0</code> */
  public static final int GL_UPPER_LEFT = 0x8CA2;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_PACK_BUFFER = 0x88EB;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER = 0x88EC;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT2x3 = 0x8B65;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT2x4 = 0x8B66;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT3x2 = 0x8B67;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT3x4 = 0x8B68;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT4x2 = 0x8B69;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_FLOAT_MAT4x3 = 0x8B6A;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_SRGB8 = 0x8C41;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB = 0x8C48;
  /** Part of <code>GL_VERSION_2_1</code> */
  public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE0 = 0x3000;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE1 = 0x3001;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE2 = 0x3002;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE3 = 0x3003;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE4 = 0x3004;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE5 = 0x3005;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE6 = 0x3006;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CLIP_DISTANCE7 = 0x3007;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_CLIP_DISTANCES = 0x0D32;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAJOR_VERSION = 0x821B;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MINOR_VERSION = 0x821C;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_NUM_EXTENSIONS = 0x821D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAGS = 0x821E;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_DEPTH_BUFFER = 0x8223;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_STENCIL_BUFFER = 0x8224;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RED = 0x8225;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_COMPRESSED_RG = 0x8226;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x0001;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_CLAMP_READ_COLOR = 0x891C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code> */
  public static final int GL_FIXED_ONLY = 0x891D;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_MAX_VARYING_COMPONENTS = 0x8B4B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_1D_ARRAY = 0x8C18;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_array</code> */
  public static final int GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_shared_exponent</code> */
  public static final int GL_RGB9_E5 = 0x8C3D;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_shared_exponent</code> */
  public static final int GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_shared_exponent</code> */
  public static final int GL_TEXTURE_SHARED_SIZE = 0x8C3F;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_PRIMITIVES_GENERATED = 0x8C87;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_RASTERIZER_DISCARD = 0x8C89;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_INTERLEAVED_ATTRIBS = 0x8C8C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_SEPARATE_ATTRIBS = 0x8C8D;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA32UI = 0x8D70;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB32UI = 0x8D71;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA16UI = 0x8D76;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB16UI = 0x8D77;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA8UI = 0x8D7C;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB8UI = 0x8D7D;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA32I = 0x8D82;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB32I = 0x8D83;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA16I = 0x8D88;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB16I = 0x8D89;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA8I = 0x8D8E;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB8I = 0x8D8F;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RED_INTEGER = 0x8D94;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_GREEN_INTEGER = 0x8D95;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BLUE_INTEGER = 0x8D96;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGB_INTEGER = 0x8D98;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_RGBA_INTEGER = 0x8D99;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BGR_INTEGER = 0x8D9A;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code> */
  public static final int GL_BGRA_INTEGER = 0x8D9B;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_1D_ARRAY = 0x8DC0;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_VEC2 = 0x8DC6;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_VEC3 = 0x8DC7;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_VEC4 = 0x8DC8;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_1D = 0x8DC9;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_2D = 0x8DCA;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_3D = 0x8DCB;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_CUBE = 0x8DCC;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_WAIT = 0x8E13;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_NO_WAIT = 0x8E14;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_BY_REGION_WAIT = 0x8E15;
  /** Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code> */
  public static final int GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BUFFER_ACCESS_FLAGS = 0x911F;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BUFFER_MAP_LENGTH = 0x9120;
  /** Part of <code>GL_VERSION_3_0</code> */
  public static final int GL_BUFFER_MAP_OFFSET = 0x9121;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_SAMPLER_BUFFER = 0x8DC2;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_2D_RECT = 0x8DCD;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_INT_SAMPLER_BUFFER = 0x8DD0;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
  /** Part of <code>GL_VERSION_3_1</code>; <code>GL_EXT_gpu_shader4</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_PRIMITIVE_RESTART = 0x8F9D;
  /** Part of <code>GL_VERSION_3_1</code> */
  public static final int GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
  /** Part of <code>GL_ARB_texture_rectangle</code>, <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_RECT_ARB = 0x8B63;
  /** Part of <code>GL_ARB_texture_rectangle</code>, <code>GL_ARB_shader_objects</code> */
  public static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
  /** Part of <code>GL_ARB_texture_rectangle</code> */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_RED_TYPE = 0x8C10;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_GREEN_TYPE = 0x8C11;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_BLUE_TYPE = 0x8C12;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_ALPHA_TYPE = 0x8C13;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_ARB_texture_float</code> */
  public static final int GL_TEXTURE_DEPTH_TYPE = 0x8C16;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_DEPTH_COMPONENT32F = 0x8CAC;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_DEPTH32F_STENCIL8 = 0x8CAD;
  /** Part of <code>GL_ARB_depth_buffer_float</code> */
  public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_DEFAULT = 0x8218;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_UNDEFINED = 0x8219;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_packed_depth_stencil</code> */
  public static final int GL_TEXTURE_STENCIL_SIZE = 0x88F1;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_framebuffer_blit</code> */
  public static final int GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_framebuffer_blit</code> */
  public static final int GL_READ_FRAMEBUFFER = 0x8CA8;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_framebuffer_blit</code> */
  public static final int GL_DRAW_FRAMEBUFFER = 0x8CA9;
  /** Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_framebuffer_blit</code> */
  public static final int GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_RENDERBUFFER_SAMPLES = 0x8CAB;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_STENCIL_INDEX16 = 0x8D49;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
  /** Part of <code>GL_ARB_framebuffer_object</code> */
  public static final int GL_MAX_SAMPLES = 0x8D57;
  /** Part of <code>GL_ARB_framebuffer_sRGB</code> */
  public static final int GL_FRAMEBUFFER_SRGB = 0x8DB9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINES_ADJACENCY_ARB = 0x000A;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_SHADER_ARB = 0x8DD9;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
  /** Part of <code>GL_ARB_geometry_shader4</code> */
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_READ_BIT = 0x0001;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_WRITE_BIT = 0x0002;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
  /** Part of <code>GL_ARB_map_buffer_range</code> */
  public static final int GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER = 0x8C2A;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
  /** Part of <code>GL_ARB_texture_buffer_object</code> */
  public static final int GL_TEXTURE_BUFFER_FORMAT = 0x8C2E;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
  /** Part of <code>GL_ARB_texture_compression_rgtc</code> */
  public static final int GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG_INTEGER = 0x8228;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16 = 0x822A;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16 = 0x822C;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32F = 0x822E;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32F = 0x8230;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R8I = 0x8231;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R8UI = 0x8232;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16I = 0x8233;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R16UI = 0x8234;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32I = 0x8235;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_R32UI = 0x8236;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG8I = 0x8237;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG8UI = 0x8238;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16I = 0x8239;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG16UI = 0x823A;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32I = 0x823B;
  /** Part of <code>GL_ARB_texture_rg</code> */
  public static final int GL_RG32UI = 0x823C;
  /** Part of <code>GL_ARB_vertex_array_object</code> */
  public static final int GL_VERTEX_ARRAY_BINDING = 0x85B5;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER = 0x8A11;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_BINDING = 0x8A28;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_START = 0x8A29;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_TYPE = 0x8A37;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_SIZE = 0x8A38;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_NAME_LENGTH = 0x8A39;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_OFFSET = 0x8A3B;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
  /** Part of <code>GL_ARB_copy_buffer</code> */
  public static final int GL_COPY_READ_BUFFER = 0x8F36;
  /** Part of <code>GL_ARB_copy_buffer</code> */
  public static final int GL_COPY_WRITE_BUFFER = 0x8F37;
  /** Part of <code>GL_ARB_depth_clamp</code> */
  public static final int GL_DEPTH_CLAMP = 0x864F;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_LAST_VERTEX_CONVENTION = 0x8E4E;
  /** Part of <code>GL_ARB_provoking_vertex</code> */
  public static final int GL_PROVOKING_VERTEX = 0x8E4F;
  /** Part of <code>GL_ARB_seamless_cube_map</code> */
  public static final int GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_POSITION = 0x8E50;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_MASK = 0x8E51;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLE_MASK_VALUE = 0x8E52;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_SAMPLES = 0x9106;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
  /** Part of <code>GL_ARB_texture_multisample</code> */
  public static final int GL_MAX_INTEGER_SAMPLES = 0x9110;
  /** Part of <code>GL_ARB_sample_shading</code> */
  public static final int GL_SAMPLE_SHADING = 0x8C36;
  /** Part of <code>GL_ARB_sample_shading</code> */
  public static final int GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
  /** Part of <code>GL_ARB_texture_cube_map_array</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
  /** Part of <code>GL_ARB_texture_gather</code> */
  public static final int GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
  /** Part of <code>GL_ARB_texture_gather</code> */
  public static final int GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_SHADER_INCLUDE_ARB = 0x8DAE;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
  /** Part of <code>GL_ARB_shading_language_include</code> */
  public static final int GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
  /** Part of <code>GL_ARB_blend_func_extended</code> */
  public static final int GL_SRC1_COLOR = 0x88F9;
  /** Part of <code>GL_ARB_blend_func_extended</code> */
  public static final int GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
  /** Part of <code>GL_ARB_blend_func_extended</code> */
  public static final int GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
  /** Part of <code>GL_ARB_blend_func_extended</code> */
  public static final int GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
  /** Part of <code>GL_ARB_sampler_objects</code> */
  public static final int GL_SAMPLER_BINDING = 0x8919;
  /** Part of <code>GL_ARB_texture_rgb10_a2ui</code> */
  public static final int GL_RGB10_A2UI = 0x906F;
  /** Part of <code>GL_ARB_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_R = 0x8E42;
  /** Part of <code>GL_ARB_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_G = 0x8E43;
  /** Part of <code>GL_ARB_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_B = 0x8E44;
  /** Part of <code>GL_ARB_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_A = 0x8E45;
  /** Part of <code>GL_ARB_texture_swizzle</code> */
  public static final int GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
  /** Part of <code>GL_ARB_timer_query</code> */
  public static final int GL_TIME_ELAPSED = 0x88BF;
  /** Part of <code>GL_ARB_timer_query</code> */
  public static final int GL_TIMESTAMP = 0x8E28;
  /** Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code> */
  public static final int GL_INT_2_10_10_10_REV = 0x8D9F;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_ACTIVE_SUBROUTINES = 0x8DE5;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_MAX_SUBROUTINES = 0x8DE7;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
  /** Part of <code>GL_ARB_shader_subroutine</code> */
  public static final int GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
  /** Part of <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK = 0x8E22;
  /** Part of <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
  /** Part of <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
  /** Part of <code>GL_ARB_transform_feedback2</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
  /** Part of <code>GL_ARB_transform_feedback3</code> */
  public static final int GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
  /** Part of <code>GL_ARB_transform_feedback3</code> */
  public static final int GL_MAX_VERTEX_STREAMS = 0x8E71;
  /** Part of <code>GL_ARB_get_program_binary</code> */
  public static final int GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
  /** Part of <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_GEOMETRY_SHADER_BIT = 0x00000004;
  /** Part of <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
  /** Part of <code>GL_ARB_separate_shader_objects</code> */
  public static final int GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_MAX_VIEWPORTS = 0x825B;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_LAYER_PROVOKING_VERTEX = 0x825E;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
  /** Part of <code>GL_ARB_viewport_array</code> */
  public static final int GL_UNDEFINED_VERTEX = 0x8260;
  /** Part of <code>GL_ARB_cl_event</code> */
  public static final int GL_SYNC_CL_EVENT_ARB = 0x8240;
  /** Part of <code>GL_ARB_cl_event</code> */
  public static final int GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_API_ARB = 0x8246;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
  /** Part of <code>GL_ARB_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
  /** Part of <code>GL_ARB_robustness</code> */
  public static final int GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
  /** Part of <code>GL_ARB_compressed_texture_pixel_storage</code> */
  public static final int GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
  /** Part of <code>GL_ARB_internalformat_query</code> */
  public static final int GL_NUM_SAMPLE_COUNTS = 0x9380;
  /** Part of <code>GL_ARB_map_buffer_alignment</code> */
  public static final int GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
  /** Part of <code>GL_ARB_shader_atomic_counters</code> */
  public static final int GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNIFORM_BARRIER_BIT = 0x00000004;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_COMMAND_BARRIER_BIT = 0x00000040;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_IMAGE_UNITS = 0x8F38;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_NAME = 0x8F3A;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_LEVEL = 0x8F3B;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_LAYERED = 0x8F3C;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_LAYER = 0x8F3D;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_ACCESS = 0x8F3E;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_1D = 0x904C;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_2D = 0x904D;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_3D = 0x904E;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_2D_RECT = 0x904F;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_CUBE = 0x9050;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BUFFER = 0x9051;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_1D_ARRAY = 0x9052;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_2D_ARRAY = 0x9053;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_2D_MULTISAMPLE = 0x9055;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_1D = 0x9057;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_2D = 0x9058;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_3D = 0x9059;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_2D_RECT = 0x905A;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_CUBE = 0x905B;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_BUFFER = 0x905C;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_1D_ARRAY = 0x905D;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_2D_ARRAY = 0x905E;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_IMAGE_SAMPLES = 0x906D;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_BINDING_FORMAT = 0x906E;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_SAMPLER_BUFFER_AMD = 0x9001;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_TESSELLATION_MODE_AMD = 0x9004;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_TESSELLATION_FACTOR_AMD = 0x9005;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_DISCRETE_AMD = 0x9006;
  /** Part of <code>GL_AMD_vertex_shader_tesselator</code> */
  public static final int GL_CONTINUOUS_AMD = 0x9007;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RED_SNORM = 0x8F90;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RG_SNORM = 0x8F91;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGB_SNORM = 0x8F92;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGBA_SNORM = 0x8F93;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_R8_SNORM = 0x8F94;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RG8_SNORM = 0x8F95;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGB8_SNORM = 0x8F96;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGBA8_SNORM = 0x8F97;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_R16_SNORM = 0x8F98;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RG16_SNORM = 0x8F99;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGB16_SNORM = 0x8F9A;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_RGBA16_SNORM = 0x8F9B;
  /** Part of <code>GL_EXT_texture_snorm</code> */
  public static final int GL_SIGNED_NORMALIZED = 0x8F9C;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_GPU_ADDRESS_NV = 0x8F34;
  /** Part of <code>GL_NV_shader_buffer_load</code> */
  public static final int GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
  /** Part of <code>GL_NV_vertex_buffer_unified_memory</code> */
  public static final int GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
  /** Part of <code>GL_AMD_debug_output</code> */
  public static final int GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
  /** Part of <code>GL_AMD_depth_clamp_separate</code> */
  public static final int GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
  /** Part of <code>GL_AMD_depth_clamp_separate</code> */
  public static final int GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_DECODE_EXT = 0x8A49;
  /** Part of <code>GL_EXT_texture_sRGB_decode</code> */
  public static final int GL_SKIP_DECODE_EXT = 0x8A4A;
  /** Part of <code>GL_NV_texture_multisample</code> */
  public static final int GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
  /** Part of <code>GL_NV_texture_multisample</code> */
  public static final int GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
  /** Part of <code>GL_AMD_blend_minmax_factor</code> */
  public static final int GL_FACTOR_MIN_AMD = 0x901C;
  /** Part of <code>GL_AMD_blend_minmax_factor</code> */
  public static final int GL_FACTOR_MAX_AMD = 0x901D;
  /** Part of <code>GL_AMD_sample_positions</code> */
  public static final int GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
  /** Part of <code>GL_EXT_x11_sync_object</code> */
  public static final int GL_SYNC_X11_FENCE_EXT = 0x90E1;
  /** Part of <code>GL_EXT_framebuffer_multisample_blit_scaled</code> */
  public static final int GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
  /** Part of <code>GL_EXT_framebuffer_multisample_blit_scaled</code> */
  public static final int GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
  /** Part of <code>GL_AMD_pinned_memory</code> */
  public static final int GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_SET_AMD = 0x874A;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_REPLACE_VALUE_AMD = 0x874B;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_STENCIL_OP_VALUE_AMD = 0x874C;
  /** Part of <code>GL_AMD_stencil_operation_extended</code> */
  public static final int GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_TEXTURE_RECTANGLE = 0x84F5;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_SAMPLER_2D_RECT = 0x8B63;
  /** Part of <code>GL_EXT_texture_rectangle</code> */
  public static final int GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;

  /** Entry point to C language function: <code> void {@native glActiveShaderProgram}(GLuint pipeline, GLuint program); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glActiveShaderProgram(int pipeline, int program);

  /** Entry point to C language function: <code> void {@native glBeginConditionalRender}(GLuint id, GLenum mode); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code>   */
  public void glBeginConditionalRender(int id, int mode);

  /** Entry point to C language function: <code> void {@native glBeginQueryIndexed}(GLenum target, GLuint index, GLuint id); </code> <br>Part of <code>GL_ARB_transform_feedback3</code>   */
  public void glBeginQueryIndexed(int target, int index, int id);

  /** Entry point to C language function: <code> void {@native glBeginTransformFeedback}(GLenum primitiveMode); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glBeginTransformFeedback(int primitiveMode);

  /** Entry point to C language function: <code> void {@native glBindBufferBase}(GLenum target, GLuint index, GLuint buffer); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glBindBufferBase(int target, int index, int buffer);

  /** Entry point to C language function: <code> void {@native glBindBufferRange}(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glBindBufferRange(int target, int index, int buffer, long offset, long size);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocation}(GLuint program, GLuint color, const GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glBindFragDataLocation(int program, int color, String name);

  /** Entry point to C language function: <code> void {@native glBindFragDataLocationIndexed}(GLuint program, GLuint colorNumber, GLuint index, const GLchar *  name); </code> <br>Part of <code>GL_ARB_blend_func_extended</code>   */
  public void glBindFragDataLocationIndexed(int program, int colorNumber, int index, String name);

  /** Entry point to C language function: <code> void {@native glBindImageTexture}(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format); </code> <br>Part of <code>GL_ARB_shader_image_load_store</code>   */
  public void glBindImageTexture(int unit, int texture, int level, boolean layered, int layer, int access, int format);

  /** Entry point to C language function: <code> void {@native glBindProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glBindProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glBindSampler}(GLuint unit, GLuint sampler); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glBindSampler(int unit, int sampler);

  /** Entry point to C language function: <code> void {@native glBindTransformFeedback}(GLenum target, GLuint id); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glBindTransformFeedback(int target, int id);

  /** Entry point to C language function: <code> void {@native glBindVertexArray}(GLuint array); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glBindVertexArray(int array);

  /** Entry point to C language function: <code> void {@native glBlendEquationSeparateiARB}(GLuint buf, GLenum modeRGB, GLenum modeAlpha); </code> <br>Part of <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendEquationSeparatei(int buf, int modeRGB, int modeAlpha);

  /** Entry point to C language function: <code> void {@native glBlendEquationiARB}(GLuint buf, GLenum mode); </code> <br>Part of <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendEquationi(int buf, int mode);

  /** Entry point to C language function: <code> void {@native glBlendFuncSeparateiARB}(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha); </code> <br>Part of <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendFuncSeparatei(int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

  /** Entry point to C language function: <code> void {@native glBlendFunciARB}(GLuint buf, GLenum src, GLenum dst); </code> <br>Part of <code>GL_ARB_draw_buffers_blend</code>   */
  public void glBlendFunci(int buf, int src, int dst);

  /** Entry point to C language function: <code> void {@native glBlitFramebuffer}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>; <code>GL_EXT_framebuffer_blit</code>   */
  public void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point to C language function: <code> void {@native glBufferAddressRangeNV}(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glBufferAddressRangeNV(int pname, int index, long address, long length);

  /** Entry point to C language function: <code> void {@native glClampColor}(GLenum target, GLenum clamp); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_ARB_color_buffer_float</code>   */
  public void glClampColor(int target, int clamp);

  /** Entry point to C language function: <code> void {@native glClearBufferfi}(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferfi(int buffer, int drawbuffer, float depth, int stencil);

  /** Entry point to C language function: <code> void {@native glClearBufferfv}(GLenum buffer, GLint drawbuffer, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glClearBufferfv(int buffer, int drawbuffer, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferfv}(GLenum buffer, GLint drawbuffer, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferfv(int buffer, int drawbuffer, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearBufferiv}(GLenum buffer, GLint drawbuffer, const GLint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClearBufferiv(int buffer, int drawbuffer, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferiv}(GLenum buffer, GLint drawbuffer, const GLint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferiv(int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glClearBufferuiv}(GLenum buffer, GLint drawbuffer, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glClearBufferuiv(int buffer, int drawbuffer, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glClearBufferuiv}(GLenum buffer, GLint drawbuffer, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glClearBufferuiv(int buffer, int drawbuffer, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glColorMaski}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glColorMaski(int index, boolean r, boolean g, boolean b, boolean a);

  /** Entry point to C language function: <code> void {@native glColorP3ui}(GLenum type, GLuint color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glColorP3ui(int type, int color);

  /** Entry point to C language function: <code> void {@native glColorP3uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param color a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColorP3uiv(int type, IntBuffer color);

  /** Entry point to C language function: <code> void {@native glColorP3uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glColorP3uiv(int type, int[] color, int color_offset);

  /** Entry point to C language function: <code> void {@native glColorP4ui}(GLenum type, GLuint color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glColorP4ui(int type, int color);

  /** Entry point to C language function: <code> void {@native glColorP4uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param color a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glColorP4uiv(int type, IntBuffer color);

  /** Entry point to C language function: <code> void {@native glColorP4uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glColorP4uiv(int type, int[] color, int color_offset);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar *  *  path, const GLint *  length); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, IntBuffer length);

  /** Entry point to C language function: <code> void {@native glCompileShaderIncludeARB}(GLuint shader, GLsizei count, const GLchar *  *  path, const GLint *  length); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glCompileShaderIncludeARB(int shader, int count, String[] path, int[] length, int length_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, Buffer data);

  /** Entry point to C language function: <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, long data_buffer_offset);

  /** Entry point to C language function: <code> void {@native glCopyBufferSubData}(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size); </code> <br>Part of <code>GL_ARB_copy_buffer</code>   */
  public void glCopyBufferSubData(int readTarget, int writeTarget, long readOffset, long writeOffset, long size);

  /** Entry point to C language function: <code> void {@native glCopyTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

  /** Entry point to C language function: <code> void {@native glCopyTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

  /** Entry point to C language function: <code> GLuint {@native glCreateShaderProgramv}(GLenum type, GLsizei count, const GLchar *  *  strings); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param strings a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public int glCreateShaderProgramv(int type, int count, PointerBuffer strings);

  /** Entry point to C language function: <code> GLsync {@native glCreateSyncFromCLeventARB}(void *  context, void *  event, GLbitfield flags); </code> <br>Part of <code>GL_ARB_cl_event</code>
      @param context a direct or array-backed {@link java.nio.Buffer}
      @param event a direct or array-backed {@link java.nio.Buffer}   */
  public long glCreateSyncFromCLeventARB(Buffer context, Buffer event, int flags);

  /** Entry point to C language function: <code> void {@native glDebugMessageControlARB}(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_ARB_debug_output</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDebugMessageControlARB(int source, int type, int severity, int count, IntBuffer ids, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageControlARB}(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_ARB_debug_output</code>   */
  public void glDebugMessageControlARB(int source, int type, int severity, int count, int[] ids, int ids_offset, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_AMD_debug_output</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, IntBuffer ids, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageEnableAMD}(GLenum category, GLenum severity, GLsizei count, const GLuint *  ids, GLboolean enabled); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public void glDebugMessageEnableAMD(int category, int severity, int count, int[] ids, int ids_offset, boolean enabled);

  /** Entry point to C language function: <code> void {@native glDebugMessageInsertAMD}(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *  buf); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public void glDebugMessageInsertAMD(int category, int severity, int id, int length, String buf);

  /** Entry point to C language function: <code> void {@native glDebugMessageInsertARB}(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *  buf); </code> <br>Part of <code>GL_ARB_debug_output</code>   */
  public void glDebugMessageInsertARB(int source, int type, int id, int severity, int length, String buf);

  /** Entry point to C language function: <code> void {@native glDeleteNamedStringARB}(GLint namelen, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glDeleteNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glDeleteProgramPipelines}(GLsizei n, const GLuint *  pipelines); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glDeleteProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glDeleteSamplers}(GLsizei count, const GLuint *  samplers); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param samplers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteSamplers(int count, IntBuffer samplers);

  /** Entry point to C language function: <code> void {@native glDeleteSamplers}(GLsizei count, const GLuint *  samplers); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glDeleteSamplers(int count, int[] samplers, int samplers_offset);

  /** Entry point to C language function: <code> void {@native glDeleteTransformFeedbacks}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteTransformFeedbacks(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glDeleteTransformFeedbacks}(GLsizei n, const GLuint *  ids); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glDeleteTransformFeedbacks(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArrays}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDeleteVertexArrays(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glDeleteVertexArrays}(GLsizei n, const GLuint *  arrays); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glDeleteVertexArrays(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLclampd *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glDepthRangeArrayv(int first, int count, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glDepthRangeArrayv}(GLuint first, GLsizei count, const GLclampd *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glDepthRangeArrayv(int first, int count, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glDepthRangeIndexed}(GLuint index, GLclampd n, GLclampd f); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glDepthRangeIndexed(int index, double n, double f);

  /** Entry point to C language function: <code> void {@native glDisableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glDisableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glDisablei}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glDisablei(int target, int index);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedARB}(GLenum mode, GLint first, GLsizei count, GLsizei primcount); </code> <br>Part of <code>GL_ARB_draw_instanced</code>   */
  public void glDrawArraysInstanced(int mode, int first, int count, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawArraysInstancedBaseInstance}(GLenum mode, GLint first, GLsizei count, GLsizei primcount, GLuint baseinstance); </code> <br>Part of <code>GL_ARB_base_instance</code>   */
  public void glDrawArraysInstancedBaseInstance(int mode, int first, int count, int primcount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawBuffer}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glDrawBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param bufs a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glDrawBuffers(int n, IntBuffer bufs);

  /** Entry point to C language function: <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  bufs); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glDrawBuffers(int n, int[] bufs, int bufs_offset);

  /** Entry point to C language function: <code> void {@native glDrawElementsBaseVertex}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsBaseVertex(int mode, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedARB}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLsizei primcount); </code> <br>Part of <code>GL_ARB_draw_instanced</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstanced(int mode, int count, int type, Buffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei primcount, GLuint baseinstance); </code> <br>Part of <code>GL_ARB_base_instance</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedBaseInstance(int mode, int count, int type, Buffer indices, int primcount, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertex}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLsizei primcount, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedBaseVertex(int mode, int count, int type, Buffer indices, int primcount, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawElementsInstancedBaseVertexBaseInstance}(GLenum mode, GLsizei count, GLenum type, const void *  indices, GLsizei primcount, GLint basevertex, GLuint baseinstance); </code> <br>Part of <code>GL_ARB_base_instance</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawElementsInstancedBaseVertexBaseInstance(int mode, int count, int type, Buffer indices, int primcount, int basevertex, int baseinstance);

  /** Entry point to C language function: <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code> <br>Part of <code>GL_VERSION_1_2</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, Buffer indices);

  /** Entry point to C language function: <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code> <br>Part of <code>GL_VERSION_1_2</code>   */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, long indices_buffer_offset);

  /** Entry point to C language function: <code> void {@native glDrawRangeElementsBaseVertex}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices, GLint basevertex); </code> <br>Part of <code>GL_ARB_draw_elements_base_vertex</code>
      @param indices a direct or array-backed {@link java.nio.Buffer}   */
  public void glDrawRangeElementsBaseVertex(int mode, int start, int end, int count, int type, Buffer indices, int basevertex);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedback}(GLenum mode, GLuint id); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glDrawTransformFeedback(int mode, int id);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackInstanced}(GLenum mode, GLuint id, GLsizei primcount); </code> <br>Part of <code>GL_ARB_transform_feedback_instanced</code>   */
  public void glDrawTransformFeedbackInstanced(int mode, int id, int primcount);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStream}(GLenum mode, GLuint id, GLuint stream); </code> <br>Part of <code>GL_ARB_transform_feedback3</code>   */
  public void glDrawTransformFeedbackStream(int mode, int id, int stream);

  /** Entry point to C language function: <code> void {@native glDrawTransformFeedbackStreamInstanced}(GLenum mode, GLuint id, GLuint stream, GLsizei primcount); </code> <br>Part of <code>GL_ARB_transform_feedback_instanced</code>   */
  public void glDrawTransformFeedbackStreamInstanced(int mode, int id, int stream, int primcount);

  /** Entry point to C language function: <code> void {@native glEdgeFlagFormatNV}(GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glEdgeFlagFormatNV(int stride);

  /** Entry point to C language function: <code> void {@native glEnableClientState}(GLenum cap); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glEnableClientState(int cap);

  /** Entry point to C language function: <code> void {@native glEnablei}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glEnablei(int target, int index);

  /** Entry point to C language function: <code> void {@native glEndConditionalRender}(void); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_NV_conditional_render</code>   */
  public void glEndConditionalRender();

  /** Entry point to C language function: <code> void {@native glEndQueryIndexed}(GLenum target, GLuint index); </code> <br>Part of <code>GL_ARB_transform_feedback3</code>   */
  public void glEndQueryIndexed(int target, int index);

  /** Entry point to C language function: <code> void {@native glEndTransformFeedback}(void); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glEndTransformFeedback();

  /** Entry point to C language function: <code> void {@native glFlushMappedBufferRange}(GLenum target, GLintptr offset, GLsizeiptr length); </code> <br>Part of <code>GL_ARB_map_buffer_range</code>; <code>GL_APPLE_flush_buffer_range</code>   */
  public void glFlushMappedBufferRange(int target, long offset, long length);

  /** Entry point to C language function: <code> void {@native glFogCoordFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glFogCoordFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glFramebufferTexture1D}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glFramebufferTexture1D(int target, int attachment, int textarget, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureARB}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureARB(int target, int attachment, int texture, int level);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureFaceARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureFaceARB(int target, int attachment, int texture, int level, int face);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayer}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glFramebufferTextureLayer(int target, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glFramebufferTextureLayerARB}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glFramebufferTextureLayerARB(int target, int attachment, int texture, int level, int layer);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param pipelines a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenProgramPipelines(int n, IntBuffer pipelines);

  /** Entry point to C language function: <code> void {@native glGenProgramPipelines}(GLsizei n, GLuint *  pipelines); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glGenProgramPipelines(int n, int[] pipelines, int pipelines_offset);

  /** Entry point to C language function: <code> void {@native glGenSamplers}(GLsizei count, GLuint *  samplers); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param samplers a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenSamplers(int count, IntBuffer samplers);

  /** Entry point to C language function: <code> void {@native glGenSamplers}(GLsizei count, GLuint *  samplers); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glGenSamplers(int count, int[] samplers, int samplers_offset);

  /** Entry point to C language function: <code> void {@native glGenTransformFeedbacks}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>
      @param ids a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenTransformFeedbacks(int n, IntBuffer ids);

  /** Entry point to C language function: <code> void {@native glGenTransformFeedbacks}(GLsizei n, GLuint *  ids); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glGenTransformFeedbacks(int n, int[] ids, int ids_offset);

  /** Entry point to C language function: <code> void {@native glGenVertexArrays}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>
      @param arrays a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGenVertexArrays(int n, IntBuffer arrays);

  /** Entry point to C language function: <code> void {@native glGenVertexArrays}(GLsizei n, GLuint *  arrays); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public void glGenVertexArrays(int n, int[] arrays, int arrays_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_atomic_counters</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetActiveAtomicCounterBufferiv}(GLuint program, GLuint bufferIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shader_atomic_counters</code>   */
  public void glGetActiveAtomicCounterBufferiv(int program, int bufferIndex, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glGetActiveSubroutineName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, IntBuffer length, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformName}(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *  length, GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glGetActiveSubroutineUniformName(int program, int shadertype, int index, int bufsize, int[] length, int length_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetActiveSubroutineUniformiv}(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glGetActiveSubroutineUniformiv(int program, int shadertype, int index, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockName}(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformBlockName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param uniformBlockName a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, IntBuffer length, ByteBuffer uniformBlockName);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockName}(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformBlockName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockName(int program, int uniformBlockIndex, int bufSize, int[] length, int length_offset, byte[] uniformBlockName, int uniformBlockName_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockiv}(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformBlockiv}(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformBlockiv(int program, int uniformBlockIndex, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param uniformName a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, IntBuffer length, ByteBuffer uniformName);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformName}(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *  length, GLchar *  uniformName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformName(int program, int uniformIndex, int bufSize, int[] length, int length_offset, byte[] uniformName, int uniformName_offset);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformsiv}(GLuint program, GLsizei uniformCount, const GLuint *  uniformIndices, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>
      @param uniformIndices a direct or array-backed {@link java.nio.IntBuffer}
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetActiveUniformsiv(int program, int uniformCount, IntBuffer uniformIndices, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetActiveUniformsiv}(GLuint program, GLsizei uniformCount, const GLuint *  uniformIndices, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetActiveUniformsiv(int program, int uniformCount, int[] uniformIndices, int uniformIndices_offset, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param data a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetBooleani_v(int target, int index, ByteBuffer data);

  /** Entry point to C language function: <code> void {@native glGetBooleani_v}(GLenum target, GLuint index, GLboolean *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetBooleani_v(int target, int index, byte[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetBufferParameterui64vNV(int target, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetBufferParameterui64vNV}(GLenum target, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetBufferParameterui64vNV(int target, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetBufferSubData}(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *  data); </code> <br>Part of <code>GL_VERSION_1_5</code>
      @param data a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetBufferSubData(int target, long offset, long size, Buffer data);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetCompressedTexImage(int target, int level, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code> <br>Part of <code>GL_VERSION_1_3</code>   */
  public void glGetCompressedTexImage(int target, int level, long img_buffer_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message); </code> <br>Part of <code>GL_AMD_debug_output</code>
      @param categories a direct or array-backed {@link java.nio.IntBuffer}
      @param severities a direct or array-backed {@link java.nio.IntBuffer}
      @param ids a direct or array-backed {@link java.nio.IntBuffer}
      @param lengths a direct or array-backed {@link java.nio.IntBuffer}
      @param message a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, IntBuffer categories, IntBuffer severities, IntBuffer ids, IntBuffer lengths, ByteBuffer message);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogAMD}(GLuint count, GLsizei bufsize, GLenum *  categories, GLuint *  severities, GLuint *  ids, GLsizei *  lengths, GLchar *  message); </code> <br>Part of <code>GL_AMD_debug_output</code>   */
  public int glGetDebugMessageLogAMD(int count, int bufsize, int[] categories, int categories_offset, int[] severities, int severities_offset, int[] ids, int ids_offset, int[] lengths, int lengths_offset, byte[] message, int message_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogARB}(GLuint count, GLsizei bufsize, GLenum *  sources, GLenum *  types, GLuint *  ids, GLenum *  severities, GLsizei *  lengths, GLchar *  messageLog); </code> <br>Part of <code>GL_ARB_debug_output</code>
      @param sources a direct or array-backed {@link java.nio.IntBuffer}
      @param types a direct or array-backed {@link java.nio.IntBuffer}
      @param ids a direct or array-backed {@link java.nio.IntBuffer}
      @param severities a direct or array-backed {@link java.nio.IntBuffer}
      @param lengths a direct or array-backed {@link java.nio.IntBuffer}
      @param messageLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public int glGetDebugMessageLogARB(int count, int bufsize, IntBuffer sources, IntBuffer types, IntBuffer ids, IntBuffer severities, IntBuffer lengths, ByteBuffer messageLog);

  /** Entry point to C language function: <code> GLuint {@native glGetDebugMessageLogARB}(GLuint count, GLsizei bufsize, GLenum *  sources, GLenum *  types, GLuint *  ids, GLenum *  severities, GLsizei *  lengths, GLchar *  messageLog); </code> <br>Part of <code>GL_ARB_debug_output</code>   */
  public int glGetDebugMessageLogARB(int count, int bufsize, int[] sources, int sources_offset, int[] types, int types_offset, int[] ids, int ids_offset, int[] severities, int severities_offset, int[] lengths, int lengths_offset, byte[] messageLog, int messageLog_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param data a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublei_v(int target, int index, DoubleBuffer data);

  /** Entry point to C language function: <code> void {@native glGetDoublei_v}(GLenum target, GLuint index, GLdouble *  data); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glGetDoublei_v(int target, int index, double[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetDoublev(int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetDoublev(int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param data a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetFloati_v(int target, int index, FloatBuffer data);

  /** Entry point to C language function: <code> void {@native glGetFloati_v}(GLenum target, GLuint index, GLfloat *  data); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glGetFloati_v(int target, int index, float[] data, int data_offset);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataIndex}(GLuint program, const GLchar *  name); </code> <br>Part of <code>GL_ARB_blend_func_extended</code>   */
  public int glGetFragDataIndex(int program, String name);

  /** Entry point to C language function: <code> GLint {@native glGetFragDataLocation}(GLuint program, const GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public int glGetFragDataLocation(int program, String name);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_v}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param data a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetIntegeri_v(int target, int index, IntBuffer data);

  /** Entry point to C language function: <code> void {@native glGetIntegeri_v}(GLenum target, GLuint index, GLint *  data); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetIntegeri_v(int target, int index, int[] data, int data_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64i_vNV(int value, int index, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64i_vNV}(GLenum value, GLuint index, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glGetIntegerui64i_vNV(int value, int index, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param result a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetIntegerui64vNV(int value, LongBuffer result);

  /** Entry point to C language function: <code> void {@native glGetIntegerui64vNV}(GLenum value, GLuint64EXT *  result); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetIntegerui64vNV(int value, long[] result, int result_offset);

  /** Entry point to C language function: <code> void {@native glGetInternalformativ}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *  params); </code> <br>Part of <code>GL_ARB_internalformat_query</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetInternalformativ}(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *  params); </code> <br>Part of <code>GL_ARB_internalformat_query</code>   */
  public void glGetInternalformativ(int target, int internalformat, int pname, int bufSize, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_ARB_texture_multisample</code>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetMultisamplefv(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glGetMultisamplefv}(GLenum pname, GLuint index, GLfloat *  val); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glGetMultisamplefv(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedBufferParameterui64vNV}(GLuint buffer, GLenum pname, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetNamedBufferParameterui64vNV(int buffer, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param stringlen a direct or array-backed {@link java.nio.IntBuffer}
      @param string a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, IntBuffer stringlen, ByteBuffer string);

  /** Entry point to C language function: <code> void {@native glGetNamedStringARB}(GLint namelen, const GLchar *  name, GLsizei bufSize, GLint *  stringlen, GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glGetNamedStringARB(int namelen, String name, int bufSize, int[] stringlen, int stringlen_offset, byte[] string, int string_offset);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shading_language_include</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetNamedStringivARB}(GLint namelen, const GLchar *  name, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glGetNamedStringivARB(int namelen, String name, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param infoLog a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, IntBuffer length, ByteBuffer infoLog);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineInfoLog}(GLuint pipeline, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glGetProgramPipelineInfoLog(int pipeline, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramPipelineiv(int pipeline, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetProgramPipelineiv}(GLuint pipeline, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glGetProgramPipelineiv(int pipeline, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetProgramStageiv}(GLuint program, GLenum shadertype, GLenum pname, GLint *  values); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glGetProgramStageiv(int program, int shadertype, int pname, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_transform_feedback3</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryIndexediv(int target, int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryIndexediv}(GLenum target, GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_transform_feedback3</code>   */
  public void glGetQueryIndexediv(int target, int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64v}(GLuint id, GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_ARB_timer_query</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjecti64v(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjecti64v}(GLuint id, GLenum pname, GLint64 *  params); </code> <br>Part of <code>GL_ARB_timer_query</code>   */
  public void glGetQueryObjecti64v(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetQueryObjectiv(int id, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectiv}(GLuint id, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_5</code>   */
  public void glGetQueryObjectiv(int id, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64v}(GLuint id, GLenum pname, GLuint64 *  params); </code> <br>Part of <code>GL_ARB_timer_query</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetQueryObjectui64v(int id, int pname, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetQueryObjectui64v}(GLuint id, GLenum pname, GLuint64 *  params); </code> <br>Part of <code>GL_ARB_timer_query</code>   */
  public void glGetQueryObjectui64v(int id, int pname, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIiv}(GLuint sampler, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSamplerParameterIiv(int sampler, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIiv}(GLuint sampler, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glGetSamplerParameterIiv(int sampler, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIuiv}(GLuint sampler, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSamplerParameterIuiv(int sampler, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterIuiv}(GLuint sampler, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glGetSamplerParameterIuiv(int sampler, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterfv}(GLuint sampler, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetSamplerParameterfv(int sampler, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameterfv}(GLuint sampler, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glGetSamplerParameterfv(int sampler, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameteriv}(GLuint sampler, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetSamplerParameteriv(int sampler, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetSamplerParameteriv}(GLuint sampler, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glGetSamplerParameteriv(int sampler, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> const GLubyte *  {@native glGetStringi}(GLenum name, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public String glGetStringi(int name, int index);

  /** Entry point to C language function: <code> GLuint {@native glGetSubroutineIndex}(GLuint program, GLenum shadertype, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public int glGetSubroutineIndex(int program, int shadertype, String name);

  /** Entry point to C language function: <code> GLint {@native glGetSubroutineUniformLocation}(GLuint program, GLenum shadertype, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public int glGetSubroutineUniformLocation(int program, int shadertype, String name);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetTexImage(int target, int level, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexImage(int target, int level, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameterfv(int target, int level, int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glGetTexLevelParameteriv(int target, int level, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIiv}(GLenum target, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glGetTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetTexParameterIuiv}(GLenum target, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glGetTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackVarying}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>
      @param length a direct or array-backed {@link java.nio.IntBuffer}
      @param size a direct or array-backed {@link java.nio.IntBuffer}
      @param type a direct or array-backed {@link java.nio.IntBuffer}
      @param name a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetTransformFeedbackVarying(int program, int index, int bufSize, IntBuffer length, IntBuffer size, IntBuffer type, ByteBuffer name);

  /** Entry point to C language function: <code> void {@native glGetTransformFeedbackVarying}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glGetTransformFeedbackVarying(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point to C language function: <code> GLuint {@native glGetUniformBlockIndex}(GLuint program, const GLchar *  uniformBlockName); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public int glGetUniformBlockIndex(int program, String uniformBlockName);

  /** Entry point to C language function: <code> void {@native glGetUniformIndices}(GLuint program, GLsizei uniformCount, const GLchar *  *  uniformNames, GLuint *  uniformIndices); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>
      @param uniformIndices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformIndices(int program, int uniformCount, String[] uniformNames, IntBuffer uniformIndices);

  /** Entry point to C language function: <code> void {@native glGetUniformIndices}(GLuint program, GLsizei uniformCount, const GLchar *  *  uniformNames, GLuint *  uniformIndices); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glGetUniformIndices(int program, int uniformCount, String[] uniformNames, int[] uniformIndices, int uniformIndices_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformSubroutineuiv}(GLenum shadertype, GLint location, GLuint *  params); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glGetUniformSubroutineuiv(int shadertype, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param params a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glGetUniformui64vNV(int program, int location, LongBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformui64vNV}(GLuint program, GLint location, GLuint64EXT *  params); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glGetUniformui64vNV(int program, int location, long[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetUniformuiv}(GLuint program, GLint location, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetUniformuiv(int program, int location, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetUniformuiv}(GLuint program, GLint location, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glGetUniformuiv(int program, int location, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIiv}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribIiv(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIiv}(GLuint index, GLenum pname, GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIiv(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuiv}(GLuint index, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetVertexAttribIuiv(int index, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribIuiv}(GLuint index, GLenum pname, GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glGetVertexAttribIuiv(int index, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribLdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribLdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glGetVertexAttribLdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetVertexAttribdv(int index, int pname, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glGetVertexAttribdv(int index, int pname, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetnColorTableARB}(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  table); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param table a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnColorTable(int target, int format, int type, int bufSize, Buffer table);

  /** Entry point to C language function: <code> void {@native glGetnCompressedTexImageARB}(GLenum target, GLint lod, GLsizei bufSize, GLvoid *  img); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnCompressedTexImage(int target, int lod, int bufSize, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetnConvolutionFilterARB}(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  image); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param image a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnConvolutionFilter(int target, int format, int type, int bufSize, Buffer image);

  /** Entry point to C language function: <code> void {@native glGetnHistogramARB}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  values); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param values a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnHistogram(int target, boolean reset, int format, int type, int bufSize, Buffer values);

  /** Entry point to C language function: <code> void {@native glGetnMapdvARB}(GLenum target, GLenum query, GLsizei bufSize, GLdouble *  v); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetnMapdv(int target, int query, int bufSize, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glGetnMapdvARB}(GLenum target, GLenum query, GLsizei bufSize, GLdouble *  v); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnMapdv(int target, int query, int bufSize, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetnMapfvARB}(GLenum target, GLenum query, GLsizei bufSize, GLfloat *  v); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetnMapfv(int target, int query, int bufSize, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glGetnMapfvARB}(GLenum target, GLenum query, GLsizei bufSize, GLfloat *  v); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnMapfv(int target, int query, int bufSize, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetnMapivARB}(GLenum target, GLenum query, GLsizei bufSize, GLint *  v); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetnMapiv(int target, int query, int bufSize, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glGetnMapivARB}(GLenum target, GLenum query, GLsizei bufSize, GLint *  v); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnMapiv(int target, int query, int bufSize, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glGetnMinmaxARB}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  values); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param values a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnMinmax(int target, boolean reset, int format, int type, int bufSize, Buffer values);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapfvARB}(GLenum map, GLsizei bufSize, GLfloat *  values); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param values a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glGetnPixelMapfv(int map, int bufSize, FloatBuffer values);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapfvARB}(GLenum map, GLsizei bufSize, GLfloat *  values); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnPixelMapfv(int map, int bufSize, float[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapuivARB}(GLenum map, GLsizei bufSize, GLuint *  values); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param values a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetnPixelMapuiv(int map, int bufSize, IntBuffer values);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapuivARB}(GLenum map, GLsizei bufSize, GLuint *  values); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnPixelMapuiv(int map, int bufSize, int[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapusvARB}(GLenum map, GLsizei bufSize, GLushort *  values); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param values a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glGetnPixelMapusv(int map, int bufSize, ShortBuffer values);

  /** Entry point to C language function: <code> void {@native glGetnPixelMapusvARB}(GLenum map, GLsizei bufSize, GLushort *  values); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnPixelMapusv(int map, int bufSize, short[] values, int values_offset);

  /** Entry point to C language function: <code> void {@native glGetnPolygonStippleARB}(GLsizei bufSize, GLubyte *  pattern); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param pattern a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glGetnPolygonStipple(int bufSize, ByteBuffer pattern);

  /** Entry point to C language function: <code> void {@native glGetnPolygonStippleARB}(GLsizei bufSize, GLubyte *  pattern); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnPolygonStipple(int bufSize, byte[] pattern, int pattern_offset);

  /** Entry point to C language function: <code> void {@native glGetnSeparableFilterARB}(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *  row, GLsizei columnBufSize, GLvoid *  column, GLvoid *  span); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param row a direct or array-backed {@link java.nio.Buffer}
      @param column a direct or array-backed {@link java.nio.Buffer}
      @param span a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnSeparableFilter(int target, int format, int type, int rowBufSize, Buffer row, int columnBufSize, Buffer column, Buffer span);

  /** Entry point to C language function: <code> void {@native glGetnTexImageARB}(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *  img); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param img a direct or array-backed {@link java.nio.Buffer}   */
  public void glGetnTexImage(int target, int level, int format, int type, int bufSize, Buffer img);

  /** Entry point to C language function: <code> void {@native glGetnUniformdvARB}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param params a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glGetnUniformdv(int program, int location, int bufSize, DoubleBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformdvARB}(GLuint program, GLint location, GLsizei bufSize, GLdouble *  params); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnUniformdv(int program, int location, int bufSize, double[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glGetnUniformuivARB}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params); </code> <br>Part of <code>GL_ARB_robustness</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glGetnUniformuiv(int program, int location, int bufSize, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glGetnUniformuivARB}(GLuint program, GLint location, GLsizei bufSize, GLuint *  params); </code> <br>Part of <code>GL_ARB_robustness</code>   */
  public void glGetnUniformuiv(int program, int location, int bufSize, int[] params, int params_offset);

  /** Entry point to C language function: <code> GLsync {@native glImportSyncEXT}(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags); </code> <br>Part of <code>GL_EXT_x11_sync_object</code>   */
  public long glImportSyncEXT(int external_sync_type, long external_sync, int flags);

  /** Entry point to C language function: <code> void {@native glIndexFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glIndexFormatNV(int type, int stride);

  /** Entry point to C language function: <code> GLboolean {@native glIsBufferResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsBufferResidentNV(int target);

  /** Entry point to C language function: <code> GLboolean {@native glIsEnabledi}(GLenum target, GLuint index); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public boolean glIsEnabledi(int target, int index);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedBufferResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public boolean glIsNamedBufferResidentNV(int buffer);

  /** Entry point to C language function: <code> GLboolean {@native glIsNamedStringARB}(GLint namelen, const GLchar *  name); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public boolean glIsNamedStringARB(int namelen, String name);

  /** Entry point to C language function: <code> GLboolean {@native glIsProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public boolean glIsProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> GLboolean {@native glIsSampler}(GLuint sampler); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public boolean glIsSampler(int sampler);

  /** Entry point to C language function: <code> GLboolean {@native glIsTransformFeedback}(GLuint id); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public boolean glIsTransformFeedback(int id);

  /** Entry point to C language function: <code> GLboolean {@native glIsVertexArray}(GLuint array); </code> <br>Part of <code>GL_ARB_vertex_array_object</code>   */
  public boolean glIsVertexArray(int array);

  /** Entry point to C language function: <code> void {@native glLogicOp}(GLenum opcode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glLogicOp(int opcode);

  /** Entry point to C language function: <code> void {@native glMakeBufferNonResidentNV}(GLenum target); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferNonResidentNV(int target);

  /** Entry point to C language function: <code> void {@native glMakeBufferResidentNV}(GLenum target, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeBufferResidentNV(int target, int access);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferNonResidentNV}(GLuint buffer); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeNamedBufferNonResidentNV(int buffer);

  /** Entry point to C language function: <code> void {@native glMakeNamedBufferResidentNV}(GLuint buffer, GLenum access); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glMakeNamedBufferResidentNV(int buffer, int access);

  /** Entry point to C language function: <code> GLvoid *  {@native glMapBufferRange}(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access); </code> <br>Part of <code>GL_ARB_map_buffer_range</code>   */
  public ByteBuffer glMapBufferRange(int target, long offset, long length, int access);

  /** Entry point to C language function: <code> void {@native glMemoryBarrier}(GLbitfield barriers); </code> <br>Part of <code>GL_ARB_shader_image_load_store</code>   */
  public void glMemoryBarrier(int barriers);

  /** Entry point to C language function: <code> void {@native glMinSampleShadingARB}(GLclampf value); </code> <br>Part of <code>GL_ARB_sample_shading</code>   */
  public void glMinSampleShading(float value);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param first a direct or array-backed {@link java.nio.IntBuffer}
      @param count a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiDrawArrays(int mode, IntBuffer first, IntBuffer count, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArrays}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glMultiDrawArrays(int mode, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawArraysIndirectAMD}(GLenum mode, const GLvoid *  indirect, GLsizei primcount, GLsizei stride); </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawArraysIndirectAMD(int mode, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param count a direct or array-backed {@link java.nio.IntBuffer}
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElements(int mode, IntBuffer count, int type, PointerBuffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param indices a direct or array-backed {@link com.jogamp.common.nio.PointerBuffer}   */
  public void glMultiDrawElements(int mode, int[] count, int count_offset, int type, PointerBuffer indices, int primcount);

  /** Entry point to C language function: <code> void {@native glMultiDrawElementsIndirectAMD}(GLenum mode, GLenum type, const GLvoid *  indirect, GLsizei primcount, GLsizei stride); </code> <br>Part of <code>GL_AMD_multi_draw_indirect</code>
      @param indirect a direct or array-backed {@link java.nio.Buffer}   */
  public void glMultiDrawElementsIndirectAMD(int mode, int type, Buffer indirect, int primcount, int stride);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP1ui}(GLenum texture, GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP1ui(int texture, int type, int coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP1uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoordP1uiv(int texture, int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP1uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP1uiv(int texture, int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP2ui}(GLenum texture, GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP2ui(int texture, int type, int coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP2uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoordP2uiv(int texture, int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP2uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP2uiv(int texture, int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP3ui}(GLenum texture, GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP3ui(int texture, int type, int coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP3uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoordP3uiv(int texture, int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP3uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP3uiv(int texture, int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP4ui}(GLenum texture, GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP4ui(int texture, int type, int coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP4uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glMultiTexCoordP4uiv(int texture, int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glMultiTexCoordP4uiv}(GLenum texture, GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glMultiTexCoordP4uiv(int texture, int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glNamedStringARB}(GLenum type, GLint namelen, const GLchar *  name, GLint stringlen, const GLchar *  string); </code> <br>Part of <code>GL_ARB_shading_language_include</code>   */
  public void glNamedStringARB(int type, int namelen, String name, int stringlen, String string);

  /** Entry point to C language function: <code> void {@native glNormalFormatNV}(GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glNormalFormatNV(int type, int stride);

  /** Entry point to C language function: <code> void {@native glNormalP3ui}(GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glNormalP3ui(int type, int coords);

  /** Entry point to C language function: <code> void {@native glNormalP3uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glNormalP3uiv(int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glNormalP3uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glNormalP3uiv(int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glPauseTransformFeedback}(void); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glPauseTransformFeedback();

  /** Entry point to C language function: <code> void {@native glPixelStoref}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPixelStoref(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterf}(GLenum pname, GLfloat param); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameterf(int pname, float param);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param params a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glPointParameterfv(int pname, FloatBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameterfv}(GLenum pname, const GLfloat *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameterfv(int pname, float[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointParameteri}(GLenum pname, GLint param); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteri(int pname, int param);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glPointParameteriv(int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glPointParameteriv}(GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_1_4</code>   */
  public void glPointParameteriv(int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glPointSize}(GLfloat size); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPointSize(float size);

  /** Entry point to C language function: <code> void {@native glPolygonMode}(GLenum face, GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glPolygonMode(int face, int mode);

  /** Entry point to C language function: <code> void {@native glPrimitiveRestartIndex}(GLuint index); </code> <br>Part of <code>GL_VERSION_3_1</code>   */
  public void glPrimitiveRestartIndex(int index);

  /** Entry point to C language function: <code> void {@native glProgramParameteri}(GLuint program, GLenum pname, GLint value); </code> <br>Part of <code>GL_ARB_get_program_binary</code>   */
  public void glProgramParameteri(int program, int pname, int value);

  /** Entry point to C language function: <code> void {@native glProgramParameteriARB}(GLuint program, GLenum pname, GLint value); </code> <br>Part of <code>GL_ARB_geometry_shader4</code>   */
  public void glProgramParameteriARB(int program, int pname, int value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1d}(GLuint program, GLint location, GLdouble v0); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1d(int program, int location, double v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform1dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1f}(GLuint program, GLint location, GLfloat v0); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1f(int program, int location, float v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform1fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1i}(GLuint program, GLint location, GLint v0); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1i(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform1ui}(GLuint program, GLint location, GLuint v0); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1ui(int program, int location, int v0);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform1uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform1uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform1uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2d}(GLuint program, GLint location, GLdouble v0, GLdouble v1); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2d(int program, int location, double v0, double v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform2dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2f}(GLuint program, GLint location, GLfloat v0, GLfloat v1); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2f(int program, int location, float v0, float v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform2fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2i}(GLuint program, GLint location, GLint v0, GLint v1); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2i(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform2ui}(GLuint program, GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2ui(int program, int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform2uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform2uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform2uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3d(int program, int location, double v0, double v1, double v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform3dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3f(int program, int location, float v0, float v1, float v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform3fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3i(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform3ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3ui(int program, int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform3uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform3uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform3uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4d}(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4d(int program, int location, double v0, double v1, double v2, double v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniform4dv(int program, int location, int count, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4dv}(GLuint program, GLint location, GLsizei count, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4dv(int program, int location, int count, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4f}(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4f(int program, int location, float v0, float v1, float v2, float v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniform4fv(int program, int location, int count, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4fv}(GLuint program, GLint location, GLsizei count, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4fv(int program, int location, int count, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4i}(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4i(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4iv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4iv}(GLuint program, GLint location, GLsizei count, const GLint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4iv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniform4ui}(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4ui(int program, int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glProgramUniform4uiv(int program, int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniform4uiv}(GLuint program, GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniform4uiv(int program, int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix2x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix2x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix3x4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix3x4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x2dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x2fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x2fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, DoubleBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3dv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x3dv(int program, int location, int count, boolean transpose, double[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformMatrix4x3fv}(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glProgramUniformMatrix4x3fv(int program, int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64NV}(GLuint program, GLint location, GLuint64EXT value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64NV(int program, int location, long value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glProgramUniformui64vNV(int program, int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glProgramUniformui64vNV}(GLuint program, GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glProgramUniformui64vNV(int program, int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glProvokingVertex}(GLenum mode); </code> <br>Part of <code>GL_ARB_provoking_vertex</code>   */
  public void glProvokingVertex(int mode);

  /** Entry point to C language function: <code> void {@native glQueryCounter}(GLuint id, GLenum target); </code> <br>Part of <code>GL_ARB_timer_query</code>   */
  public void glQueryCounter(int id, int target);

  /** Entry point to C language function: <code> void {@native glReadBuffer}(GLenum mode); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glReadBuffer(int mode);

  /** Entry point to C language function: <code> void {@native glRenderbufferStorageMultisample}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_ARB_framebuffer_object</code>   */
  public void glRenderbufferStorageMultisample(int target, int samples, int internalformat, int width, int height);

  /** Entry point to C language function: <code> void {@native glResumeTransformFeedback}(void); </code> <br>Part of <code>GL_ARB_transform_feedback2</code>   */
  public void glResumeTransformFeedback();

  /** Entry point to C language function: <code> void {@native glSampleMaski}(GLuint index, GLbitfield mask); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glSampleMaski(int index, int mask);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIiv}(GLuint sampler, GLenum pname, const GLint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSamplerParameterIiv(int sampler, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIiv}(GLuint sampler, GLenum pname, const GLint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameterIiv(int sampler, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIuiv}(GLuint sampler, GLenum pname, const GLuint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSamplerParameterIuiv(int sampler, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterIuiv}(GLuint sampler, GLenum pname, const GLuint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameterIuiv(int sampler, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glSamplerParameterf}(GLuint sampler, GLenum pname, GLfloat param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameterf(int sampler, int pname, float param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterfv}(GLuint sampler, GLenum pname, const GLfloat *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param param a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glSamplerParameterfv(int sampler, int pname, FloatBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameterfv}(GLuint sampler, GLenum pname, const GLfloat *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameterfv(int sampler, int pname, float[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glSamplerParameteri}(GLuint sampler, GLenum pname, GLint param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameteri(int sampler, int pname, int param);

  /** Entry point to C language function: <code> void {@native glSamplerParameteriv}(GLuint sampler, GLenum pname, const GLint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>
      @param param a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSamplerParameteriv(int sampler, int pname, IntBuffer param);

  /** Entry point to C language function: <code> void {@native glSamplerParameteriv}(GLuint sampler, GLenum pname, const GLint *  param); </code> <br>Part of <code>GL_ARB_sampler_objects</code>   */
  public void glSamplerParameteriv(int sampler, int pname, int[] param, int param_offset);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorArrayv(int first, int count, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorArrayv}(GLuint first, GLsizei count, const GLint *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glScissorArrayv(int first, int count, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glScissorIndexed}(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glScissorIndexed(int index, int left, int bottom, int width, int height);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glScissorIndexedv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glScissorIndexedv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glScissorIndexedv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glSecondaryColorFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glSecondaryColorFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glSecondaryColorP3ui}(GLenum type, GLuint color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glSecondaryColorP3ui(int type, int color);

  /** Entry point to C language function: <code> void {@native glSecondaryColorP3uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param color a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glSecondaryColorP3uiv(int type, IntBuffer color);

  /** Entry point to C language function: <code> void {@native glSecondaryColorP3uiv}(GLenum type, const GLuint *  color); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glSecondaryColorP3uiv(int type, int[] color, int color_offset);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val); </code> <br>Part of <code>GL_AMD_sample_positions</code>
      @param val a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glSetMultisamplefvAMD(int pname, int index, FloatBuffer val);

  /** Entry point to C language function: <code> void {@native glSetMultisamplefvAMD}(GLenum pname, GLuint index, const GLfloat *  val); </code> <br>Part of <code>GL_AMD_sample_positions</code>   */
  public void glSetMultisamplefvAMD(int pname, int index, float[] val, int val_offset);

  /** Entry point to C language function: <code> void {@native glStencilOpValueAMD}(GLenum face, GLuint value); </code> <br>Part of <code>GL_AMD_stencil_operation_extended</code>   */
  public void glStencilOpValueAMD(int face, int value);

  /** Entry point to C language function: <code> void {@native glTessellationFactorAMD}(GLfloat factor); </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>   */
  public void glTessellationFactorAMD(float factor);

  /** Entry point to C language function: <code> void {@native glTessellationModeAMD}(GLenum mode); </code> <br>Part of <code>GL_AMD_vertex_shader_tesselator</code>   */
  public void glTessellationModeAMD(int mode);

  /** Entry point to C language function: <code> void {@native glTexBufferARB}(GLenum target, GLenum internalformat, GLuint buffer); </code> <br>Part of <code>GL_ARB_texture_buffer_object</code>   */
  public void glTexBuffer(int target, int internalformat, int buffer);

  /** Entry point to C language function: <code> void {@native glTexCoordFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glTexCoordFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glTexCoordP1ui}(GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP1ui(int type, int coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP1uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoordP1uiv(int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP1uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP1uiv(int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glTexCoordP2ui}(GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP2ui(int type, int coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP2uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoordP2uiv(int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP2uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP2uiv(int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glTexCoordP3ui}(GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP3ui(int type, int coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP3uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoordP3uiv(int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP3uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP3uiv(int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glTexCoordP4ui}(GLenum type, GLuint coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP4ui(int type, int coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP4uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param coords a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexCoordP4uiv(int type, IntBuffer coords);

  /** Entry point to C language function: <code> void {@native glTexCoordP4uiv}(GLenum type, const GLuint *  coords); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glTexCoordP4uiv(int type, int[] coords, int coords_offset);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_0</code>   */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glTexImage2DMultisample(int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexImage2DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTexImage2DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisample}(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations); </code> <br>Part of <code>GL_ARB_texture_multisample</code>   */
  public void glTexImage3DMultisample(int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations);

  /** Entry point to C language function: <code> void {@native glTexImage3DMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTexImage3DMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIiv}(GLenum target, GLenum pname, const GLint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glTexParameterIiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>
      @param params a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glTexParameterIuiv(int target, int pname, IntBuffer params);

  /** Entry point to C language function: <code> void {@native glTexParameterIuiv}(GLenum target, GLenum pname, const GLuint *  params); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_texture_integer</code>   */
  public void glTexParameterIuiv(int target, int pname, int[] params, int params_offset);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>
      @param pixels a direct or array-backed {@link java.nio.Buffer}   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, Buffer pixels);

  /** Entry point to C language function: <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code> <br>Part of <code>GL_VERSION_1_1</code>   */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage2DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage2DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage2DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleCoverageNV}(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage3DMultisampleCoverageNV(int texture, int target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTextureImage3DMultisampleNV}(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations); </code> <br>Part of <code>GL_NV_texture_multisample</code>   */
  public void glTextureImage3DMultisampleNV(int texture, int target, int samples, int internalFormat, int width, int height, int depth, boolean fixedSampleLocations);

  /** Entry point to C language function: <code> void {@native glTransformFeedbackVaryings}(GLuint program, GLsizei count, const GLchar *  *  varyings, GLenum bufferMode); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_transform_feedback</code>   */
  public void glTransformFeedbackVaryings(int program, int count, String[] varyings, int bufferMode);

  /** Entry point to C language function: <code> void {@native glUniform1ui}(GLint location, GLuint v0); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform1ui(int location, int v0);

  /** Entry point to C language function: <code> void {@native glUniform1uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform1uiv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform1uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform1uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform2ui}(GLint location, GLuint v0, GLuint v1); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform2ui(int location, int v0, int v1);

  /** Entry point to C language function: <code> void {@native glUniform2uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform2uiv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform2uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform2uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform3ui}(GLint location, GLuint v0, GLuint v1, GLuint v2); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform3ui(int location, int v0, int v1, int v2);

  /** Entry point to C language function: <code> void {@native glUniform3uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform3uiv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform3uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform3uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniform4ui}(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform4ui(int location, int v0, int v1, int v2, int v3);

  /** Entry point to C language function: <code> void {@native glUniform4uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniform4uiv(int location, int count, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glUniform4uiv}(GLint location, GLsizei count, const GLuint *  value); </code> <br>Part of <code>GL_VERSION_3_0</code>; <code>GL_EXT_gpu_shader4</code>   */
  public void glUniform4uiv(int location, int count, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformBlockBinding}(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding); </code> <br>Part of <code>GL_ARB_uniform_buffer_object</code>   */
  public void glUniformBlockBinding(int program, int uniformBlockIndex, int uniformBlockBinding);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>
      @param value a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, FloatBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code> <br>Part of <code>GL_VERSION_2_1</code>   */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>
      @param indices a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glUniformSubroutinesuiv(int shadertype, int count, IntBuffer indices);

  /** Entry point to C language function: <code> void {@native glUniformSubroutinesuiv}(GLenum shadertype, GLsizei count, const GLuint *  indices); </code> <br>Part of <code>GL_ARB_shader_subroutine</code>   */
  public void glUniformSubroutinesuiv(int shadertype, int count, int[] indices, int indices_offset);

  /** Entry point to C language function: <code> void {@native glUniformui64NV}(GLint location, GLuint64EXT value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64NV(int location, long value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>
      @param value a direct or array-backed {@link java.nio.LongBuffer}   */
  public void glUniformui64vNV(int location, int count, LongBuffer value);

  /** Entry point to C language function: <code> void {@native glUniformui64vNV}(GLint location, GLsizei count, const GLuint64EXT *  value); </code> <br>Part of <code>GL_NV_shader_buffer_load</code>   */
  public void glUniformui64vNV(int location, int count, long[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glUseProgramStages}(GLuint pipeline, GLbitfield stages, GLuint program); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glUseProgramStages(int pipeline, int stages, int program);

  /** Entry point to C language function: <code> void {@native glValidateProgramPipeline}(GLuint pipeline); </code> <br>Part of <code>GL_ARB_separate_shader_objects</code>   */
  public void glValidateProgramPipeline(int pipeline);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1d}(GLuint index, GLdouble x); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1s}(GLuint index, GLshort x); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1s(int index, short x);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib1sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib1sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib1sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2d}(GLuint index, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2s}(GLuint index, GLshort x, GLshort y); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2s(int index, short x, short y);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib2sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib2sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib2sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3s}(GLuint index, GLshort x, GLshort y, GLshort z); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3s(int index, short x, short y, short z);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib3sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib3sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib3sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nbv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nbv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Niv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Niv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Niv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nsv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nsv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nsv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nub}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4Nubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4Nuiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nuiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4Nusv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4Nusv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttrib4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4s}(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4s(int index, short x, short y, short z, short w);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttrib4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttrib4uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttrib4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_2_0</code>   */
  public void glVertexAttrib4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribFormatNV}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribFormatNV(int index, int size, int type, boolean normalized, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1i}(GLuint index, GLint x); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1i(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1ui}(GLuint index, GLuint x); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1ui(int index, int x);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI1uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI1uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI1uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2i}(GLuint index, GLint x, GLint y); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2i(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2ui}(GLuint index, GLuint x, GLuint y); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2ui(int index, int x, int y);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI2uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI2uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI2uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3i}(GLuint index, GLint x, GLint y, GLint z); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3i(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3ui}(GLuint index, GLuint x, GLuint y, GLuint z); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3ui(int index, int x, int y, int z);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI3uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI3uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI3uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4bv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4bv}(GLuint index, const GLbyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4bv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4i}(GLuint index, GLint x, GLint y, GLint z, GLint w); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4i(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI4iv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4iv}(GLuint index, const GLint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4iv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4sv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4sv}(GLuint index, const GLshort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4sv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ByteBuffer}   */
  public void glVertexAttribI4ubv(int index, ByteBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ubv}(GLuint index, const GLubyte *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ubv(int index, byte[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4ui}(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4ui(int index, int x, int y, int z, int w);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribI4uiv(int index, IntBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4uiv}(GLuint index, const GLuint *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4uiv(int index, int[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param v a direct or array-backed {@link java.nio.ShortBuffer}   */
  public void glVertexAttribI4usv(int index, ShortBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribI4usv}(GLuint index, const GLushort *  v); </code> <br>Part of <code>GL_VERSION_3_0</code>   */
  public void glVertexAttribI4usv(int index, short[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribIFormatNV}(GLuint index, GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexAttribIFormatNV(int index, int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexAttribIPointer}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_VERSION_3_0</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexAttribIPointer(int index, int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1d}(GLuint index, GLdouble x); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL1d(int index, double x);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL1dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL1dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL1dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2d}(GLuint index, GLdouble x, GLdouble y); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL2d(int index, double x, double y);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL2dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL2dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL2dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3d}(GLuint index, GLdouble x, GLdouble y, GLdouble z); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL3d(int index, double x, double y, double z);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL3dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL3dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL3dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4d}(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL4d(int index, double x, double y, double z, double w);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param v a direct or array-backed {@link java.nio.DoubleBuffer}   */
  public void glVertexAttribL4dv(int index, DoubleBuffer v);

  /** Entry point to C language function: <code> void {@native glVertexAttribL4dv}(GLuint index, const GLdouble *  v); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>   */
  public void glVertexAttribL4dv(int index, double[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribLPointer}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> <br>Part of <code>GL_ARB_vertex_attrib_64bit</code>
      @param pointer a direct or array-backed {@link java.nio.Buffer}   */
  public void glVertexAttribLPointer(int index, int size, int type, int stride, Buffer pointer);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP1ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP1uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP1uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP1uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP2ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP2uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP2uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP2uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP3ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP3uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP3uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP3uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4ui}(GLuint index, GLenum type, GLboolean normalized, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP4ui(int index, int type, boolean normalized, int value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexAttribP4uiv(int index, int type, boolean normalized, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexAttribP4uiv}(GLuint index, GLenum type, GLboolean normalized, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexAttribP4uiv(int index, int type, boolean normalized, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexFormatNV}(GLint size, GLenum type, GLsizei stride); </code> <br>Part of <code>GL_NV_vertex_buffer_unified_memory</code>   */
  public void glVertexFormatNV(int size, int type, int stride);

  /** Entry point to C language function: <code> void {@native glVertexP2ui}(GLenum type, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP2ui(int type, int value);

  /** Entry point to C language function: <code> void {@native glVertexP2uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexP2uiv(int type, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexP2uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP2uiv(int type, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexP3ui}(GLenum type, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP3ui(int type, int value);

  /** Entry point to C language function: <code> void {@native glVertexP3uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexP3uiv(int type, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexP3uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP3uiv(int type, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glVertexP4ui}(GLenum type, GLuint value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP4ui(int type, int value);

  /** Entry point to C language function: <code> void {@native glVertexP4uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>
      @param value a direct or array-backed {@link java.nio.IntBuffer}   */
  public void glVertexP4uiv(int type, IntBuffer value);

  /** Entry point to C language function: <code> void {@native glVertexP4uiv}(GLenum type, const GLuint *  value); </code> <br>Part of <code>GL_ARB_vertex_type_2_10_10_10_rev</code>   */
  public void glVertexP4uiv(int type, int[] value, int value_offset);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportArrayv(int first, int count, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportArrayv}(GLuint first, GLsizei count, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glViewportArrayv(int first, int count, float[] v, int v_offset);

  /** Entry point to C language function: <code> void {@native glViewportIndexedf}(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glViewportIndexedf(int index, float x, float y, float w, float h);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>
      @param v a direct or array-backed {@link java.nio.FloatBuffer}   */
  public void glViewportIndexedfv(int index, FloatBuffer v);

  /** Entry point to C language function: <code> void {@native glViewportIndexedfv}(GLuint index, const GLfloat *  v); </code> <br>Part of <code>GL_ARB_viewport_array</code>   */
  public void glViewportIndexedfv(int index, float[] v, int v_offset);


  // --- Begin CustomJavaCode .cfg declarations
   /**
    * Provides platform-independent access to the <code>wglAllocateMemoryNV</code> /
    * <code>glXAllocateMemoryNV</code> extension.
    */
   public java.nio.ByteBuffer glAllocateMemoryNV(int arg0, float arg1, float arg2, float arg3);
  
  /** Part of <code>GL_ARB_uniform_buffer_object</code> */
  public static final int GL_INVALID_INDEX = 0xFFFFFFFF ;
  
  /** Part of <code>GL_ARB_sync</code> */
  public static final long GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFL ;
  
  /** Part of <code>GL_ARB_shader_image_load_store</code> */
  public static final int GL_ALL_BARRIER_BITS = 0xFFFFFFFF ;
  
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL2GL3
